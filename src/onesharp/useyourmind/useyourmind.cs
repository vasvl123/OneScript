/*----------------------------------------------------------
This Source Code Form is subject to the terms of the 
Mozilla Public License, v.2.0. If a copy of the MPL 
was not distributed with this file, You can obtain one 
at http://mozilla.org/MPL/2.0/.
----------------------------------------------------------*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace onesharp
{

    public class functions : Onesharp
    {

        public functions() : base("functions") { }

        public Структура ИмяЗначение(string Имя = "", string Значение = "")
        {
            return Структура.Новый("Имя, Значение", Имя, Значение);
        }

        public ДвоичныеДанные СтруктуруВДвоичныеДанные(object знСтруктура)
        {
            var Результат = Массив.Новый();

            if (знСтруктура != Неопределено)
            {
                foreach (object Элемент in знСтруктура as IEnumerable<object>)
                {
                    object Ключ = "";
                    object Значение;
                    ДвоичныеДанные дЗначение;

                    if (знСтруктура is Массив)
                    {
                        Ключ = "";
                        Значение = Элемент;
                    }
                    else
                    {
                        Ключ = (Элемент as КлючИЗначение).Ключ;
                        Значение = (Элемент as КлючИЗначение).Значение;
                    }

                    if (Значение is Структура)
                    {
                        Ключ = "*" + Ключ;
                        дЗначение = СтруктуруВДвоичныеДанные((Структура)Значение);
                    }
                    else if (Значение is Соответствие)
                    {
                        Ключ = "&" + Ключ;
                        дЗначение = СтруктуруВДвоичныеДанные((Соответствие)Значение);
                    }
                    else if (Значение is Массив)
                    {
                        Ключ = "$" + Ключ;
                        дЗначение = СтруктуруВДвоичныеДанные((Массив)Значение);
                    }
                    else if (Значение is ДвоичныеДанные)
                    {
                        Ключ = "#" + Ключ;
                        дЗначение = Значение as ДвоичныеДанные;
                    }
                    else 
                        if (Значение is decimal) Ключ = "!" + Ключ;
                        дЗначение = ПолучитьДвоичныеДанныеИзСтроки(Строка(Значение));
                    }

                    var дКлюч = ПолучитьДвоичныеДанныеИзСтроки((string)Ключ);
                    var рдКлюч = дКлюч.Размер();
                    var рдЗначение = дЗначение.Размер();
                    var бРезультат = Новый_БуферДвоичныхДанных(6);
                    бРезультат.ЗаписатьЦелое16(0, рдКлюч);
                    бРезультат.ЗаписатьЦелое32(2, рдЗначение);
                    Результат.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бРезультат));
                    Результат.Добавить(дКлюч);
                    Результат.Добавить(дЗначение);

                }
            }
            return СоединитьДвоичныеДанные(Результат);
        }

        public Перем ДвоичныеДанныеВСтруктуру(Перем Данные, Перем парСтруктура = null)
        {
            Перем знСтруктура = парСтруктура;
            БуферДвоичныхДанных бдДанные;
            long рдДанные;

            if (ТипЗнч(Данные) == Тип("ДвоичныеДанные")) {
                ДвоичныеДанные дд = Данные as ДвоичныеДанные;
                рдДанные = дд.Размер();
                if (рдДанные == 0) return (Структура)Неопределено;
                бдДанные = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(дд);
            }
            else if (ТипЗнч(Данные) == Тип("БуферДвоичныхДанных"))
            {
                бдДанные = Данные as БуферДвоичныхДанных;
                рдДанные = бдДанные.Размер;
            }
            else 
                return (Структура)Неопределено;

	        var Позиция = 0;

	        if (знСтруктура == Неопределено)
                знСтруктура = Новый_Структура();

            while (Позиция < рдДанные - 1)
            {

                var рдКлюч = бдДанные.ПрочитатьЦелое16(Позиция);
                var рдЗначение = бдДанные.ПрочитатьЦелое32(Позиция + 2);

                if (рдКлюч + рдЗначение > рдДанные)  // Это не структура
                    return (Структура)Неопределено;

                var Ключ = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бдДанные.Прочитать(Позиция + 6, рдКлюч)));
                var бЗначение = бдДанные.Прочитать(Позиция + 6 + рдКлюч, рдЗначение);
                Позиция = Позиция + 6 + рдКлюч + рдЗначение;

                object Значение;

                var Л = Лев(Ключ, 1);
                if (Л == "*")
                {
                    Ключ = Сред(Ключ, 2);
                    Значение = ДвоичныеДанныеВСтруктуру(бЗначение, Новый_Структура());
                }
                else if (Л == "&")
                {
                    Ключ = Сред(Ключ, 2);
                    Значение = ДвоичныеДанныеВСтруктуру(бЗначение, Новый_Соответствие());
                }
                else if (Л == "$")
                {
                    Ключ = Сред(Ключ, 2);
                    Значение = ДвоичныеДанныеВСтруктуру(бЗначение, Новый_Массив());
                }
                else if (Л == "#")
                {
                    Ключ = Сред(Ключ, 2);
                    Значение = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение);
                }
                else
                {
                    Значение = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение));
                    if (Л == "!")
                    {
                        Ключ = Сред(Ключ, 2);
                        Значение = Число(Значение);
                    }
                }
                if (Ключ == "")
                    (знСтруктура as Массив).Добавить(Значение);
                else
                    (знСтруктура as Структура).Вставить(Ключ, Значение);
            }
	        return знСтруктура;
        }

        public TCPСоединение ПередатьДанные(string Хост, int Порт, Структура стрДанные) 
        {
            TCPСоединение Соединение = null;

            try
            {
                Соединение = TCPСоединение.Новый(Хост, Порт);
                Соединение.ТаймаутОтправки = 5000;
                Соединение.ОтправитьДвоичныеДанныеАсинхронно(СтруктуруВДвоичныеДанные(стрДанные));
                return Соединение;
            } 
            catch (Exception e)
            {
                Сообщить(ОписаниеОшибки(e));
                if (Соединение == Неопределено)
                {
                    Сообщить(ИмяМодуля + ": Хост недоступен: " + Хост + ":" + Порт);
                } 
                else
                {
                    Соединение.Закрыть();
                    Соединение = null;
                }
            }
            return Соединение; // ПередатьДанные()
        }

    }

}
