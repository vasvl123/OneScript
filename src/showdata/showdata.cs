// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/

using System;
using System.Collections.Generic;
using ScriptEngine.Machine;
using ScriptEngine.HostedScript.Library;
using showdata.lib;

namespace showdata
{
    class showdata : functions
    {
        public showdata() : base("showdata") { }

        public showdata ЭтотОбъект { get { return this; } }

        public class ТипВкладка : Структура
        {
            public int ИдВкладки { get { return (int)Получить("ИдВкладки"); } set { Вставить("ИдВкладки", value); } }
            public string ИдУзла { get { return Получить("ИдУзла") as string; } set { Вставить("ИдУзла", value); } }

            public string Заголовок { get { return Получить("Заголовок") as string; } set { Вставить("Заголовок", value); } }
            public string Режим { get { return Получить("Режим") as string; } set { Вставить("Режим", value); } }
            public string ТипВкладки { get { return Получить("ТипВкладки") as string; } set { Вставить("ТипВкладки", value); } }
            public string Прокрутка { get { return Получить("Прокрутка") as string; } set { Вставить("Прокрутка", value); } }

            public bool ОбновитьУзел { get { return (bool)Получить("ОбновитьУзел"); } set { Вставить("ОбновитьУзел", value); } }
            public Соответствие УзлыОбновить { get { return Получить("УзлыОбновить") as Соответствие; } set { Вставить("УзлыОбновить", value); } }

            public string ИстДанных { get { return Получить("ИстДанных") as string; } set { Вставить("ИстДанных", value); } }
            public string БазаДанных { get { return Получить("БазаДанных") as string; } set { Вставить("БазаДанных", value); } }
            public string ИмяДанных { get { return Получить("ИмяДанных") as string; } set { Вставить("ИмяДанных", value); } }
            public string ПозицияДанных { get { return Получить("ПозицияДанных") as string; } set { Вставить("ПозицияДанных", value); } }

            public Соответствие Состояния { get { return Получить("Состояния") as Соответствие; } set { Вставить("Состояния", value); } }

            public pagedata Данные;

            public ДвоичныеДанные ДвоичныеДанные { get { return Получить("Данные") as ДвоичныеДанные; } set { Вставить("Данные", value); } }

            public ТипВкладка(string strProperties, params object[] values)
            {
                var arr = new List<IValue>();
                foreach (object p in values)
                {
                    arr.Add(Знач(p));
                }
                _vartype = "Структура";
                Impl = new StructureImpl(strProperties, arr.ToArray());
            }

            public ТипВкладка(Структура str)
            {
                _vartype = "Структура";
                Impl = str.Impl;
            }
        }

        public string procid;
        Соответствие Макет;
        Соответствие Буфер;
        pagedata БуферДанные; 
        Структура БуферУзел;
        dynamic Параметры;
        Список Вкладки;
        Массив мВкладки;
        int ИдВкладки;
        bool ОбновитьВкладки;
        int? ТекущаяВкладка = null;
        ТипВкладка ТекущиеДанные, ТекущееОкно;
        Соответствие Задачи;
        Массив мЗадачи;
        dynamic ЗадачаОбновить;
        string ОбщийРезультат;
        string РезультатОбновить;
        string Скрипты;
        dynamic Команда;
        Список ВсеДанные;
        bool ОстановитьСервер;
        public string Субъект;
        string ПараметрХост;
        int Порт;
        bool Локальный;
        decimal ВремяНачало;
        string УдаленныйУзел;
        Список Библиотеки;
        //Соответствие Соединения;

        public TCPСоединение ПередатьДанные(string Хост, int Порт, Структура стрДанные)
        {
            стрДанные.Вставить("ИдПроцесса", procid);
            return base.ПередатьДанные(Хост, Порт, стрДанные);
        }

        string РазмерПоля(string Стр)
        {
            var Размер = Цел(СтрДлина(Стр) / 3);
            if (Размер < 3)
            {
                Размер = 3;
            }
            else if (Размер > 12)
            {
                Размер = 12;
            }
            return Строка(Размер);
        }


        string СтрЭкранироватьРазметку(string Стр, int огрДлины = 0)
        {
            Стр = СтрЗаменить(Стр, "&", "&amp;");
            Стр = СтрЗаменить(Стр, @"""", "&quot;");
            Стр = СтрЗаменить(Стр, "'", "&#39;");
            Стр = СтрЗаменить(Стр, "<", "&lt;");
            Стр = СтрЗаменить(Стр, ">", "&gt;");
            Стр = СтрЗаменить(Стр, Символы.ПС, "<br/>");
            if (огрДлины > 0)
            {
                var длСтр = СтрДлина(Стр);
                if (длСтр > огрДлины)
                {
                    Стр = Лев(Стр, огрДлины) + " ...";
                }
            }
            return Стр;
        }


        string ПолучитьОбласть(string ИмяОбласти, Структура ЗначенияПараметров = null)
        {
            var Область = "" + Макет.Получить(ИмяОбласти);
            if (!(ЗначенияПараметров == Неопределено))
            {
                if (СтрДлина(Область) != 0)
                {
                    foreach (КлючИЗначение КлючЗначение in ЗначенияПараметров)
                    {
                        Область = СтрЗаменить(Область, "." + КлючЗначение.Ключ, Строка(КлючЗначение.Значение));
                    }
                }
            }
            return Область;
        }


        object ПоказатьВкладки()
        {
            var Текст = "";
            if (!(procid == "1" && мВкладки.Количество() != 0))
            {
                foreach (КлючИЗначение элВкладка in мВкладки)
                {
                    var Вкладка = Вкладки.Получить(элВкладка.Значение) as ТипВкладка;
                    if (!(Вкладка.ТипВкладки == "prop"))
                    {
                        var ПарШаблона = Новый_Структура();
                        ПарШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
                        ПарШаблона.Вставить("ПараметрЗаголовок", Вкладка.Заголовок);
                        ПарШаблона.Вставить("ПараметрАктивный", (Вкладка.ИдВкладки == ТекущаяВкладка) ? "active" : "");
                        ПарШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
                        ПарШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
                        ПарШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
                        ПарШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
                        if (!(Вкладка.Режим == "image"))
                        {
                            ПарШаблона.Вставить("ПараметрБазаДанных", Вкладка.Данные.БазаДанных + " / " + Вкладка.Данные.ИмяДанных + " / " + Вкладка.Данные.ПозицияДанных);
                        }
                        Текст = Текст + ПолучитьОбласть("ОбластьВкладка", ПарШаблона);
                    }
                }
            }
            else
            {
                Текст = ПолучитьОбласть("ОбластьВкладкиМеню");
            }
            // ПараметрыШаблона.Вставить("ПараметрВкладка", ИдВкладки);
            // Текст = Текст + ПолучитьОбласть("ОбластьНоваяВкладка", ПараметрыШаблона);
            var ПараметрыШаблона = Новый_Структура();
            ПараметрыШаблона.Вставить("ПараметрВкладки", Текст);
            ПараметрыШаблона.Вставить("ПараметрЗаголовокСтраницы", "" + УзелСвойство(ТекущиеДанные, "ЗаголовокСтраницы"));
            ПараметрыШаблона.Вставить("ПараметрРежим", УзелСвойство(Вкладки.Получить(ТекущаяВкладка) as Структура, "Режим"));
            ПараметрыШаблона.Вставить("ПараметрТекущаяВкладка", "" + ТекущаяВкладка);
            Текст = ПолучитьОбласть("ОбластьВкладки", ПараметрыШаблона);
            // Меню пользователя
            ПараметрыШаблона = Новый_Структура();
            ПараметрыШаблона.Вставить("ПараметрСубъект", Субъект);
            Текст = Текст + ПолучитьОбласть("ОбластьСубъект", ПараметрыШаблона);
            return Текст;
        } // ПоказатьВкладки()


        ТипВкладка НоваяСтруктураВкладка(object Данные, string ТипВкладки, string Заголовок, string Режим, string УзелКод)
        {

            var НоваяВкладка = new ТипВкладка("ИдВкладки, ТипВкладки, ДвоичныеДанные, Состояния, УзлыОбновить, Заголовок, Режим, ИдУзла, ОбновитьУзел, Прокрутка",
                                                ИдВкладки, ТипВкладки, Данные, Новый_Соответствие(), Новый_Соответствие(), Заголовок, Режим, УзелКод, Истина, "0");

            if (Данные is pagedata) НоваяВкладка.Данные = Данные as pagedata;

            if (!(ТипВкладки == "prop"))
            {
                if (!(ТекущаяВкладка is null))
                {
                    мВкладки.Вставить(ТекущаяВкладка + 1, НоваяВкладка.ИдВкладки);
                }
                else
                {
                    мВкладки.Добавить(НоваяВкладка.ИдВкладки);
                }
                ТекущаяВкладка = ИдВкладки;
                ОбновитьВкладки = Истина;
            }
            Вкладки.Вставить(ИдВкладки, НоваяВкладка);
            ИдВкладки = ИдВкладки + 1;
            ОбщийРезультат = ОбщийРезультат + "<script>newtab('" + НоваяВкладка.ИдВкладки + "','" + НоваяВкладка.ТипВкладки + "','" + НоваяВкладка.ИдУзла + "');</script>";

            return НоваяВкладка;

        } // НоваяСтруктураВкладка()


        pagedata ПолучитьДанные(dynamic структЗадача)
        {
            var ИстДанных = "" + УзелСвойство(структЗадача.Запрос, "sdata");
            var БазаДанных = "" + УзелСвойство(структЗадача.Запрос, "sdb");
            var ИмяДанных = "" + УзелСвойство(структЗадача.Запрос, "data");
            var ПозицияДанных = "" + УзелСвойство(структЗадача.Запрос, "datapos");
            var ИмяШаблона = "" + УзелСвойство(структЗадача.Запрос, "templ");
            var ПутьДанные = ИстДанных + "/" + БазаДанных + "/" + ИмяДанных + "/" + ПозицияДанных;
            var Данные = ВсеДанные.Получить(ПутьДанные);
            if (!(Данные is null))
            {
                if (Данные as string == "НетДанных")
                {
                    return null;
                }
            }
            else if (Данные is null)
            {
                var ЗадачаПараметры = Новый_Структура("ИстДанных, БазаДанных, ИмяДанных, ПозицияДанных, ИмяШаблона, cmd", ИстДанных, БазаДанных, ИмяДанных, ПозицияДанных, ИмяШаблона, "ПолучитьДанные");
                НоваяЗадача(ЗадачаПараметры, "Служебный", структЗадача);
                ВсеДанные.Вставить(ПутьДанные, "НетДанных");
            }
            return Данные;
        }


        ТипВкладка НоваяВкладка(dynamic структЗадача)
        {
            var Данные = ПолучитьДанные(структЗадача);
            if (Данные == Неопределено)
            { // пока нет данных
                return null;
            }
            else if (ТипЗнч(Данные) == Тип("ДвоичныеДанные"))
            {
                var Режим = "image";
                var ТипВкладки = "win";
                var ИмяДанных = УзелСвойство(структЗадача.Запрос, "data");
                ТекущиеДанные = НоваяСтруктураВкладка(Данные, ТипВкладки, ИмяДанных, Режим, null);
                ТекущиеДанные.Вставить("ИстДанных", структЗадача.Запрос.sdata);
                ТекущиеДанные.Вставить("БазаДанных", структЗадача.Запрос.sdb);
                ТекущиеДанные.Вставить("ИмяДанных", "" + УзелСвойство(структЗадача.Запрос, "data"));
                ТекущиеДанные.Вставить("ПозицияДанных", "" + УзелСвойство(структЗадача.Запрос, "datapos"));
            }
            else
            {
                var Режим = "" + УзелСвойство(структЗадача.Запрос, "mode");
                if (Режим == "")
                {
                    Режим = "view";
                }
                var ТипВкладки = "" + УзелСвойство(структЗадача.Запрос, "type");
                if (ТипВкладки == "")
                {
                    ТипВкладки = "data";
                }
                var ИдУзла = "" + УзелСвойство(структЗадача.Запрос, "nodeid");
                if (ИдУзла == "")
                {
                    ИдУзла = Данные.Корень.Код;
                }
                ТекущиеДанные = НоваяСтруктураВкладка(Данные, ТипВкладки, Данные.ИмяДанных, Режим, ИдУзла);
                var ЗаголовокСтраницы = Данные.ИмяДанных + " - onesharp.net";
                var свУзел = Данные.Корень.Дочерний;
                if (!(свУзел == Неопределено))
                {
                    if (свУзел.Имя == "Свойства.")
                    {
                        var Свойства = свУзел;
                        if (Свойства.Свойство("д"))
                        {
                            if (Свойства.д.Свойство("Заголовок"))
                            {
                                ЗаголовокСтраницы = Свойства.д.Заголовок.Значение;
                            }
                            if (Свойства.д.Свойство("Меню"))
                            {
                                var Меню = Свойства.д.Меню.Значение;
                                ТекущиеДанные.Вставить("Меню", Меню);
                            }
                        }
                    }
                }
                ТекущиеДанные.Вставить("ЗаголовокСтраницы", ЗаголовокСтраницы);
            }
            return ТекущиеДанные;
        }


        object НачальнаяСтраница(string Содержимое, string Заголовок, string БокПанель)
        {
            var Текст = ПолучитьОбласть("ОбластьШапка", Новый_Структура("ПараметрХост, ПараметрЗаголовок", ПараметрХост, Заголовок)) + ПолучитьОбласть("ОбластьПанельОкно", Новый_Структура("ПараметрХост, ПараметрСодержимое, ПараметрБокПанель", ПараметрХост, Содержимое, БокПанель)) + ПолучитьОбласть("ОбластьПодвал", Новый_Структура("ПараметрИдПроцесса, ПараметрХост", procid, ПараметрХост));
            return Текст;
        }


        string ПоказатьМенюИнструменты(ТипВкладка Вкладка, dynamic Узел, bool ЭтоАтрибут = false)
        {

            var ПараметрыШаблона = Новый_Структура();
            ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
            ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
            ПараметрыШаблона.Вставить("ПараметрНеактивно", "");
            ПараметрыШаблона.Вставить("ПараметрВидимость", "");

            var ПараметрМенюИнструменты = "";

            if (Вкладка.Режим == "design")
            {

                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["СтруктураДанных"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура данных");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

            }
            else
            {

                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["РедактироватьУзел"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Редактировать узел");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["СтруктураДанных"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Структура данных");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ЗначениеУзла"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Значение узла");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

                // ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ЗначениеОбъекта"]);
                // ПараметрыШаблона.Вставить("ПараметрПодсказка", "Значение объекта");
                // ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

                //Если НЕ этоАтрибут = Истина Тогда
                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйРодитель"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый родитель");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйАтрибут"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый атрибут");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйДочерний"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый дочерний");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
                //КонецЕсли;

                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовыйСоседний"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Новый соседний");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

            }

            ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВырезатьУзел"]);
            ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вырезать узел");
            ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

            ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["КопироватьУзел"]);
            ПараметрыШаблона.Вставить("ПараметрПодсказка", "Копировать узел");
            ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

            if (!(ЭтоАтрибут == Истина))
            {
                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьАтрибут"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить атрибут");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
            }

            ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьДочерний"]);
            ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить дочерний");
            ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

            ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["ВставитьСоседний"]);
            ПараметрыШаблона.Вставить("ПараметрПодсказка", "Вставить соседний");
            ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

            if (!(ЭтоАтрибут == Истина))
            {
                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьАтрибуты"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить все атрибуты");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

                ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьРодителя"]);
                ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить родителя");
                ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);
            }

            ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["УдалитьУзел"]);
            ПараметрыШаблона.Вставить("ПараметрПодсказка", "Удалить узел");
            ПараметрМенюИнструменты = ПараметрМенюИнструменты + ПолучитьОбласть("ОбластьМенюИнструменты", ПараметрыШаблона);

            ПараметрыШаблона = Новый_Структура();
            ПараметрыШаблона.Вставить("ПараметрВидМеню", Команда["МенюРедактора"]);
            ПараметрыШаблона.Вставить("ПараметрМенюИнструменты", ПараметрМенюИнструменты);
            var КнопкаИнструменты = ПолучитьОбласть("ОбластьМеню", ПараметрыШаблона);

            return КнопкаИнструменты;

        } // ПоказатьМенюИнструменты()


        string ПоказатьСтруктуруУзла(ТипВкладка Вкладка, dynamic Узел, bool ЭтоАтрибут = false, string Атрибуты = "", string Дочерний = "")
        {

            var Представление = "";

            var УзелОткрыт = УзелСостояние(Вкладка, Узел, "УзелОткрыт") as bool?;
            if (УзелОткрыт is null)
            {
                УзелОткрыт = Ложь;
            }

            var УзелИмя = Узел.Имя;

            var УзелЗначение = "";
            if (Узел.Свойство("Значение"))
            {
                УзелЗначение = (string)Узел.Значение;
            }

            var РедактироватьЗначение = УзелСостояние(Вкладка, Узел, "РедактироватьЗначение") as bool?;
            var РедактироватьИмя = УзелСостояние(Вкладка, Узел, "РедактироватьИмя") as bool?;

            if (ЭтоАтрибут == Истина)
            {
                УзелИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
                УзелИмя = СтрЗаменить(УзелИмя, "_", "-");
            }

            var КнопкаУзел = "";
            var ПараметрИмяУзла = "";

            if (Вкладка.ТипВкладки == "prop" && Узел.Код == Вкладка.ИдУзла)
            { // заголовок свойство
                var ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
                ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", (Лев(Узел.Код, 1) == "s") ?"-s" : "");
                ПараметрыШаблона.Вставить("ПараметрНадписьИмя", СтрЭкранироватьРазметку(УзелИмя, 50));
                ПараметрыШаблона.Вставить("ПараметрНадписьЗначение", СтрЭкранироватьРазметку(УзелЗначение, 100));
                ПараметрИмяУзла = ПолучитьОбласть("ОбластьИмяЗначениеСвойство", ПараметрыШаблона);

            }
            else
            {

                var ПараметрИмя = "";
                var ПараметрЗначение = "";

                var ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрКоманда",  (!(ЭтоАтрибут == Истина || Узел.Код == Вкладка.ИдУзла)) ? (УзелОткрыт == true ? Команда["ЗакрытьУзел"] : Команда["ОткрытьУзел"]) : Команда["СтруктураДанных"]);
                ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", (Узел.Дочерний == Неопределено) ? "-" : УзелОткрыт == true ? "&#9661;" : "&#9655;"); // "⚪" , "⚫"
                КнопкаУзел = ПолучитьОбласть("ОбластьКнопкаУзел", ПараметрыШаблона);

                if (РедактироватьИмя == Истина)
                {

                    ПараметрыШаблона = Новый_Структура();
                    ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                    ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовоеИмяУзла"]);
                    ПараметрыШаблона.Вставить("ПараметрИмяЗначение", КодироватьСтроку(УзелИмя, СпособКодированияСтроки.КодировкаURL));
                    //ПараметрыШаблона.Вставить("ПараметрДлинаСтроки", РазмерПоля(УзелИмя));
                    ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
                    ПараметрИмя = ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);
                    Скрипты = Скрипты + ПолучитьОбласть("ОбластьСкриптИзменитьИмяЗначение", ПараметрыШаблона);

                }
                else
                {

                    ПараметрыШаблона = Новый_Структура();
                    ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
                    ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
                    ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["МенюРедактора"]);
                    ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелИмя, 50));
                    ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
                    ПараметрыШаблона.Вставить("ПараметрСистемныйУзел",  ((Лев(Узел.Код, 1) == "s") ? "-s" : ""));
                    ПараметрИмя = ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

                }

                if (РедактироватьЗначение == Истина)
                {

                    ПараметрыШаблона = Новый_Структура();
                    ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                    ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["НовоеЗначениеУзла"]);
                    ПараметрыШаблона.Вставить("ПараметрИмяЗначение", КодироватьСтроку(УзелЗначение, СпособКодированияСтроки.КодировкаURL));
                    //ПараметрыШаблона.Вставить("ПараметрДлинаСтроки", РазмерПоля(УзелЗначение));
                    ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
                    ПараметрЗначение = ПолучитьОбласть("ОбластьИзменитьИмяЗначение", ПараметрыШаблона);
                    Скрипты = Скрипты + ПолучитьОбласть("ОбластьСкриптИзменитьИмяЗначение", ПараметрыШаблона);

                }
                else
                {

                    ПараметрыШаблона = Новый_Структура();
                    ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
                    ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
                    ПараметрыШаблона.Вставить("ПараметрКоманда", Команда["РедактироватьЗначение"]);
                    ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку(УзелЗначение, 100));
                    ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
                    ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", (Лев(Узел.Код, 1) == "s") ? "-s" : "");
                    ПараметрЗначение = ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

                }

                ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрИмя", ПараметрИмя);
                ПараметрыШаблона.Вставить("ПараметрЗначение", ПараметрЗначение);
                ПараметрИмяУзла = КнопкаУзел + ПолучитьОбласть("ОбластьИмяЗначение", ПараметрыШаблона);

            }

            if (!(ЭтоАтрибут || Узел.Код == Вкладка.ИдУзла))
            {

                var ПараметрЗаголовокУзла = ПараметрИмяУзла + Атрибуты;

                var ПараметрДочернийУзел = Дочерний;

                var ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрЗаголовокУзла", ПараметрЗаголовокУзла);
                ПараметрыШаблона.Вставить("ПараметрДочернийУзел", ПараметрДочернийУзел);
                Представление = ПолучитьОбласть("ОбластьУзел", ПараметрыШаблона);

            }
            else
            {

                Представление = ПараметрИмяУзла;

            }

            return Представление;

        }


        string ОтобразитьПараметры(ТипВкладка Вкладка, dynamic Узел)
        {

            var Пар = "";

            foreach (КлючИЗначение св in Узел.п)
            {

                var ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрКоманда", "");
                ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", "-");
                var КнопкаУзел = ПолучитьОбласть("ОбластьКнопкаУзел", ПараметрыШаблона);

                ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
                ПараметрыШаблона.Вставить("ПараметрКоманда", "");
                ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", св.Ключ);
                ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", 0);
                ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", "-p");
                var ПараметрИмя = ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

                ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрИдУзла", Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрИдВкладки", "" + Вкладка.ИдВкладки);
                ПараметрыШаблона.Вставить("ПараметрКоманда", "");
                ПараметрыШаблона.Вставить("ПараметрНадписьНаКнопке", СтрЭкранироватьРазметку((string)св.Значение, 100));
                ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", 0);
                ПараметрыШаблона.Вставить("ПараметрСистемныйУзел", "-p");
                var ПараметрЗначение = ПолучитьОбласть("ОбластьКнопкаИмяЗначение", ПараметрыШаблона);

                ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрИмя", ПараметрИмя);
                ПараметрыШаблона.Вставить("ПараметрЗначение", ПараметрЗначение);
                Пар = Пар + КнопкаУзел + ПолучитьОбласть("ОбластьИмяЗначение", ПараметрыШаблона);

            }

            return Пар;

        }


        string ОтобразитьDOM(ТипВкладка Вкладка, dynamic Узел, dynamic Родитель = null, bool Обновить = false, string ТипУзла = "", bool НачальныйУзел = false)
        {

            var Данные = Вкладка.Данные;

            var Представление = Неопределено;

            if (ТипУзла == "")
            {
                if (Узел.Свойство("ЭтоАтрибут") == Истина)
                {
                    ТипУзла = "Атрибут";
                }
            }

            if (УзелСостояние(Вкладка, Узел, "ОбновитьУзел") as bool? == Истина)
            {
                Обновить = Истина;
            }
            else
            {
                Представление = УзелСостояние(Вкладка, Узел, "Представление");
                if (!(Представление == Неопределено && !(Обновить)))
                {
                    Представление = "";
                }
            }

            if (Представление == Неопределено)
            {
                if (Обновить)
                {
                    var Атрибуты = "";
                    if (!(Узел.Атрибут == Неопределено))
                    {
                        Атрибуты = ОтобразитьDOM(Вкладка, Узел.Атрибут, Узел, Обновить, "Атрибут");
                    }
                    if (Узел.Свойство("п"))
                    {
                        Атрибуты = Атрибуты + ОтобразитьПараметры(Вкладка, Узел);
                    }

                    var Дочерний = "";
                    if (УзелСостояние(Вкладка, Узел, "УзелОткрыт") as bool? == Истина)
                    {
                        if (!(Узел.Дочерний == Неопределено))
                        {
                            Дочерний = ОтобразитьDOM(Вкладка, Узел.Дочерний, Узел, Обновить, "Дочерний");
                        }
                    }

                    Представление = ПоказатьСтруктуруУзла(Вкладка, Узел, (ТипУзла == "Атрибут"), Атрибуты, Дочерний);
                    УзелСостояниеЗначение(Вкладка, Узел, "Представление", Представление);
                    УзелСостояниеЗначение(Вкладка, Узел, "ОбновитьУзел", Ложь);
                    УзелСостояниеЗначение(Вкладка, Узел, "Родитель", Родитель);
                }
                else
                {
                    if (УзелСостояние(Вкладка, Узел, "УзелОткрыт") as bool? == Истина)
                    {
                        if (!(Узел.Дочерний == Неопределено))
                        {
                            Представление = ОтобразитьDOM(Вкладка, Узел.Дочерний, Узел, Обновить, "Дочерний");
                        }
                    }
                }
            }

            if (!(НачальныйУзел))
            {
                if (!(Узел.Соседний == Неопределено))
                {
                    if (Узел.Имя == "Свойства.")
                    { // свойства объекта
                        if (ТипЗнч(Узел.Соседний) == Тип("Строка"))
                        { // прочитать вложение объекта
                            Узел.Соседний = Данные.ПолучитьУзел(Узел.Соседний, Узел);
                        }
                    }
                    var Соседний = ОтобразитьDOM(Вкладка, Узел.Соседний, Родитель, Обновить, ТипУзла);
                    Представление = "" + Представление + Соседний;
                }
            }

            return "" + Представление;

        } // ОтобразитьDOM()


        string Диалог(ТипВкладка Вкладка, dynamic Узел)
        {

            var УзелИмя = Узел.Имя;

            var УзелЗначение = "";
            if (Узел.Свойство("Значение"))
            {
                УзелЗначение = (string)Узел.Значение;
            }

            var ЭтоАтрибут = (Узел.Свойство("ЭтоАтрибут") == Истина);

            if (УзелСостояние(Вкладка, Узел, "ЗагрузитьHTML") as bool? == Истина)
            {
                var ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
                return ПолучитьОбласть("ОбластьЗагрузитьHTML", ПараметрыШаблона);
            }

            if (УзелСостояние(Вкладка, Узел, "ЗагрузитьДерево") as bool? == Истина)
            {
                var ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
                return ПолучитьОбласть("ОбластьЗагрузитьДерево", ПараметрыШаблона);
            }

            if (УзелСостояние(Вкладка, Узел, "РедактироватьУзел") as bool? == Истина)
            {
                var ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                ПараметрыШаблона.Вставить("ПараметрИмяУзла", СтрЭкранироватьРазметку(УзелИмя));
                ПараметрыШаблона.Вставить("ПараметрЗначениеУзла", КодироватьСтроку(УзелЗначение, СпособКодированияСтроки.КодировкаURL));
                ПараметрыШаблона.Вставить("ПараметрЭтоАтрибут", Число(ЭтоАтрибут));
                Скрипты = Скрипты + ПолучитьОбласть("ОбластьСкриптРедактироватьУзел", ПараметрыШаблона);
                return ПолучитьОбласть("ОбластьРедактироватьУзел", ПараметрыШаблона);
            }

            if (УзелСостояние(Вкладка, Узел, "НайтиУзел") as bool? == Истина)
            {
                ОбновитьСостояние(Вкладка, Узел, "НайтиУзел", Ложь);
                var ПараметрыШаблона = Новый_Структура();
                ПараметрыШаблона.Вставить("ПараметрВкладка", "" + Вкладка.ИдВкладки);
                ПараметрыШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Код);
                Скрипты = Скрипты + ПолучитьОбласть("ОбластьСкриптНайтиУзел", ПараметрыШаблона);
                return ПолучитьОбласть("ОбластьНайтиУзел", ПараметрыШаблона);
            }

            return "";

        } // Диалог(Вкладка, Узел)


        object СформироватьОтвет()
        {
            dynamic Узел = null;
            //Команд = 0;
            //ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();

            var Ответ = "";

            if (ОбновитьВкладки == Истина)
            {
                ОбщийРезультат = ОбщийРезультат + ПоказатьВкладки();
                var Режим = УзелСвойство(Вкладки.Получить(ТекущаяВкладка) as ТипВкладка, "Режим") as string;
                if (Режим == "design")
                {
                    ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьРежимРедактор");
                }
                else if (Режим == "view")
                {
                    ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьРежимПросмотр");
                }
                else
                {
                    ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьРежимСтруктура");
                }
            }

            foreach (КлючИЗначение элВкладка in Вкладки)
            {
                var Вкладка = элВкладка.Значение as ТипВкладка;
                if (Вкладка.Данные is null && Вкладка.ДвоичныеДанные is null)
                {
                    continue;
                }

                var Представление = "";
                if (Вкладка.Режим == "struct")
                {
                    if (Вкладка.ОбновитьУзел == Истина)
                    {
                        Узел = Вкладка.Данные.ПолучитьУзел(Вкладка.ИдУзла);
                        Представление = Диалог(Вкладка, Узел);
                        if (Представление == "")
                        {
                            Представление = ОтобразитьDOM(Вкладка, Узел, null, Вкладка.ОбновитьУзел, null, Истина);
                        }
                    }
                    else if (Вкладка.УзлыОбновить.Количество() != 0)
                    {
                        foreach (КлючИЗначение элУзел in Вкладка.УзлыОбновить)
                        {
                            Узел = элУзел.Ключ as dynamic;
                            Представление = Представление + ОтобразитьDOM(Вкладка, Узел, null, Вкладка.ОбновитьУзел, null, Истина);
                        }
                    }
                }
                else if (Вкладка.Режим == "image")
                {
                    var ПараметрыШаблона = Новый_Структура();
                    ПараметрыШаблона.Вставить("ПараметрИдПроцесса", "" + procid);
                    ПараметрыШаблона.Вставить("ПараметрИстДанных", "" + Вкладка.ИстДанных);
                    ПараметрыШаблона.Вставить("ПараметрБазаДанных", "" + Вкладка.БазаДанных);
                    ПараметрыШаблона.Вставить("ПараметрИмяДанных", "" + Вкладка.ИмяДанных);
                    ПараметрыШаблона.Вставить("ПараметрПозицияДанных", "" + Вкладка.ПозицияДанных);
                    Представление = ПолучитьОбласть("ОбластьКартинка", ПараметрыШаблона);
                }
                else
                {
                    Представление = "<div class='data' style='" + ((Вкладка == ТекущиеДанные) ? "" : "display:none;") + "' id='" + Вкладка.ИдВкладки + "_0'>";
                    if (Вкладка.ОбновитьУзел == Истина)
                    {
                        Узел = Вкладка.Данные.ПолучитьУзел(Вкладка.ИдУзла);
                        Представление = Представление + Вкладка.Данные.ОбновитьПредставление(Узел) + "</div>";
                    }
                    else
                    {
                        Представление = Вкладка.Данные.Представление;
                    }
                    if (!(Представление == ""))
                    {
                        Представление = СтрЗаменить(Представление, "id='_", "id='" + Вкладка.ИдВкладки + "_");
                    }
                }
                if (Вкладка.ТипВкладки == "win")
                { // добавить окно
                    if (Вкладка.ОбновитьУзел == Истина)
                    {
                        if (Вкладка.Режим == "struct" && !(Узел == Вкладка.Данные.Корень))
                        { // это не корень, добавим кнопку родитель
                            var ПарШаблона = Новый_Структура();
                            ПарШаблона.Вставить("ПараметрИдУзла", "" + Вкладка.ИдВкладки + "_" + Узел.Родитель.Код);
                            ПарШаблона.Вставить("ПараметрКоманда", Команда["ИзменитьНачальныйУзел"]);
                            ПарШаблона.Вставить("ПараметрНадписьНаКнопке", "...");
                            ПарШаблона.Вставить("ПараметрДочернийУзел", "" + Представление);
                            Представление = ПолучитьОбласть("ОбластьКнопкаРодитель", ПарШаблона);
                        }
                        var ПараметрыШаблона = Новый_Структура();
                        ПараметрыШаблона.Вставить("ПараметрЗаголовокОкна", Вкладка.Заголовок);
                        ПараметрыШаблона.Вставить("ПараметрСодержимоеОкна", Представление);
                        ПараметрыШаблона.Вставить("ПараметрВкладка", Вкладка.ИдВкладки);
                        ПараметрыШаблона.Вставить("ПараметрИдУзла", Вкладка.ИдУзла);
                        ПараметрыШаблона.Вставить("ПараметрПрозрачность", (Вкладка.Режим == "image") ? "1" : "0.9");
                        Представление = ПолучитьОбласть("ОбластьПанель", ПараметрыШаблона);
                    }
                }
                Ответ = Ответ + Представление;
                if (ОбновитьВкладки == Истина && Вкладка.ИдВкладки == ТекущаяВкладка)
                { // показать вкладку
                    var ПараметрыШаблона = Новый_Структура();
                    ПараметрыШаблона.Вставить("ПараметрТипВкладки", Вкладка.ТипВкладки);
                    ПараметрыШаблона.Вставить("ПараметрПрокрутка", Вкладка.Прокрутка);
                    ПараметрыШаблона.Вставить("ПараметрИдВкладки", Вкладка.ИдВкладки);
                    ПараметрыШаблона.Вставить("ПараметрРежим", Вкладка.Режим);
                    ПараметрыШаблона.Вставить("ПараметрТекущаяВкладка", ТекущаяВкладка);
                    ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьСкрипт", ПараметрыШаблона);
                }
                Вкладка.УзлыОбновить.Очистить();
                Вкладка.ОбновитьУзел = Ложь;
            }

            ОбновитьВкладки = Ложь;

            foreach (КлючИЗначение элДанные in ВсеДанные)
            {
                var Данные = элДанные.Значение;
                if (Данные is pagedata)
                {
                    (Данные as pagedata).Представление = "";
                }
            }

            // Если Команд > 0 Тогда
            // 	ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьСтатус", Новый_Структура("ПараметрСтатусСообщение", "" + Цел(100*(ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало))/100 + " s " + Команд + " c"));
            // КонецЕсли;
            return Ответ;

        }


        void УстановитьПараметры(dynamic знПараметры)
        {
            Параметры = знПараметры;
            procid = Параметры.procid;
            ПараметрХост = Параметры.ПараметрХост;
            УдаленныйУзел = Параметры.УдаленныйУзел;
            Локальный = (Параметры.Локальный == "True"); // если не локальный то простаивающий процесс будет завершен
            ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Параметры); // регистрация на веб-сервере
            ПередатьДанные(Параметры.Хост, Параметры.ПортД, Параметры); // регистрация на дата-сервере
            Сообщить("showdata: procid = " + procid);
            Субъект = "";
        } // УстановитьПараметры()


        object УзелСвойство(Структура Узел, string Свойство)
        {
            Перем УзелСвойство = null;
            if (!(Узел == Неопределено))
            {
                Узел.Свойство(Свойство, ref УзелСвойство);
            }
            return Вернуть(УзелСвойство);
        } // УзелСвойство(Узел)


        object УзелСвойствоЗначение(dynamic Узел, string СвойствоИмя, object СвойствоЗначение)
        {
            if (!(Узел == Неопределено))
            {
                Узел.Вставить(СвойствоИмя, СвойствоЗначение);
            }
            return Неопределено;
        } // УзелСвойствоЗначение(Узел)


        object УзелСостояние(ТипВкладка Вкладка, dynamic Узел, string СостояниеИмя)
        {
            var УзелСостояние = Вкладка.Состояния.Получить(Узел.Код) as Структура;
            Перем зУзелСостояние = null;
            if (!(УзелСостояние == Неопределено))
            {
                УзелСостояние.Свойство(СостояниеИмя, ref зУзелСостояние);
            }
            return Вернуть(зУзелСостояние);
        } // УзелСостояние(Узел)


        object УзелСостояниеЗначение(ТипВкладка Вкладка, dynamic Узел, string СостояниеИмя, object СостояниеЗначение, bool Событие = false)
        {
            var УзелСостояние = Вкладка.Состояния.Получить(Узел.Код) as Структура;
            if (УзелСостояние == Неопределено)
            {
                УзелСостояние = Новый_Структура();
                Вкладка.Состояния.Вставить(Узел.Код, УзелСостояние);
            }
            УзелСостояние.Вставить(СостояниеИмя, СостояниеЗначение);
            //Сообщить("" + Вкладка.ИдВкладки + "_" + Узел.Код + " " + СостояниеИмя + "=" + (Лев(СостояниеЗначение,30)));
            if (СостояниеИмя == "ОбновитьУзел" && (bool)СостояниеЗначение == Истина)
            {
                if (Событие)
                {
                    Вкладка.Данные.ОбновитьУзел(Узел);
                }
                Вкладка.УзлыОбновить.Вставить(Узел);
            }
            return Неопределено;
        } // УзелСостояниеЗначение(Узел)


        bool ОбновитьСостояние(ТипВкладка Вкладка, dynamic Узел, string Состояние, object Значение, bool Событие = false, bool НачальныйУзел = false)
        {

            if (Узел == Неопределено)
            {
                return Ложь;
            }

            var Данные = Вкладка.Данные;

            var Результат = Истина;

            if (Состояние == "Изменить")
            {
                // ОбновитьСостояние(Вкладка, Данные.Атрибут(Узел), "Изменить", Значение);
                // ОбновитьСостояние(Вкладка, Данные.Дочерний(Узел), "Изменить", Значение);
                // Если НЕ НачальныйУзел Тогда
                // 	ОбновитьСостояние(Вкладка, Данные.Соседний(Узел), "Изменить", Значение);
                // КонецЕсли;

            }
            else if (Состояние == "НовоеЗначениеУзла")
            {
                ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь, Истина);
                УзелСвойствоЗначение(Узел, "Значение", Значение);

            }
            else if (Состояние == "НовоеИмяУзла")
            {
                ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь, Истина);
                ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина, Истина);
                УзелСвойствоЗначение(Узел, "Имя", Значение);

            }
            else if (Состояние == "ОбновитьУзел" && (bool)Значение == Истина)
            {
                ОбновитьСостояние(Вкладка, Узел, "Представление", Неопределено, Ложь);

            }
            else if (Состояние == "Представление" && Значение == Неопределено)
            {
                var Родитель = УзелСостояние(Вкладка, Узел, "Родитель") as dynamic;
                ОбновитьСостояние(Вкладка, Родитель, "Представление", Значение, Событие);

            }

            if (!(Результат == Ложь))
            {
                УзелСостояниеЗначение(Вкладка, Узел, Состояние, Значение, Событие);
                if (!(Состояние == "ОбновитьУзел" && !(Состояние == "Представление")))
                {
                    // Обновить все связанные вкладки
                    foreach (КлючИЗначение элВкладка in Вкладки)
                    {
                        var знВкладка = элВкладка.Значение as ТипВкладка;
                        if (знВкладка.Данные == Вкладка.Данные)
                        {
                            var знУзел = знВкладка.Данные.ПолучитьУзел(Узел.Код);
                            if (!(знУзел == Неопределено))
                            {
                                ОбновитьСостояние(знВкладка, знУзел, "ОбновитьУзел", Истина, Событие);
                            }
                        }
                    }
                }
            }

            return Результат;

        } // ОбновитьСостояние()


        object ВыполнитьДействия(dynamic структЗадача)
        {
            ТипВкладка Вкладка = null;

            pagedata Данные = null;

            var Действие = УзелСвойство(структЗадача, "Действие");

            if (Действие == Неопределено)
            {
                Действие = Команда["ОбновитьСтраницу"];
            }

            // Если НЕ Действие = Неопределено Тогда

            var Запрос = структЗадача.Запрос;

            if (Действие == "ПолучитьДанные")
            { // загрузить данные с дата-сервера

                if (!(Запрос.Свойство("РезультатДанные")))
                { // запросить данные
                    var ИстДанных = Запрос.ИстДанных;
                    var БазаДанных = Запрос.БазаДанных;
                    var ИмяДанных = Запрос.ИмяДанных;
                    var ПозицияДанных = Запрос.ПозицияДанных;
                    if (ИстДанных == "doc")
                    { // шаблон документации
                        ИстДанных = "";
                        ИмяДанных = "doc";
                    }
                    else if (!(Запрос.ИмяШаблона == ""))
                    {
                        БазаДанных = "";
                        ИмяДанных = Запрос.ИмяШаблона;
                        ПозицияДанных = "";
                    }
                    // Если ПозицияДанных = "" И НЕ БазаДанных = "" Тогда // новые данные
                    // 	Запрос.Вставить("РезультатДанные", Новый_Структура("Ответ", "Новые данные"));
                    // Иначе
                    var стрЗапрос = Новый_Структура("ИстДанных, БазаДанных, ИмяДанных, ПозицияДанных, Команда", ИстДанных, БазаДанных, ИмяДанных, ПозицияДанных, "ПолучитьДанные");
                    стрЗапрос.Вставить("ОбратныйЗапрос", Новый_Структура("ИдЗадачи", структЗадача.ИдЗадачи));
                    if (!(ПередатьДанные(Параметры.Хост, Параметры.ПортД, стрЗапрос) == Неопределено))
                    {
                        Запрос.Вставить("РезультатДанные", Неопределено); // теперь ждем ответа
                    }
                    // КонецЕсли;
                }

                if (!(Запрос.РезультатДанные == Неопределено))
                { // получен ответ дата-сервера
                    Данные = null;
                    Сообщить(Запрос.РезультатДанные.Ответ);
                    string Текст = null;
                    if (Запрос.РезультатДанные.Ответ == "Успешно")
                    {
                        var ТипДанных = "" + УзелСвойство(Запрос.РезультатДанные.Результат, "ТипДанных");
                        if (ТипДанных == "2")
                        { // это файл
                            Данные = Запрос.РезультатДанные.Результат.Данные;
                        }
                        else
                        {
                            Текст = ПолучитьСтрокуИзДвоичныхДанных(Запрос.РезультатДанные.Результат.Данные);
                        }
                    }
                    else
                    {
                        Текст = ""; // создаем новый файл
                    }
                    if (!(Текст == Неопределено))
                    {
                        Данные = new pagedata(this, Текст, Запрос.БазаДанных, Запрос.ИмяДанных, Запрос.ПозицияДанных);
                    }
                    var ПутьДанные = Запрос.ИстДанных + "/" + Запрос.БазаДанных + "/" + Запрос.ИмяДанных + "/" + Запрос.ПозицияДанных;
                    ВсеДанные.Вставить(ПутьДанные, Данные);
                    if (Запрос.ИстДанных == "doc")
                    {
                        Данные.Корень.Дочерний.Дочерний.Вставить("Значение", Запрос.ИмяДанных);
                    }
                    Запрос.Удалить("РезультатДанные"); // данные загружены
                    return Истина;
                }
                return Ложь;

            }
            else if (Действие == "ЗапросДанных")
            {

                if (Запрос.Свойство("ЗапросДанных"))
                {
                    if (Запрос.ЗапросДанных.Команда == "ЗагруженныеДанные")
                    {
                        var Позиция = 1;
                        foreach (КлючИЗначение элОбъектДанных in ВсеДанные)
                        {
                            var Заголовок = Новый_Структура();
                            var ЗапросДанные = Новый_Структура("Позиция, Заголовок", Позиция, Заголовок);
                            dynamic ОбъектДанных = элОбъектДанных.Значение as Структура;
                            Заголовок.Вставить("ИмяДанных", ОбъектДанных.ИмяДанных);
                            Заголовок.Вставить("ПозицияДанных", ОбъектДанных.ПозицияДанных);
                            Заголовок.Вставить("БазаДанных", ОбъектДанных.БазаДанных);
                            Заголовок.Вставить("Размер", ОбъектДанных.Количество);
                            Запрос.Данные.НовоеЗначениеУзла(Запрос.Свойства.д.Результат, ЗапросДанные, Истина, Истина);
                            Позиция = Позиция + 1;
                        }
                        //Запрос.Данные.ОбновитьУзел(Запрос.Узел);
                        return Истина;
                    }
                }

                if (!(Запрос.Свойство("РезультатДанные")))
                {
                    var стрЗапрос = Новый_Структура("ЗапросДанных, Команда", Запрос.ЗапросДанных, "ЗапросДанных");
                    var ИстДанных = "" + УзелСвойство(Запрос.ЗапросДанных, "ИстДанных");
                    if (ИстДанных == "")
                    {
                        ИстДанных = Субъект;
                    }
                    стрЗапрос.Вставить("ИстДанных", ИстДанных);
                    стрЗапрос.Вставить("БазаДанных", УзелСвойство(Запрос.ЗапросДанных, "БазаДанных"));
                    стрЗапрос.Вставить("ИмяДанных", УзелСвойство(Запрос.ЗапросДанных, "ИмяДанных"));
                    стрЗапрос.Вставить("ПозицияДанных", УзелСвойство(Запрос.ЗапросДанных, "ПозицияДанных"));
                    стрЗапрос.Вставить("ОбратныйЗапрос", Новый_Структура("ИдЗадачи", структЗадача.ИдЗадачи));
                    if (!(ПередатьДанныеД(стрЗапрос) == Неопределено))
                    {
                        Запрос.Вставить("РезультатДанные", Неопределено);
                    }
                }
                else if (!(Запрос.РезультатДанные == Неопределено))
                { // получен ответ дата-сервера
                    var РезультатДанные = Запрос.РезультатДанные;
                    var ЗапросДанные = РезультатДанные.Результат;
                    if (РезультатДанные.Ответ == "ОшибкаПотокаДанных")
                    {
                        // сообщить об ошибке
                        return Истина;
                    }
                    else if (ЗапросДанные.ЗаголовокНайден)
                    {
                        var КонечнаяПозиция = "" + УзелСвойство(ЗапросДанные, "ПозицияДанных");
                        if (!(КонечнаяПозиция == ""))
                        {
                            Запрос.Свойства.д.ЗапросДанных.д.КонечнаяПозиция.Значение = КонечнаяПозиция;
                        }
                        while (!(ЗапросДанные == Неопределено))
                        {
                            var Запись = ЗапросДанные;
                            ЗапросДанные = УзелСвойство(ЗапросДанные, "Соседний");
                            Запись.Удалить("Соседний");
                            Запрос.Данные.НовоеЗначениеУзла(Запрос.Свойства.д.Результат, Запись, Истина, Истина); // Добавить запись в источник данных
                        }
                        Запрос.РезультатДанные = Неопределено;
                    }
                    if (РезультатДанные.Ответ == "ЗапросЗавершен")
                    { // все данные получены
                        return Истина;
                    }
                }
                return Ложь;

            }
            else if (Действие == "Морфология" || Действие == "ВнешниеДанные")
            { // запрос к внешним данным

                if (!(Запрос.Свойство("РезультатДанные")))
                {
                    var стрЗапрос = Новый_Структура("ОбратныйЗапрос, Параметры, cmd", Новый_Структура("ИдЗадачи, Хост, Порт", структЗадача.ИдЗадачи, Параметры.Хост, Порт), Запрос.Параметры, Действие);
                    if (!(ПередатьДанные(Параметры.Хост, ((Действие == "Морфология") ? Параметры.ПортМ : Параметры.ПортД), стрЗапрос) == Неопределено))
                    {
                        Запрос.Вставить("РезультатДанные", Неопределено);
                    }
                }
                else if (!(Запрос.РезультатДанные == Неопределено))
                { // получен ответ сервера
                    var РезультатДанные = Запрос.РезультатДанные;
                    Запрос.Библиотека.ОбработатьОтвет(Запрос.Параметры.Действие, Запрос.Данные, Запрос.Свойства, РезультатДанные.Результат);
                    Запрос.РезультатДанные = Неопределено;
                    return Истина;
                }
                return Ложь;

                // ИначеЕсли Действие = "ВыполнитьФункцию" Тогда
                // 	Результат = Запрос.Данные.ВызватьФункцию(Запрос.Узел, Запрос.ИмяФункции, структЗадача);
                // 	Если Результат = Истина Тогда
                // 		Запрос.Данные.ОбновитьУзел(Запрос.Узел);
                // 	КонецЕсли;
                // 	Возврат Результат;

            }
            else if (Действие == "file")
            {
                var дДанные = ПолучитьДанные(структЗадача);
                if (дДанные == Неопределено)
                { // пока нет данных
                    return Неопределено;
                }
                структЗадача.Результат = дДанные;
                return Истина;

            }
            else if (Действие == Команда["Загрузка"])
            {
                ПередатьДанныеД(Новый_Структура("ИстДанных, БазаДанных, Заголовок, Команда, дДанные, неОбратныйЗапрос", Субъект, "inbox", Новый_Структура("ИмяДанных, ТипДанных", Запрос.filename, 2), "ЗаписатьДанные", Запрос.data, Неопределено));
                return Истина;

            }
            else if (Действие == "redirect")
            {
                ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьПеренаправить", Новый_Структура("ПараметрПуть, ПараметрПауза, ПараметрТекст", Запрос.url, 0, ""));
                return Истина;

            }
            else if (Действие == "ЗавершитьЗадачу")
            {
                var сЗадача = Задачи.Получить(Запрос.сЗадача);
                if (!(сЗадача == Неопределено))
                {
                    if (сЗадача.Действие == "ЗапросДанных")
                    {
                        var стрЗапрос = Новый_Структура("сЗадача, Команда", сЗадача.ИдЗадачи, "ЗавершитьЗадачу");
                        ПередатьДанные(Параметры.Хост, Параметры.ПортД, стрЗапрос);
                    }
                    сЗадача.Этап = "УдалитьЗадачу";
                }
                return Истина;

            }
            else if (Действие == Команда["ЗавершитьПроцесс"])
            {
                Сообщить("Получена команда на завершение.");
                if (!(ОстановитьСервер))
                {
                    ОстановитьСервер = Истина;
                }
                return Ложь;

            }
            else if (Действие == Команда["ОстановитьСервер"])
            {
                ОбщийРезультат = "<div id='container' class='container-fluid data'><h3>завершение ...</h3></div>";
                ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьПеренаправить", Новый_Структура("ПараметрПуть, ПараметрПауза, ПараметрТекст", "/", 1000, ""));
                ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый_Структура("cmd, procid", "stopserver", procid));
                //ОстановитьСервер = Истина;
                return Истина;

            }
            else if (Действие == Команда["ПерезапуститьСервер"])
            {
                ОбщийРезультат = "<div id='container' class='container-fluid data'><h3>перезапуск ...</h3></div>";
                ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьПеренаправить", Новый_Структура("ПараметрПуть, ПараметрПауза, ПараметрТекст", "/", 1500, ""));
                ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый_Структура("cmd, procid", "restartserver", procid));
                //ОстановитьСервер = Истина;
                return Истина;

            }
            else if (Действие == Команда["ОбновитьДанные"])
            {

                if (!(ЗадачаОбновить == Неопределено))
                {
                    if (!(ЗадачаОбновить == структЗадача))
                    {
                        ЗадачаОбновить.Этап = "УдалитьЗадачу";
                    }
                }
                ЗадачаОбновить = структЗадача;

                return (РезультатОбновить == "") ? Неопределено : Истина;

            }
            else if (Действие == Команда["ОбновитьСтраницу"])
            {
                var Источник = УзелСвойство(структЗадача.Запрос, "ИмяКонтроллера");
                var ИмяДанных = УзелСвойство(структЗадача.Запрос, "ИмяМетода");
                if (!(Источник == "procid"))
                {
                    if (ИмяДанных == "")
                    {
                        ИмяДанных = Источник;
                        Источник = "";
                        if (ИмяДанных == "")
                        {
                            ИмяДанных = "start";
                        }
                    }
                    структЗадача.Запрос.Вставить("sdata", Источник);
                    структЗадача.Запрос.Вставить("data", ИмяДанных);
                    if (procid == "1")
                    { // если общий процесс
                        ТекущиеДанные = null;
                        foreach (КлючИЗначение элВкладка in Вкладки)
                        {
                            Вкладка = элВкладка.Значение as ТипВкладка;
                            if (Вкладка.ИстДанных == Источник && Вкладка.ИмяДанных == ИмяДанных)
                            {
                                ТекущиеДанные = Вкладка;
                                break;
                            }
                        }
                    }
                    if (ТекущиеДанные == Неопределено)
                    {
                        ТекущиеДанные = НоваяВкладка(структЗадача);
                        if (ТекущиеДанные == Неопределено)
                        {
                            return Неопределено;
                        }
                    }
                    ТекущиеДанные.ОбновитьУзел = Истина;
                    ТекущиеДанные.Вставить("ИстДанных", Источник);
                    ТекущиеДанные.Вставить("ИмяДанных", ИмяДанных);
                }
                else
                {
                    foreach (КлючИЗначение элВкладка in Вкладки)
                    {
                        Вкладка = элВкладка.Значение as ТипВкладка;
                        Вкладка.ОбновитьУзел = Истина;
                    }
                }
                var Меню = "";
                var Заголовок = "";
                var Содержимое = "<div id='win' style='position:relative;'></div><div id='data'>";
                РезультатОбновить = "";
                ОбщийРезультат = "";
                Скрипты = "";
                Содержимое = Содержимое + СформироватьОтвет() + "</div>";
                if (!(ТекущиеДанные == Неопределено))
                {
                    if (ТекущиеДанные.Данные.ОбъектыОбновить.Количество() != 0)
                    { // подождать обновления всех узлов
                        return Неопределено;
                    }
                    Меню = "" + УзелСвойство(ТекущиеДанные, "Меню");
                    Заголовок = "" + УзелСвойство(ТекущиеДанные, "ЗаголовокСтраницы");
                }
                if (Меню == "")
                {
                    Меню = ПолучитьОбласть((!(Субъект == "") || Локальный) ? "ОбластьПанельМеню" : "ОбластьПанельНетМеню");
                }
                структЗадача.Результат = НачальнаяСтраница(Содержимое, Заголовок, Меню);
                if (!(ЗадачаОбновить == Неопределено))
                {
                    ЗадачаОбновить.Этап = "УдалитьЗадачу";
                    ЗадачаОбновить = Неопределено;
                }
                ОбновитьВкладки = Истина;
                return Истина;

            }
            else if (Действие == Команда["СохранитьДанные"])
            {
                if (!(Запрос.Свойство("РезультатДанные")))
                {
                    Вкладка = Вкладки.Получить(ТекущаяВкладка) as ТипВкладка;
                    if (!(Вкладка == Неопределено))
                    {
                        Запрос.Вставить("ТекущаяВкладка", ТекущаяВкладка);
                        var ОбратныйЗапрос = Новый_Структура("ИдЗадачи", структЗадача.ИдЗадачи);
                        var Заголовок = Новый_Структура("ИмяДанных, ТипДанных", Вкладка.Данные.ИмяДанных, 3);
                        if (Запрос.Свойство("Заголовок"))
                        {
                            foreach (КлючИЗначение св in Запрос.Заголовок)
                            {
                                Заголовок.Вставить(св.Ключ, св.Значение);
                            }
                        }
                        ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый_Структура("ИстДанных, БазаДанных, Заголовок, Команда, дДанные, ОбратныйЗапрос", Субъект, Вкладка.Данные.БазаДанных, Заголовок, "ЗаписатьДанные", ПолучитьДвоичныеДанныеИзСтроки(Вкладка.Данные.СохранитьДанные()), ОбратныйЗапрос));
                        Запрос.Вставить("РезультатДанные", Неопределено);
                    }
                }
                else if (!(Запрос.РезультатДанные == Неопределено))
                { // получен ответ дата-сервера
                    //var стрСообщение = "Неизвестно";
                    Вкладка = Вкладки.Получить(Число(Запрос.ТекущаяВкладка));
                    if (!(Вкладка == Неопределено))
                    {
                        var Ответ = Запрос.РезультатДанные.Ответ;
                        var ОтветСтатус = 2;
                        if (Ответ == "Успешно")
                        {
                            if (Запрос.Свойство("События"))
                            {
                                Вкладка.Данные.ДобавитьСобытие(Запрос.События, "savedata");
                            }
                            Вкладка.Данные.ПозицияДанных = Запрос.РезультатДанные.Результат;
                            Ответ = "Данные сохранены";
                            ОтветСтатус = 1;
                        }
                        ЗаписатьСобытие(Вкладка.Данные.БазаДанных + "/" + Вкладка.Данные.ИмяДанных + "/" + Вкладка.Данные.ПозицияДанных, Ответ, ОтветСтатус);
                    }
                    return Истина;
                }
                return Ложь;

            }
            else if (Действие == Команда["УстановитьПараметры"])
            {
                УстановитьПараметры(структЗадача.Запрос);
                return Истина;

            }
            else if (Действие == Команда["НоваяБаза"])
            {
                var стрСообщение = "";
                var БазаДанных = УзелСвойство(Запрос, "sdb");
                if (!("" + БазаДанных == ""))
                {
                    if (!(Запрос.Свойство("РезультатДанные")))
                    { // отправить запрос к дата-серверу
                        var ОбратныйЗапрос = Новый_Структура("ИдЗадачи", структЗадача.ИдЗадачи);
                        ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый_Структура("ИстДанных, БазаДанных, ОбратныйЗапрос, Команда", Субъект, БазаДанных, ОбратныйЗапрос, "ПолучитьДанные"));
                        Запрос.Вставить("РезультатДанные", Неопределено);
                    }
                    else if (!(Запрос.РезультатДанные == Неопределено))
                    { // получен ответ дата-сервера
                        var кСооб = 0;
                        if (Запрос.РезультатДанные.Ответ == "Успешно")
                        {
                            стрСообщение = "Создана новая база данных " + БазаДанных;
                            кСооб = 1;
                        }
                        else
                        {
                            // Сообщить об ошибке
                            стрСообщение = Запрос.РезультатДанные.Ответ;
                            кСооб = 3;
                        }
                        ЗаписатьСобытие(БазаДанных, стрСообщение, кСооб);
                        return Истина;
                    }
                }
                else
                {
                    return Истина;
                }
                return Ложь;

            }

            var datascrolled = "" + УзелСвойство(Запрос, "datascrolled");
            if (!(datascrolled == "" && !(datascrolled == "undefined")))
            {
                if (!(ТекущиеДанные == Неопределено))
                {
                    ТекущиеДанные.Вставить("Прокрутка", datascrolled);
                }
            }

            var winscrolled = "" + УзелСвойство(Запрос, "winscrolled");
            if (!(winscrolled == "" && !(winscrolled == "undefined")))
            {
                if (!(ТекущееОкно == Неопределено))
                {
                    ТекущееОкно.Вставить("Прокрутка", winscrolled);
                }
            }

            if (Действие == Команда["НоваяВкладка"])
            {
                if (!(структЗадача.Запрос.Свойство("sdata")))
                {
                    структЗадача.Запрос.Вставить("sdata", Субъект);
                }
                Вкладка = НоваяВкладка(структЗадача);
                if (Вкладка == Неопределено)
                {
                    return Неопределено;
                }
                else if (Вкладка.ТипВкладки == "data")
                {
                    ТекущиеДанные = Вкладка;
                }
                else
                {
                    ТекущееОкно = Вкладка;
                }
                return Истина;
            }

            if (Действие == Команда["РежимРедактор"])
            {
                if (!(ТекущиеДанные == Неопределено))
                {
                    ТекущиеДанные.Режим = "design";
                    ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьРежимРедактор");
                    ОбновитьВкладки = Истина;
                }
                return Истина;
            }

            if (Действие == Команда["РежимПросмотр"])
            {
                if (!(ТекущиеДанные == Неопределено))
                {
                    ТекущиеДанные.Режим = "view";
                    ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьРежимПросмотр");
                    ОбновитьВкладки = Истина;
                }
                return Истина;
            }

            var tab = "" + УзелСвойство(Запрос, "tab");
            if (!(tab == "" && !(tab == "undefined")))
            {
                if (tab == "current")
                {
                    tab = ТекущаяВкладка;
                }
                else
                {
                    tab = Число(tab);
                }
                Вкладка = Вкладки.Получить(tab);
                if (Вкладка == Неопределено)
                {
                    return Истина;
                }

                if (Действие == Команда["ЗакрытьВкладку"])
                {
                    ОбщийРезультат = ОбщийРезультат + "<div id='" + tab + "_0'/>";
                    if (Вкладка == ТекущиеДанные)
                    {
                        ТекущиеДанные = null;
                    }
                    else if (Вкладка == ТекущееОкно)
                    {
                        ТекущееОкно = null;
                    }

                    Вкладки.Удалить(tab);
                    var удВкладка = Вкладка;

                    if (tab == ТекущаяВкладка)
                    {
                        ТекущаяВкладка = null;
                        ТипВкладка тВкладка = null;
                        foreach (КлючИЗначение элВкладка in мВкладки)
                        {
                            var знВкладка = элВкладка.Значение as ТипВкладка;
                            if (знВкладка == удВкладка)
                            {
                                tab = Неопределено;
                                continue;
                            }
                            if (tab == Неопределено && !(тВкладка == Неопределено))
                            {
                                break;
                            }
                            тВкладка = знВкладка;
                        }
                        if (!(тВкладка == Неопределено))
                        {
                            ТекущаяВкладка = тВкладка.ИдВкладки;
                            if (тВкладка.ТипВкладки == "data")
                            {
                                ТекущиеДанные = тВкладка;
                            }
                            else if (тВкладка.ТипВкладки == "win")
                            {
                                ТекущееОкно = тВкладка;
                            }
                        }
                    }

                    var пВкладка = мВкладки.Найти(удВкладка.ИдВкладки);
                    if (!(пВкладка == Неопределено))
                    {
                        мВкладки.Удалить(пВкладка);
                    }

                    if (мВкладки.Количество() == Вкладки.Количество())
                    { // нет свойств
                        ОбщийРезультат = ОбщийРезультат + "<script>$('body').removeClass('aside-menu-show');</script>";
                    }

                    ОбновитьВкладки = Истина;
                    return Истина;
                }

                if (Действие == Команда["ВыбратьВкладку"])
                {
                    ТекущаяВкладка = tab;
                    if (Вкладка.ТипВкладки == "data")
                    {
                        ТекущиеДанные = Вкладка;
                        ТекущееОкно = null;
                    }
                    if (Вкладка.ТипВкладки == "win")
                    {
                        ТекущееОкно = Вкладка;
                    }
                    //Вкладка.ОбновитьУзел = Истина;
                    ОбновитьВкладки = Истина;
                    return Истина;
                }

            }

            var ИдУзла = УзелСвойство(структЗадача.Запрос, "nodeid");

            if (ИдУзла == Неопределено)
            {
                return Истина;
            }

            var НайтиИдУзла = Найти(ИдУзла, "_");
            if (НайтиИдУзла != 0)
            {
                var НайтиИдВкладки = Число(Лев(ИдУзла, НайтиИдУзла - 1));
                Вкладка = Вкладки.Получить(НайтиИдВкладки);
                ИдУзла = Сред(ИдУзла, НайтиИдУзла + 1);
            }
            else
            {
                //Возврат Истина;
            }

            if (Вкладка == Неопределено)
            {
                if (!(ТекущаяВкладка is null))
                {
                    Вкладка = Вкладки.Получить(ТекущаяВкладка) as ТипВкладка;
                }
                else
                {
                    return Истина;
                }
            }

            Данные = Вкладка.Данные;
            if (Данные == Неопределено)
            {
                return Истина;
            }

            var Узел = Данные.ПолучитьУзел(ИдУзла);

            if (Узел == Неопределено)
            {
                return Истина;
            }

            if (Действие == Команда["Авторизация"] || Действие == Команда["Регистрация"])
            {
                if (!(Запрос.Свойство("РезультатДанные")))
                {
                    var стрЗапрос = Новый_Структура("ЗапросДанные, Команда", Запрос, Действие);
                    стрЗапрос.Вставить("ОбратныйЗапрос", Новый_Структура("ИдЗадачи", структЗадача.ИдЗадачи));
                    if (!(ПередатьДанныеД(стрЗапрос) == Неопределено))
                    {
                        Запрос.Вставить("РезультатДанные", Неопределено);
                    }
                }
                else if (!(Запрос.РезультатДанные == Неопределено))
                { // получен ответ дата-сервера
                    dynamic РезультатДанные = Запрос.РезультатДанные;
                    dynamic ЗапросДанные = РезультатДанные.Результат;
                    if (РезультатДанные.Ответ == "ОшибкаПотокаДанных")
                    {
                        // сообщить об ошибке
                        return Истина;
                    }
                    // прежние свойства нужно удалить
                    if (!(Узел.Дочерний == Неопределено))
                    {
                        Данные.УдалитьУзел(Узел.Дочерний, Истина, Истина);
                    }
                    var кУзел = Узел;
                    foreach (dynamic Параметр in ЗапросДанные)
                    {
                        var стрУзел = ИмяЗначение(Параметр.Ключ, Параметр.Значение);
                        кУзел = Данные.НовыйДочерний(Узел, стрУзел, Истина, Истина);
                    }
                    if (ЗапросДанные.ПрошелАвторизацию)
                    {
                        Субъект = ЗапросДанные.unm;
                        ИзменитьАдрес();
                        НоваяЗадача(Новый_Структура("tab, cmd", "current", "tabclose"), "Служебный");
                        НоваяЗадача(Новый_Структура("sdata, data, cmd", "", "expldb", "newtab"), "Служебный");
                        ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьПанельМеню");
                    }
                    Данные.ОбновитьУзел(Узел);
                    return Истина;
                }
                return Ложь;

            }
            else if (Действие == Команда["ПриИзменении"])
            {
                var ЗначениеПоля = УзелСвойство(Запрос, "value");
                if (!(ЗначениеПоля == Неопределено))
                {
                    Данные.ДобавитьСобытие(Узел, "ПриИзменении", ЗначениеПоля);
                }

            }
            else if (Действие == Команда["ПриНажатии"])
            {
                var ЗначениеКнопка = УзелСвойство(Запрос, "role");
                Данные.ДобавитьСобытие(Узел, "ПриНажатии", ЗначениеКнопка);

            }
            else if (Действие == Команда["ПриОтправке"])
            {
                Данные.ДобавитьСобытие(Узел, "ПриОтправке", Запрос);

            }
            else if (Действие == Команда["МенюРедактора"])
            {
                ОбщийРезультат = ОбщийРезультат + ПоказатьМенюИнструменты(Вкладка, Узел, УзелСвойство(Запрос, "attr") == "1");

            }
            else if (Действие == Команда["ОткрытьУзел"])
            {
                ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);

            }
            else if (Действие == Команда["ЗакрытьУзел"])
            {
                ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Ложь);

            }
            else if (Действие == Команда["РедактироватьЗначение"])
            {
                // Если УзелСвойство(Запрос, "attr") = "1" Тогда
                // 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
                // КонецЕсли;
                ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Истина);

            }
            else if (Действие == Команда["НовоеЗначениеУзла"])
            {
                // Если УзелСвойство(Запрос, "attr") = "1" Тогда
                // 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
                // КонецЕсли;
                if (Запрос.Свойство("valuedit"))
                {
                    Данные.ОбновитьУзел(Узел);
                    ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.valuedit);
                }
                else
                {
                    ОбновитьСостояние(Вкладка, Узел, "РедактироватьЗначение", Ложь);
                }

            }
            else if (Действие == Команда["РедактироватьИмя"])
            {

                // Если УзелСвойство(Запрос, "attr") = "1" Тогда
                // 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
                // КонецЕсли;
                ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Истина);

            }
            else if (Действие == Команда["СвойстваУзла"])
            {

                bool ПоказатьСвойство = (УзелСвойство(Запрос, "show") == "true");

                if (!(Вкладка.Режим == "design"))
                { // показать объект
                    if (ПоказатьСвойство)
                    {
                        ТекущееОкно = НоваяСтруктураВкладка(Вкладка.Данные, "win", Узел.Значение, "view", Узел.Код);
                    }
                    return Истина;
                }

                dynamic вклСвойства = Неопределено;
                foreach (КлючИЗначение элВкладка in Вкладки)
                {
                    Вкладка = элВкладка.Значение as ТипВкладка;
                    if (Вкладка.ТипВкладки == "prop" && Вкладка.ИдУзла == Узел.Код)
                    { // уже есть такая
                        вклСвойства = Вкладка;
                        ОбщийРезультат = ОбщийРезультат + "<script>showprop('#" + вклСвойства.ИдВкладки + "_0');</script>";
                        ПоказатьСвойство = Истина;
                        break;
                    }
                }

                if (вклСвойства == Неопределено && ПоказатьСвойство)
                {
                    вклСвойства = НоваяСтруктураВкладка(Данные, "prop", СтрЭкранироватьРазметку(Данные.ИмяДанных, 20), "struct", Узел.Код);
                    ОбновитьСостояние(вклСвойства, Узел, "УзелОткрыт", Истина);
                }

                var запрСвойства = УзелСвойство(Запрос, "prop");
                if (!("" + запрСвойства == ""))
                { // установить значения свойств формы объекта
                    var фУзел = Данные.ПолучитьУзел(Запрос.propid);
                    var мсв = СтрРазделить(запрСвойства, ";");
                    dynamic усв = null;
                    foreach (КлючИЗначение эл in мсв)
                    {
                        dynamic элм = СтрРазделить((string)эл.Значение, "=");
                        if (фУзел.д.Свойство(элм[0], усв))
                        {
                            усв.Вставить("Значение", элм[1]);
                            Данные.ОбновитьУзел(усв);
                            if (ПоказатьСвойство)
                            {
                                ОбновитьСостояние(вклСвойства, усв, "ОбновитьУзел", Истина);
                            }
                        }
                    }
                }

            }
            else if (Действие == Команда["РедактироватьУзел"])
            {

                ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + "  " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), "struct", Узел.Код);
                ОбновитьСостояние(ТекущееОкно, Узел, "РедактироватьУзел", Истина);

            }
            else if (Действие == Команда["ИзменитьНачальныйУзел"])
            {

                Вкладка.ИдУзла = Узел.Код;
                ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
                ОбновитьВкладки = Истина;
                Вкладка.ОбновитьУзел = Истина;

            }
            else if (Действие == Команда["ЗагрузитьДерево"])
            {

                var СтруктураЗагрузить = УзелСвойство(Запрос, "enc_value");
                if (СтруктураЗагрузить == Неопределено)
                {
                    ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20) + " import", "struct", Узел.Код);
                    ОбновитьСостояние(ТекущееОкно, Узел, "ЗагрузитьДерево", Истина);
                }
                else
                {
                    // Вызвать обработку импорта
                    Данные.СоздатьСвойства(Узел, СтруктураЗагрузить);
                    структЗадача.Вставить("Действие", Команда["ЗакрытьВкладку"]);
                    Вкладка.ОбновитьУзел = Истина;
                    return Неопределено;
                }

            }
            else if (Действие == Команда["ЗагрузитьHTML"])
            {

                var СтруктураHTML = УзелСвойство(Запрос, "enc_value");
                if (СтруктураHTML == Неопределено)
                {
                    ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20) + " import", "struct", Узел.Код);
                    ОбновитьСостояние(ТекущееОкно, Узел, "ЗагрузитьHTML", Истина);
                }
                else
                {
                    // Вызвать обработку импорта
                    СтруктураHTML = СтрРазделить(СтруктураHTML, Символы.ПС);
                    var дУзел = Данные.НовыйДочерний(Узел, ИмяЗначение());
                    Данные.ЗагрузитьHTML(дУзел, СтруктураHTML, 0);
                    ОбновитьСостояние(Вкладка, Узел, "ЗагрузитьHTML", Ложь);
                    ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
                    ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);
                    ОбновитьВкладки = Истина;
                    Вкладка.ОбновитьУзел = Истина;
                }

            }
            else if (Действие == Команда["НайтиУзел"])
            {

                var НомерУзла = "" + УзелСвойство(Запрос, "nodenumber");
                var ЗначениеУзла = "" + УзелСвойство(Запрос, "nodevalue");
                if (НомерУзла + ЗначениеУзла == "")
                {
                    ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " Найти узел", "struct", Узел.Код);
                    ОбновитьСостояние(ТекущееОкно, Узел, "НайтиУзел", Истина);
                }
                else
                {
                    if (!(НомерУзла == ""))
                    {
                        Узел = Данные.НайтиПоКоду(НомерУзла, Данные.Корень);
                    }
                    else if (!(ЗначениеУзла == ""))
                    {
                        Узел = Данные.НайтиУзел(Данные.Корень, ЗначениеУзла);
                    }
                    if (!(Узел == Неопределено))
                    {
                        Вкладка.ИдУзла = Узел.Код;
                        ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);
                        ОбновитьВкладки = Истина;
                        Вкладка.ОбновитьУзел = Истина;
                    }
                }

            }
            else if (Действие == Команда["НовоеИмяУзла"])
            {
                // Если УзелСвойство(Запрос, "attr") = "1" Тогда
                // 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
                // КонецЕсли;
                if (Запрос.Свойство("valuedit"))
                {
                    ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.valuedit);
                }
                else
                {
                    ОбновитьСостояние(Вкладка, Узел, "РедактироватьИмя", Ложь);
                }

            }
            else if (Действие == Команда["СохранитьУзел"])
            {
                // Если УзелСвойство(Запрос, "attr") = "1" Тогда
                // 	ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина);
                // КонецЕсли;
                ОбновитьСостояние(Вкладка, Узел, "НовоеИмяУзла", Запрос.name);
                ОбновитьСостояние(Вкладка, Узел, "НовоеЗначениеУзла", Запрос.value);
                структЗадача.Вставить("Действие", Команда["ЗакрытьВкладку"]);
                return Неопределено;

            }
            else if (Действие == Команда["НовыйАтрибут"])
            {
                var НовыйУзел = Данные.НовыйАтрибут(Узел, Данные.ИмяЗначение("", ""));
                ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
                //ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
                ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["НовыйДочерний"])
            {
                var НовыйУзел = Данные.НовыйДочерний(Узел, ИмяЗначение("", ""));
                ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
                //ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
                ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина);

            }
            else if (Действие == Команда["НовыйСоседний"])
            {
                var НовыйУзел = Данные.НовыйСоседний(Узел, ИмяЗначение("", ""));
                ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
                //ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьЗначение", Истина);
                ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["НовыйРодитель"])
            {
                var НовыйУзел = Данные.НовыйРодитель(Узел, ИмяЗначение("", ""));
                ОбновитьСостояние(Вкладка, НовыйУзел, "РедактироватьИмя", Истина);
                ОбновитьСостояние(Вкладка, НовыйУзел, "УзелОткрыт", Истина);
                ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["УдалитьУзел"])
            {
                var ДанныеРодительУзел = Узел.Родитель;
                Данные.УдалитьУзел(Узел);
                ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["КопироватьУзел"])
            {
                if (!(Буфер == Неопределено))
                {
                    ОсвободитьОбъект(Буфер);
                }
                Буфер = Новый_Соответствие();
                БуферУзел = Узел;
                БуферДанные = Данные;
                Данные.КопироватьУзел(Узел, Буфер);

            }
            else if (Действие == Команда["ВырезатьУзел"])
            {
                if (!(Буфер == Неопределено))
                {
                    ОсвободитьОбъект(Буфер);
                }
                Буфер = Новый_Соответствие();
                БуферУзел = Узел;
                БуферДанные = Данные;
                Данные.КопироватьУзел(Узел, Буфер);
                var ДанныеРодительУзел = Узел.Родитель;
                Данные.УдалитьУзел(Узел, Ложь);
                ОбновитьСостояние(Вкладка, ДанныеРодительУзел, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["ВставитьАтрибут"])
            {
                if (!(Буфер == Неопределено))
                {
                    var НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел, Истина, Истина, Ложь);
                    НовыйУзел.Вставить("ЭтоАтрибут", Истина);
                    НовыйУзел.Вставить("Атрибут", Неопределено);
                    //НовыйУзел.Вставить("Дочерний", Неопределено);
                    var УзелАтрибут = Узел.Атрибут;
                    Узел.Вставить("Атрибут", НовыйУзел);
                    if (!(УзелАтрибут == Неопределено))
                    {
                        НовыйУзел.Вставить("Соседний", УзелАтрибут);
                        УзелАтрибут.Вставить("Старший", НовыйУзел);
                    }
                }
                ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["ВставитьДочерний"])
            {
                if (!(Буфер == Неопределено))
                {
                    var НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел, Ложь, Истина, Ложь);
                    var УзелДочерний = Узел.Дочерний;
                    Узел.Вставить("Дочерний", НовыйУзел);
                    if (!(УзелДочерний == Неопределено))
                    {
                        НовыйУзел.Вставить("Соседний", УзелДочерний);
                        УзелДочерний.Вставить("Старший", НовыйУзел);
                    }
                }
                ОбновитьСостояние(Вкладка, Узел, "УзелОткрыт", Истина, Истина);

            }
            else if (Действие == Команда["ВставитьСоседний"])
            {
                dynamic НовыйУзел = null;
                if (!(Буфер == Неопределено))
                {
                    НовыйУзел = БуферДанные.КопироватьВетку(БуферУзел, Данные, Узел, Узел.Родитель, Ложь, Истина, Ложь);
                    var УзелСоседний = Узел.Соседний;
                    Узел.Вставить("Соседний", НовыйУзел);
                    if (!(УзелСоседний == Неопределено))
                    {
                        НовыйУзел.Вставить("Соседний", УзелСоседний);
                        УзелСоседний.Вставить("Старший", НовыйУзел);
                    }
                }
                ОбновитьСостояние(Вкладка, НовыйУзел.Родитель, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["УдалитьАтрибуты"])
            {
                if (!(Узел.Атрибут == Неопределено))
                {
                    Данные.УдалитьУзел(Узел.Атрибут, Ложь);
                    //Узел.Удалить("Атрибут");
                    Узел.Атрибут = Неопределено;
                }
                ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["УдалитьРодителя"])
            {
                if (!(УзелСвойство(Узел, "Родитель") == Неопределено))
                {
                    Данные.УдалитьРодителя(Узел);
                }
                ОбновитьСостояние(Вкладка, Узел.Родитель, "ОбновитьУзел", Истина, Истина);

            }
            else if (Действие == Команда["СтруктураДанных"])
            {

                ТекущееОкно = НоваяСтруктураВкладка(Данные, "win", Вкладка.Данные.ИмяДанных + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), "struct", Узел.Код);
                ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);

            }
            else if (Действие == Команда["ЗначениеУзла"])
            {

                ТекущееОкно = НоваяСтруктураВкладка(Вкладка.Данные, "win", Вкладка.Данные.ИмяДанных + " Значение " + " " + Узел.Имя + ":" + СтрЭкранироватьРазметку(Данные.УзелСвойство(Узел, "Значение"), 20), "view", Узел.Код);

                // ИначеЕсли Действие = Команда["ЗначениеОбъекта"] Тогда
                ///
                // 	Вкладка.Данные.ПолучитьОпределениеОбъекта(Узел);
                // 	ОбновитьСостояние(ТекущееОкно, Узел, "УзелОткрыт", Истина);
                // 	ОбновитьСостояние(Вкладка, Узел, "ОбновитьУзел", Истина);
                // 	Возврат Истина;

            }
            // КонецЕсли;

            return Истина;

        } // ВыполнитьДействия()


        public object ПолучитьБиблиотеку(string ИмяБиблиотеки, string Версия = "")
        {
            if (!(Версия == ""))
            {
                ИмяБиблиотеки = ОбъединитьПути(ИмяБиблиотеки, ИмяБиблиотеки + "-" + Версия);
            }
            var Библиотека = Библиотеки.Получить(ИмяБиблиотеки);
            if (Библиотека == Неопределено)
            {
                switch (ИмяБиблиотеки) {
                    case "Объекты":
                        Библиотека = new Объекты();
                        break;
                    case "Функции":
                        Библиотека = new Функции();
                        break;
                    case "Операторы":
                        Библиотека = new Операторы();
                        break;
                    default:
                        break;
                }
                if (Библиотека == Неопределено)
                {
                    ВызватьИсключение("Библиотека " + ИмяБиблиотеки + " не найдена");
                }
                Библиотеки.Вставить(ИмяБиблиотеки, Библиотека);
            }
            return Библиотека;
        } // ПолучитьБиблиотеку()


        void ИзменитьАдрес()
        {
            ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьИзменитьАдрес", Новый_Структура("ПараметрПуть", "/procid/" + procid));
        } // ИзменитьАдрес()


        public object ПередатьДанныеД(Структура стрДанные)
        {
            return ПередатьДанные(Параметры.Хост, Параметры.ПортД, стрДанные);
        } // ПередатьДанныеД()

        public void ЗаписатьСобытие(string стрЗаголовок, string стрСообщение, int ТипСобытия = 0, string ПараметрКоманда = "")
        {
            Сообщить(стрСообщение);
            ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый_Структура("БазаДанных, Заголовок, Команда", "log", Новый_Структура("Источник, Субъект, Тип, Сообщение", стрЗаголовок, Субъект, ТипСобытия, стрСообщение), "ЗаписатьЗаголовок"));

            ОбщийРезультат = ОбщийРезультат + ПолучитьОбласть("ОбластьУведомление",
                Новый_Структура("ПараметрТекстУведомления, ПараметрЗаголовокУведомления, ПараметрТипУведомления, ПараметрКоманда",
                стрСообщение, стрЗаголовок, ТипСобытия, ПараметрКоманда));
        } // ЗаписатьСобытие()


        public Структура НоваяЗадача(dynamic Запрос, string Тип = "Запрос", object ЗадачаВладелец = null)
        {
            Перем ИдЗадачи = null;
            dynamic структЗадача = null;
            ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
            if (Запрос.Свойство("ИдЗадачи", ref ИдЗадачи))
            {
                dynamic Задача = Задачи.Получить(ИдЗадачи) as Структура;
                if (!(Задача == Неопределено))
                {
                    if (Запрос.Свойство("РезультатДанные"))
                    {
                        //Сообщить("РезультатДанные задача=" + Задача.ИдЗадачи + " " + УзелСвойство(Задача.Запрос, "cmd") + " время=" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - Задача.ВремяНачало));
                        Задача.Этап = "ВыполнитьЗадачу";
                        Задача.Запрос.Вставить("РезультатДанные", Запрос.РезультатДанные);
                    }
                    else if (Запрос.cmd == "taskend")
                    {
                        Задача.Этап = "УдалитьЗадачу";
                    }
                }
                else
                {
                    Сообщить("Задача не найдена ИдЗадачи=" + ИдЗадачи);
                    return null;
                }
            }
            else
            {
                if (!(Запрос.Свойство("taskid", ref ИдЗадачи)))
                {
                    ИдЗадачи = Новый(ПолучитьИД());
                }
                структЗадача = Новый_Структура("ИдЗадачи, Тип, Этап, Запрос, Действие, Содержимое, Результат, ВремяНачало, ЗадачаВладелец", Строка(ИдЗадачи), Тип, "ВыполнитьЗадачу", Запрос, Неопределено, "", "", ТекущаяУниверсальнаяДатаВМиллисекундах(), ЗадачаВладелец);
                var Действие = Неопределено;
                структЗадача.Запрос.Свойство("cmd", ref Действие);
                структЗадача.Действие = Действие;
                Сообщить("Новая задача " + Тип + "=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd"));
                Задачи.Вставить(структЗадача.ИдЗадачи, структЗадача);
                мЗадачи.Добавить(структЗадача);
            }
            return структЗадача;
        }


        void ОбработатьСоединения()
        {

            Порт = (int)Число(АргументыКоманднойСтроки[0]);

            //ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "pagedata.os"), "pagedata");

            var procid = "0";

            РезультатОбновить = "";
            ОбщийРезультат = "";
            Скрипты = "";

            ОбновитьВкладки = Ложь;

            Локальный = Ложь;

            Библиотеки = Новый_Список();
            ВсеДанные = Новый_Список();

            var Соединения = Новый_Массив();

            var Таймаут = 5;

            var TCPСервер = Новый_TCPСервер(Порт);
            TCPСервер.ЗапуститьАсинхронно();
            Сообщить("Контроллер запущен на порту: " + Порт);

            мВкладки = Новый_Массив();
            Вкладки = Новый_Список();
            ИдВкладки = 0;

            Буфер = null;

            Задачи = Новый_Соответствие();
            мЗадачи = Новый_Массив();

            Макет = Новый_Соответствие();
            var Чтение = Новый_ЧтениеТекста(ОбъединитьПути(ТекущийКаталог(), "resource", "showdata.html"), "utf-8");
            var ТекстМакета = "";
            while (Истина)
            {
                var _стрМакета = Чтение.ПрочитатьСтроку();
                if (_стрМакета == Неопределено)
                {
                    break;
                }
                var стрМакета = _стрМакета as string;
                if (Лев(стрМакета, 11) == "<!--Область")
                {
                    ТекстМакета = "";
                }
                else if (Лев(стрМакета, 12) == "<!--/Область")
                {
                    Макет.Вставить(Сред(стрМакета, 6, СтрДлина(стрМакета) - 8), ТекстМакета);
                }
                else
                {
                    ТекстМакета = ТекстМакета + стрМакета + Символы.ПС;
                }
            }
            Чтение.Закрыть();

            ОстановитьСервер = Ложь;
            ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();

            while (Истина)
            {

                var НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();

                if (!(Локальный))
                {
                    if (!(procid == "0" && !(procid == "1")))
                    { // новый и общий процессы не завершаем
                        var бВремя = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало;
                        if (бВремя > 1000 * 30 * 60 || (ЗадачаОбновить == Неопределено && Субъект == "" && бВремя > 1000 * 3 * 60))
                        { // бездействие
                            Сообщить("Контроллер procid=" + procid + " простаивает.");
                            НоваяЗадача(Новый_Структура("cmd", "termproc"), "Служебный");
                            ОбщийРезультат = "<div id='container' class='container-fluid data'><h3>сессия завершена</h3></div>";
                        }
                    }
                }

                // обработать задачи
                var к = мЗадачи.Количество();
                while (к > 0 && !(ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла > 50))
                {
                    к = к - 1;
                    dynamic структЗадача = мЗадачи.Получить(0);
                    мЗадачи.Удалить(0);

                    Сообщить(структЗадача.Этап + "=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd") + " время=" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - структЗадача.ВремяНачало));

                    if (структЗадача.Этап == "ВыполнитьЗадачу")
                    {
                        bool? ЕстьРезультат = null;

                        try
                        {
                            ЕстьРезультат = ВыполнитьДействия(структЗадача);
                        }
                        catch (Exception e)
                        {
                            if (!(Параметры == Неопределено))
                            {
                                ЗаписатьСобытие("Интерпретатор", ОписаниеОшибки(e), 3);
                            }
                            else
                            {
                                Сообщить(ОписаниеОшибки(e));
                            }
                            //Инфо = ИнформацияОбОшибке();
                            //Стек = Инфо.ПолучитьСтекВызовов();
                            //foreach (Кадр in Стек)
                            //{
                            //   Сообщить(Кадр.ИмяМодуля + " / " + Кадр.Метод + " / " + Кадр.НомерСтроки);
                            //}
                            структЗадача.Этап = "УдалитьЗадачу";
                        }

                        if (ЕстьРезультат == Истина)
                        {
                            структЗадача.Этап = "ЕстьРезультат";
                        }
                        else if (ЕстьРезультат == Ложь)
                        {
                            структЗадача.Этап = "Приостановить";
                        }
                    }

                    if (РезультатОбновить == "")
                    {
                        РезультатОбновить = ОбщийРезультат + Скрипты;
                        ОбщийРезультат = "";
                        Скрипты = "";
                    }

                    if (РезультатОбновить == "")
                    {
                        // обработать данные
                        var рСформироватьОтвет = ОбновитьВкладки;

                        foreach (КлючИЗначение элВкладка in Вкладки)
                        {
                            var Вкладка = элВкладка.Значение as ТипВкладка;
                            if (Вкладка.ОбновитьУзел == Истина || Вкладка.УзлыОбновить.Количество() != 0)
                            {
                                рСформироватьОтвет = Истина;
                            }
                        }
                        var мДанные = Новый_Список();
                        foreach (КлючИЗначение элДанные in ВсеДанные)
                        {
                            var Данные = элДанные.Значение as pagedata;

                            if (Данные is pagedata)
                            {
                                if (Данные.ОбъектыОбновить.Количество() != 0)
                                {
                                    мДанные.Добавить(Данные);
                                    рСформироватьОтвет = Истина;
                                }
                            }
                        }

                        if (рСформироватьОтвет)
                        {
                            НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();
                            foreach (КлючИЗначение _Данные in мДанные)
                            {
                                var Данные = _Данные.Ключ as pagedata;
                                Данные.ОбновитьПредставление();
                                if (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла > 50)
                                {
                                    break;
                                }
                            }
                            РезультатОбновить = СформироватьОтвет() as string;
                        }

                    }

                    if (структЗадача.Этап == "ЕстьРезультат")
                    {
                        if (структЗадача.Запрос.Свойство("taskid"))
                        {
                            if (структЗадача.Результат == "")
                            {
                                структЗадача.Результат = ПолучитьДвоичныеДанныеИзСтроки(РезультатОбновить);
                                структЗадача.Содержимое = "text/html";
                                РезультатОбновить = "";
                            }
                            if (!(ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Новый_Структура("procid, taskid, ContentType, Результат", procid, структЗадача.Запрос.taskid, структЗадача.Содержимое, структЗадача.Результат)) == Неопределено))
                            {
                                структЗадача.Этап = "УдалитьЗадачу";
                            }
                        }
                        else
                        {
                            структЗадача.Этап = "УдалитьЗадачу";
                        }
                    }

                    if (структЗадача.Этап == "УдалитьЗадачу")
                    {
                        if (структЗадача == ЗадачаОбновить)
                        {
                            ЗадачаОбновить = Неопределено;
                        }
                        Сообщить("Завершил задачу=" + структЗадача.ИдЗадачи + " " + УзелСвойство(структЗадача.Запрос, "cmd") + " время=" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - структЗадача.ВремяНачало));
                        Задачи.Удалить(структЗадача.ИдЗадачи);
                        continue;
                    }

                    мЗадачи.Добавить(структЗадача);

                }

                if (ОстановитьСервер)
                {
                    break;
                }

                var Соединение = TCPСервер.ПолучитьСоединение(Таймаут);
                if (!(Соединение == Неопределено))
                {
                    Соединения.Добавить(Соединение);
                    Таймаут = 5;
                }

                к = Соединения.Количество();
                while (к > 0)
                {
                    к = к - 1;
                    Соединение = (TCPСоединение)Соединения.Получить(0);
                    Соединения.Удалить(0);

                    if (Соединение.Статус == "Данные")
                    {

                        var Запрос = Неопределено;
                        try
                        {
                            Запрос = ДвоичныеДанныеВСтруктуру(Соединение.ПолучитьДвоичныеДанные());
                        }
                        catch (Exception e)
                        {
                            Сообщить("showdata: " + ОписаниеОшибки(e));
                        }

                        if (!(Запрос == Неопределено))
                        {
                            НоваяЗадача(Запрос);
                        }

                        Соединение.Закрыть();
                        continue;

                    }
                    else if (Соединение.Статус == "Ошибка")
                    {

                        Соединение.Закрыть();
                        continue;

                    }

                    Соединения.Добавить(Соединение);

                }

                var ВремяЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла;
                if (ВремяЦикла > 100)
                {
                    Сообщить("!showdata ВремяЦикла=" + ВремяЦикла);
                }
                if (Таймаут < 50)
                {
                    Таймаут = Таймаут + 1;
                }

            }

            TCPСервер.Остановить();
            // оповещение о завершении
            if (!(Параметры == Неопределено))
            {
                ПередатьДанные(Параметры.Хост, Параметры.ПортВ, Новый_Структура("procid, cmd", procid, "termproc"));
                ПередатьДанные(Параметры.Хост, Параметры.ПортД, Новый_Структура("procid, cmd", procid, "termproc"));
                ПередатьДанные(Параметры.Хост, Параметры.ПортС, Новый_Структура("procid, cmd", procid, "termproc"));
                Приостановить(150);
            }
            
            Сообщить("Процесс procid=" + procid + " завершен.");

        }

        public void Main()
        {
            Команда = Новый_Соответствие();

            Команда.Вставить("ОбновитьСтраницу", "refresh");
            Команда.Вставить("ОткрытьУзел", "nodeopen");
            Команда.Вставить("ЗакрытьУзел", "nodeclose");
            Команда.Вставить("ОбновитьУзел", "nodereload");
            Команда.Вставить("ИзменитьНачальныйУзел", "changenode");
            Команда.Вставить("НоваяВкладка", "newtab");
            Команда.Вставить("НоваяБаза", "newdb");
            Команда.Вставить("ВыбратьВкладку", "tabselect");
            Команда.Вставить("ЗакрытьВкладку", "tabclose");
            Команда.Вставить("РедактироватьЗначение", "valuedit");
            Команда.Вставить("ЗначениеУзла", "showvalue");
            // Команда.Вставить("ЗначениеОбъекта", "showenv");
            Команда.Вставить("НовоеЗначениеУзла", "submitvalue");
            Команда.Вставить("НовоеИмяУзла", "submitname");
            Команда.Вставить("РедактироватьИмя", "namedit");
            Команда.Вставить("РедактироватьУзел", "editnode");
            Команда.Вставить("СвойстваУзла", "nodeprop");
            Команда.Вставить("ЗагрузитьHTML", "importhtml");
            Команда.Вставить("ЗагрузитьДерево", "importtree");
            Команда.Вставить("НайтиУзел", "findnode");
            Команда.Вставить("СохранитьУзел", "savenode");
            Команда.Вставить("НовыйРодитель", "paradd");
            Команда.Вставить("НовыйАтрибут", "attradd");
            Команда.Вставить("НовыйДочерний", "childadd");
            Команда.Вставить("СтруктураДанных", "structwin");
            Команда.Вставить("СохранитьДанные", "savedata");
            Команда.Вставить("РежимРедактор", "designmode");
            Команда.Вставить("РежимПросмотр", "viewmode");
            Команда.Вставить("ОбновитьДанные", "upddata");
            Команда.Вставить("ПриИзменении", "onchange");
            Команда.Вставить("ПриНажатии", "onclick");
            Команда.Вставить("ПриОтправке", "onsubmit");
            Команда.Вставить("МенюРедактора", "designmenu");
            Команда.Вставить("НовыйСоседний", "nextadd");
            Команда.Вставить("УдалитьУзел", "noderemove");
            Команда.Вставить("КопироватьУзел", "nodecopy");
            Команда.Вставить("ВырезатьУзел", "nodecut");
            Команда.Вставить("ВставитьАтрибут", "nodepasteattr");
            Команда.Вставить("ВставитьДочерний", "nodepastechild");
            Команда.Вставить("ВставитьСоседний", "nodepastenext");
            Команда.Вставить("УдалитьАтрибуты", "attremove");
            Команда.Вставить("УдалитьРодителя", "parremove");
            Команда.Вставить("ЗавершитьПроцесс", "termproc");
            Команда.Вставить("ОстановитьСервер", "stopserver");
            Команда.Вставить("ПерезапуститьСервер", "restartserver");
            Команда.Вставить("Авторизация", "auth");
            Команда.Вставить("Регистрация", "reg");
            Команда.Вставить("УстановитьПараметры", "init");
            Команда.Вставить("Загрузка", "upload");

            if (АргументыКоманднойСтроки.Length != 0)
            {
                ОбработатьСоединения();
            }

        }

    }

}
