// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/
// Идея интерпретатора https://github.com/tsukanov-as/kojura

using System;
using ScriptEngine.HostedScript.Library;


namespace showdata
{
    class pagedata : functions
    {

        public pagedata ЭтотОбъект { get { return this; } }

        public string БазаДанных;
        public string ИмяДанных;
        public string ПозицияДанных;

        ТекстовыйДокумент Данные;
        int КодУзла;
        Соответствие Узлы;
        bool Изменены;
        int сКоличество;
        int Количество;
        public Структура Пустой = null;
        //Перем Очередь;
        //Перем Значения;
        public Массив ОбъектыОбновить;
        public string Представление;
        Рефлектор _Рефлектор;
        public showdata Процесс;
        public dynamic Корень;
        Перем НетЗначения;
        Соответствие ВсеСвязи;
        Соответствие Версии;


        Структура СтрокуВСтруктуру(string Стр)
        {
            var мСтр = СтрРазделить(Стр, Символы.Таб);
            var Ключ = Неопределено;
            var Рез = Новый_Структура();
            foreach (КлючИЗначение знСтр in мСтр)
            {
                if (Ключ == Неопределено)
                {
                    Ключ = знСтр;
                }
                else
                {
                    Рез.Вставить(Ключ, знСтр);
                    Ключ = Неопределено;
                }
            }
            return Рез;
        }


        public Структура СвойстваВСтуктуру(dynamic УзелСвойства)
        {
            var Результат = Новый_Структура();
            var св = УзелСвойства.Дочерний;
            while (!(св == Неопределено))
            {
                string ИмяСвойства = св.Имя;
                if (Прав(ИмяСвойства, 1) == ".")
                { // группа свойств
                    ИмяСвойства = Лев(ИмяСвойства, СтрДлина(ИмяСвойства) - 1);
                    Результат.Вставить(ИмяСвойства, СвойстваВСтуктуру(св));
                }
                else
                {
                    Результат.Вставить(ИмяСвойства, ЗначениеСвойства(св));
                }
                св = св.Соседний;
            }
            return Результат;
        }


        public new Структура ИмяЗначение(string Имя = "", string Значение = "")
        {
            return Новый_Структура("Имя, Значение", Имя, Значение);
        }


        string СтруктуруВСтроку(dynamic знСтруктура)
        {
            if (!(ТипЗнч(знСтруктура) == Тип("Структура")))
            {
                return знСтруктура;
            }
            var Результат = "";
            foreach (КлючИЗначение Элемент in знСтруктура)
            {
                var Ключ = Элемент.Ключ as string;
                dynamic Значение = Элемент.Значение;

                if (Ключ == "Код" || Ключ == "Старший" || Ключ == "Родитель")
                {
                    continue;
                }
                else if (Ключ == "Имя")
                {
                    Ключ = "И";
                }
                else if (Ключ == "Значение")
                {
                    Ключ = "З";
                    Значение = СтрЗаменить((string)Значение, Символы.Таб, "#x9");
                    Значение = СтрЗаменить((string)Значение, Символы.ПС, "#xA");
                    Значение = СтрЗаменить((string)Значение, Символы.ВК, "#xD");
                    // ИначеЕсли Ключ = "сДочерний" Тогда
                    // 	Продолжить;
                }
                else if ("" + Значение == "")
                {
                    continue;
                }
                else
                {
                    if (Ключ == "Дочерний")
                    {
                        Ключ = "Д";
                    }
                    else if (Ключ == "Соседний")
                    {
                        Ключ = "С";
                    }
                    else if (Ключ == "Атрибут")
                    {
                        Ключ = "А";
                    }
                    else
                    {
                        continue;
                    }
                    if (ТипЗнч(Значение) == Тип("Структура"))
                    {
                        Значение = Значение.Код;
                    }
                    if (Лев(Значение, 1) == "s")
                    {
                        continue;
                    }
                }
                Результат = Результат + ((Результат == "") ? "" : Символы.Таб) + Ключ + Символы.Таб + Значение;
            }
            return Результат;
        }


        public object УзелСвойство(Структура Узел, string Свойство)
        {
            Перем УзелСвойство = null;
            if (!(Узел == Неопределено))
            {
                Узел.Свойство(Свойство, ref УзелСвойство);
            }
            return Вернуть(УзелСвойство);
        } // УзелСвойство(Узел)


        public object ЗначениеСвойства(Структура _знУзелСвойство, string Имя = null)
        {
            var Значение = Неопределено;
            dynamic знУзелСвойство = _знУзелСвойство;

            if (!(Имя == Неопределено))
            {
                знУзелСвойство = УзелСвойство(_знУзелСвойство, Имя);
            }
            if (!(знУзелСвойство == Неопределено))
            {
                var ДочернийУзел = знУзелСвойство.Дочерний;
                if (!(ДочернийУзел == Неопределено))
                {
                    Значение = Интерпретировать(ДочернийУзел, Неопределено, Ложь);
                }
                else
                {
                    Значение = "" + УзелСвойство(знУзелСвойство, "Значение");
                }
            }
            return Значение;
        } // ЗначениеСвойства()


        string ПоказатьУзел(dynamic Узел, string Атрибуты = "", string Дочерний = "", bool ЭтоАтрибут = false)
        {
            var Представление = "";

            var УзелИмя = Узел.Имя;
            var УзелЗначение = "";
            if (Узел.Свойство("Значение"))
            {
                УзелЗначение = (string)Узел.Значение;
            }

            if (ЭтоАтрибут)
            {

                if (!(Дочерний == ""))
                {
                    УзелЗначение = Дочерний;
                }

                if (УзелИмя == "Строка")
                {
                    Представление = " " + УзелЗначение;
                }
                else
                {
                    var АтрибутИмя = СтрЗаменить(УзелИмя, "xml_lang", "xml:lang");
                    АтрибутИмя = СтрЗаменить(АтрибутИмя, "_", "-");
                    Представление = " " + АтрибутИмя + @"=""" + УзелЗначение + @"""";
                }

            }
            else
            {

                if (Узел.Имя == "comment")
                {
                    Представление = "<!-- " + УзелЗначение + " -->";
                }
                else if (Узел.Имя == "br")
                {
                    Представление = "<" + Узел.Имя + ">";
                }
                else
                {
                    Представление = "<" + УзелИмя + Атрибуты + " id='" + "_" + Узел.Код + "'>";
                    Представление = Представление + УзелЗначение;
                    Представление = Представление + Дочерний + "</" + УзелИмя + ">";
                }

            }

            return Представление;

        } // ПоказатьУзел()


        // Создать копию ветки
        public Структура КопироватьВетку(dynamic Узел, pagedata Цель, dynamic Старший, dynamic Родитель, bool ЭтоАтрибут = false, bool ПервыйВызов = true, bool знСлужебный = true, Структура ПараметрыЗамены = null)
        {

            var ИмяУзла = УзелСвойство(Узел, "Имя");
            var ЗначениеУзла = УзелСвойство(Узел, "Значение");

            if (Цель == Неопределено)
            {
                Цель = ЭтотОбъект;
            }

            dynamic КопияУзел = Цель.НовыйУзел(Новый_Структура("Имя, Значение, Старший, Родитель", ИмяУзла, ЗначениеУзла, Старший, Родитель), знСлужебный || Служебный(Узел));

            if (!(ЭтоАтрибут))
            {

                if (!(Узел.Атрибут == Неопределено))
                {
                    var УзелАтрибут = КопироватьВетку(Узел.Атрибут, Цель, КопияУзел, КопияУзел, Истина, Ложь, знСлужебный || Служебный(Узел.Атрибут), ПараметрыЗамены);
                    КопияУзел.Вставить("Атрибут", УзелАтрибут);
                }

            }

            if (Узел.Дочерний == Неопределено)
            {
                if (ИмяУзла == "Узел")
                {
                    if (!(ПараметрыЗамены == Неопределено))
                    {
                        var Параметр = УзелСвойство(ПараметрыЗамены, (string)ЗначениеУзла);
                        if (ТипЗнч(Параметр) == Тип("Структура"))
                        {
                            Узел.Дочерний = Параметр;
                        }
                        else if (ТипЗнч(Параметр) == Тип("Строка"))
                        {
                            КопияУзел.Вставить("Дочерний", Цель.НовыйУзел(Новый_Структура("Имя, Значение, Старший, Родитель", "Строка", Параметр, Узел, Узел), знСлужебный || Служебный(Узел)));
                        }
                    }
                }
            }

            if (!(Узел.Дочерний == Неопределено))
            {
                var УзелДочерний = КопироватьВетку(Узел.Дочерний, Цель, КопияУзел, КопияУзел, Ложь, Ложь, знСлужебный || Служебный(Узел.Дочерний), ПараметрыЗамены);
                КопияУзел.Вставить("Дочерний", УзелДочерний);
            }

            if (ПервыйВызов)
            {
                КопияУзел.Вставить("Соседний", Неопределено);
            }
            else
            {
                if (!(Узел.Соседний == Неопределено))
                {
                    var УзелСоседний = КопироватьВетку(Узел.Соседний, Цель, КопияУзел, Родитель, ЭтоАтрибут, Ложь, знСлужебный || Служебный(Узел.Соседний), ПараметрыЗамены);
                    КопияУзел.Вставить("Соседний", УзелСоседний);
                }
            }

            return КопияУзел;

        } // КопироватьВетку()


        bool СравнитьИмя(dynamic Узел, string Тип,string Имя)
        {
            if (Узел.Имя == "О" || Узел.Имя == "Объект")
            {
                var зн = "" + УзелСвойство(Узел, "Значение");
                if (!(зн == ""))
                {
                    dynamic м = СтрРазделить(зн, " ");
                    var оТип = м[0];
                    var оИмя = м[0];
                    if (м.Количество() == 2)
                    { // полный путь
                        оИмя = м[1];
                    }
                    if (((Тип == Имя) && (оТип == Тип || оИмя == Имя)) || ((оТип == Тип || Тип == "*") && (оИмя == Имя || Имя == "*")))
                    {
                        return Истина;
                    }
                }
            }
            return Ложь;
        } // СравнитьИмя()


        object НайтиОбъекты(dynamic Узел, string оПоз, string оТип, string оИмя)
        {

            var Результаты = Новый_Массив();

            while (!(Узел == Неопределено))
            {
                if (Узел.Имя == "О" || Узел.Имя == "Объект")
                {
                    break;
                }
                Узел = Узел.Родитель;
            }

            if (оПоз == "")
            { // свой объект
                Результаты.Добавить(Узел);
                return Результаты;
            }
            else if (оПоз == "р")
            { // найти родителя
                Узел = Узел.Родитель;
                while (!(Узел == Неопределено))
                {
                    if (СравнитьИмя(Узел, оТип, оИмя))
                    {
                        Результаты.Добавить(Узел);
                        return Результаты;
                    }
                    Узел = Узел.Родитель;
                }
                return Узел;
            }
            else if (оПоз == "д")
            { // найти дочернего
                Узел = Узел.Дочерний;
            }
            else if (оПоз == "с")
            { // найти соседнего
                Узел = Узел.Родитель.Дочерний;
            }

            while (!(Узел == Неопределено))
            {
                if (СравнитьИмя(Узел, оТип, оИмя))
                {
                    Результаты.Добавить(Узел);
                }
                Узел = Узел.Соседний;
            }

            return Результаты; //Узел;

        } // НайтиОбъекты(Узел, Путь)


        Структура СвойствоОбъекта(dynamic Узел, string ИмяСвойства)
        {
            dynamic Свойство = null;
            if (!(Узел == Неопределено))
            {
                Свойство = Узел.Дочерний;
                dynamic МассивСвойства = СтрРазделить(ИмяСвойства, ".");
                var к = 0;
                while (к < МассивСвойства.Количество())
                {
                    ИмяСвойства = (string)МассивСвойства[к];
                    var св = Свойство.Дочерний;

                    while (!(св == Неопределено))
                    {
                        var ИмяУзла = св.Имя;
                        if (Прав(ИмяУзла, 1) == ".")
                        {
                            ИмяУзла = Лев(ИмяУзла, СтрДлина(ИмяУзла) - 1);
                        }
                        if (ИмяСвойства == ИмяУзла)
                        {
                            break;
                        }
                        св = св.Соседний;
                    }

                    Свойство = св;
                    if (Свойство == Неопределено)
                    {
                        break;
                    }

                    к = к + 1;
                }
            }
            return Свойство;
        } // СвойствоОбъекта()


        Массив ПолучитьСвойстваПоСсылке(dynamic Узел, object _Путь = null, bool СоздатьСвязь = false)
        {
            var Путь = (_Путь == null) ? "" : (string)_Путь;

            var Результаты = Новый_Массив();
            var НачальныйУзел = Узел;

            if (ТипЗнч(Путь) == Тип("Строка"))
            {

                if (Путь == "")
                {
                    Путь = "" + УзелСвойство(Узел, "Значение");
                    if (Путь == "")
                    {
                        if (!(Узел.Дочерний == Неопределено))
                        {
                            Путь = "" + Интерпретировать(Узел.Дочерний, Неопределено, Ложь);
                        }
                        if (Путь == "")
                        {
                            return null;
                        }
                    }
                }

                dynamic МассивПуть = СтрРазделить(Путь, " ");
                var оПоз = "";
                var оТип = "*";
                var оИмя = "*";
                if (МассивПуть.Количество() == 4)
                { // полный путь
                    оПоз = МассивПуть[0];
                    оТип = МассивПуть[1];
                    оИмя = МассивПуть[2];
                }
                else if (МассивПуть.Количество() == 3)
                { // без типа объекта
                    оПоз = МассивПуть[0];
                    оТип = МассивПуть[1];
                    оИмя = МассивПуть[1];
                }
                else if (МассивПуть.Количество() == 2)
                { // без типа и имени объекта
                    оПоз = МассивПуть[0];
                }

                var Объекты = Новый_Массив();

                if (оПоз == "у")
                { // указатель на объект или свойство
                    Узел = ПолучитьУзел(МассивПуть[1]);
                    if (!(Узел == Неопределено))
                    {
                        if (МассивПуть.Количество() == 3)
                        { // Указано имя свойства
                            Объекты.Добавить(Узел);
                        }
                        else
                        {
                            Результаты.Добавить(Узел);
                        }
                    }
                }
                else
                { // найти по маске
                    Объекты = (Массив)НайтиОбъекты(Узел, оПоз, оТип, оИмя);
                    if (Объекты.Количество() == 0)
                    {
                        Сообщить("Объекты не найдены: " + Путь);
                    }

                }

                foreach (КлючИЗначение _оУзел in Объекты)
                {
                    dynamic оУзел = _оУзел.Значение as Структура;
                    var ИмяСвойства = МассивПуть[МассивПуть.Количество() - 1];
                    Узел = СвойствоОбъекта(оУзел, ИмяСвойства);
                    if (Узел == Неопределено)
                    {
                        Сообщить("Свойство не найдено: " + Путь);
                        continue;
                    }
                    Результаты.Добавить(Узел);
                }

            }
            else
            {

                Результаты.Добавить(Путь); // только чтобы создать связь

            }


            if (СоздатьСвязь == Истина)
            {

                foreach (КлючИЗначение _Узел in Результаты)
                {
                    // объект и свойство которые нужно добавить в связи для обновления
                    var нОбъект = НачальныйУзел;
                    var нСвойство = НачальныйУзел;
                    while (!(нОбъект == Неопределено))
                    {
                        if (нОбъект.Имя == "О" || нОбъект.Имя == "Объект")
                        {
                            break;
                        }
                        if (нСвойство == НачальныйУзел && Прав(нОбъект.Родитель.Имя, 1) == ".")
                        { // группа свойств
                            нСвойство = нОбъект;
                        }
                        нОбъект = нОбъект.Родитель;
                    }

                    dynamic сУзел = _Узел.Значение as Структура;
                    var оУзел = сУзел;
                    while (!(оУзел == Неопределено))
                    {
                        if (оУзел.Имя == "О" || оУзел.Имя == "Объект")
                        {
                            break;
                        }
                        оУзел = оУзел.Родитель;
                    }

                    if (!(оУзел == нОбъект))
                    { // свои свойства не обновлять
                        var Связи = ВсеСвязи.Получить(сУзел) as Соответствие; // связанные свойства
                        if (Связи == Неопределено)
                        {
                            Связи = Новый_Соответствие();
                            ВсеСвязи.Вставить(сУзел, Связи);
                        }
                        //Сообщить("+Связи " + Узел.Код + " -> " + нОбъект.Код + " св. " + нСвойство.Код);
                        Связи.Вставить(нСвойство, нОбъект);
                    }

                }

            }

            return Результаты;

        } // ПолучитьСвойстваПоСсылке()


        public void ОбъектыОбновитьДобавить(Структура оУзел)
        {
            if (ОбъектыОбновить.Найти(оУзел) == Неопределено)
            {
                ОбъектыОбновить.Добавить(оУзел);
            }
        }


        public object ОбновитьПредставление(Структура _Узел = null)
        {

            dynamic Узел = _Узел;

            try
            {
                //Представление = "";
                if (!(Узел == Неопределено))
                {
                    //Сообщить("ОбновитьПредставление " + Узел.Код);
                    return Интерпретировать(Узел, Неопределено, Ложь) as string;
                }
                else if (ОбъектыОбновить.Количество() != 0)
                {
                    var НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();
                    var к = ОбъектыОбновить.Количество();
                    while (к > 0 && ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла < 50)
                    {
                        к = к - 1;
                        Узел = ОбъектыОбновить.Получить(0) as Структура;
                        ОбъектыОбновить.Удалить(0);
                        var Результат = ОбработатьОбъект(Узел);
                        if (Результат == Неопределено)
                        {
                            ОбъектыОбновить.Добавить(Узел);
                        }
                        else
                        {
                            Представление = Представление + Результат;
                        }
                    }
                }

            }
            catch (Exception e)
            {
                ОбъектыОбновить.Очистить();
                Процесс.ЗаписатьСобытие("Интерпретатор", ОписаниеОшибки(e), 3);
                //Сообщить(ОписаниеОшибки());
                //Инфо = ИнформацияОбОшибке();
                //Стек = Инфо.ПолучитьСтекВызовов();
                //foreach (Кадр in Стек)
                //{
                //    Сообщить(Кадр.ИмяМодуля + " / " + Кадр.Метод + " / " + Кадр.НомерСтроки);
                //}
                //УзелСостояниеЗначение(элУзел.Значение, "Ошибка", Истина);
            }

            return null;
        }


        public void ОбновитьУзел(Структура Узел)
        {
            //Сообщить("ОбновитьУзел " + Узел.Код);
            dynamic оУзел = Узел as Структура;
            ОбновитьСвязи(оУзел);
            while (!(оУзел == Неопределено))
            {
                if (оУзел.Имя == "О" || оУзел.Имя == "Объект")
                {
                    //Сообщить("Объект " + оУзел.Код);
                    var Изменения = УзелСвойство(оУзел, "Изменения") as Соответствие;
                    if (!(Изменения == Неопределено))
                    {
                        Изменения.Вставить(Узел, Истина);
                        ОбъектыОбновитьДобавить(оУзел);
                        //Сообщить("+Изменения " + Узел.Код);
                    }
                    break;
                }
                оУзел = оУзел.Родитель;
            }
        }


        Структура ПолучитьАргументы(dynamic Узел)
        {
            object Значение = null;
            var Аргументы = Новый_Структура("ЭтотУзел", Узел);
            var Аргумент = Узел.Атрибут;
            while (!(Аргумент == Неопределено))
            {
                //УзелСостояниеЗначение(Аргумент, "ЭтоАтрибут", Истина); // для отслеживания источника изменений
                if (Аргумент.Имя == "Аргумент" || Аргумент.Имя == "А")
                {
                    Аргументы.Вставить(Аргумент.Значение, Интерпретировать(Аргумент.Дочерний, Неопределено, Ложь));
                }
                else if (Аргумент.Свойство("Значение", ref Значение))
                { // тип значения аргумента - строка
                    Аргументы.Вставить(Аргумент.Имя, Значение);
                }
                else
                {
                    Аргументы.Вставить(Аргумент.Имя, Аргумент.Дочерний);
                }
                Аргумент = Аргумент.Соседний;
            }
            return Аргументы;
        }


        public void ДобавитьСобытие(dynamic Узел, string Событие, object Значение = null)
        {
            object зСвойство = null;
            dynamic уСвойство = null;

            if (Событие == "ПриНажатии")
            {
                var АтрибутПриНажатии = НайтиАтрибут(Узел, "А", "ПриНажатии"); // нужно вычислить и передать значение
                if (!(АтрибутПриНажатии == Неопределено))
                {
                    уСвойство = АтрибутПриНажатии.Дочерний;
                }
            }
            else if (Событие == "ПриИзменении")
            {
                var АтрибутЗначение = НайтиАтрибут(Узел, "А", "Значение"); // изменить значение свойства
                if (!(АтрибутЗначение == Неопределено))
                {
                    зСвойство = АтрибутЗначение.Дочерний;
                }
                var АтрибутВыбрано = НайтиАтрибут(Узел, "А", "Выбрано"); // изменить значение свойства
                if (!(АтрибутВыбрано == Неопределено))
                {
                    зСвойство = АтрибутВыбрано.Дочерний;
                }
                var АтрибутПриИзменении = НайтиАтрибут(Узел, "А", "ПриИзменении"); // нужно вычислить и передать значение
                if (!(АтрибутПриИзменении == Неопределено))
                {
                    уСвойство = АтрибутПриИзменении.Дочерний;
                }
            }

            if (!(зСвойство == Неопределено))
            {
                var Свойства = ПолучитьСвойстваПоСсылке(зСвойство as Структура);
                foreach (КлючИЗначение _Свойство in Свойства)
                {
                    var Свойство = _Свойство.Значение as Структура;
                    НовоеЗначениеУзла(Свойство, ИмяЗначение("Строка", (string)Значение), Служебный(Свойство), Неопределено, Ложь);
                }
            }

            if (!(уСвойство == Неопределено))
            {
                var Свойства = ПолучитьСвойстваПоСсылке(уСвойство);
                foreach (КлючИЗначение _Свойство in Свойства)
                {
                    var Свойство = _Свойство.Значение as Структура;
                    var уЗначение = уСвойство.Соседний;
                    if (!(уЗначение == Неопределено))
                    {
                        Значение = Интерпретировать(уЗначение);
                        //Значение = ЗначениеСвойства(сЗначение);
                        НовоеЗначениеУзла(Свойство, Значение, Истина);
                        return; // событие не создается
                    }
                }
            }

            if (!(зСвойство == Неопределено))
            {
                return; // событие не создается
            }

            var стрСобытие = Новый_Структура("Имя, Значение, Параметры", "" + Процесс.ПолучитьИД(), Событие + Символы.Таб + Узел.Код, Значение);

            dynamic УзелОбъект = null;
            while (!(Узел == Неопределено))
            {
                if (Узел.Имя == "О" || Узел.Имя == "Объект")
                {
                    УзелОбъект = Узел;
                    break;
                }
                Узел = Узел.Родитель;
            }
            if (!(УзелОбъект == Неопределено))
            {
                dynamic Свойства = null;
                var свУзел = УзелОбъект.Дочерний;
                if (!(свУзел == Неопределено))
                {
                    if (свУзел.Имя == "Свойства.")
                    {
                        Свойства = свУзел;
                    }
                }
                if (!(Свойства == Неопределено))
                {
                    if (Свойства.д.Свойство("События"))
                    {
                        НовоеЗначениеУзла(Свойства.д.События, стрСобытие, Истина, Истина);
                    }
                }
            }
        } // ДобавитьСобытие()


        string ОбъектФорма(dynamic Узел, dynamic Свойства)
        {
            var Вид = "<script>var p = {id: '" + Узел.Код + "', fid: '" + Свойства.д.Форма.Код + "'";
            var св = Свойства.д.Форма.Дочерний;
            while (!(св == Неопределено))
            {
                Вид = Вид + "," + св.Имя + ":" + св.Значение;
                св = св.Соседний;
            }
            return Вид + "}; var id='_" + Узел.Код + "'; updifrm(id,p);</script>";
        } // ОбъектФорма()


        public object СоздатьСвойства(dynamic Узел, string шСвойства, object _Служебный = null, bool? вКонец = null)
        {
            //var св = Неопределено;
            var зСлужебный = _Служебный;

            if (зСлужебный == Неопределено)
            {
                зСлужебный = Служебный(Узел);
            }
            var к = -(1);
            var св = Узел;
            var стрСвойства = СтрРазделить(шСвойства, Символы.ПС);
            foreach (КлючИЗначение _стр in стрСвойства)
            { // парсер
                var стр = _стр.Значение as string;
                if (!(стр == ""))
                {
                    dynamic м = СтрРазделить(стр, Символы.Таб) as Массив;
                    var т = 0;
                    var Имя = "";
                    var Зн = "";
                    var п = 0;
                    bool Служ = false;
                    while (п < м.Количество())
                    {
                        if (м[п] == "")
                        {
                            т = т + 1;
                        }
                        else if (Имя == "")
                        {
                            if (т == 0)
                            {
                                Служ = ((bool)зСлужебный == Истина);
                            }
                            var имзн = СтрЗаменить(м[п], ": ", Символы.Таб);
                            имзн = СтрРазделить(имзн, Символы.Таб);
                            Имя = имзн[0];
                            if (Лев(Имя, 1) == "*")
                            {
                                Служ = Истина;
                                Имя = Сред(Имя, 2);
                            }
                            if (имзн.Количество() > 1)
                            {
                                Зн = имзн[1];
                            }
                        }
                        else
                        { // атрибуты
                            break;
                        }
                        п = п + 1;
                    }
                    if (Имя == "" && Зн == "")
                    {
                        continue;
                    }
                    if (зСлужебный == "Только")
                    { // только служебные
                        if (!((bool)Служ == Истина))
                        {
                            continue;
                        }
                        if (т == 0)
                        {
                            if (Узел.д.Свойство(СтрЗаменить(Имя, ".", "")))
                            { // такое свойство уже существует
                                continue;
                            }
                        }
                    }
                    if (т > к)
                    {
                        св = НовыйДочерний(св, ИмяЗначение(Имя, "" + Зн), Служ, !(вКонец == Ложь) && Служ == Истина);
                        к = т;
                    }
                    else
                    {
                        while (т < к)
                        {
                            св = св.Родитель;
                            к = к - 1;
                        }
                        св = НовыйСоседний(св, ИмяЗначение(Имя, "" + Зн), Служ);
                    }
                    // атрибуты
                    var ат = св;
                    while (п < м.Количество())
                    {
                        var имзн = СтрРазделить(м[п], "=");
                        Имя = имзн[0];
                        if (имзн.Количество() > 1)
                        {
                            Зн = имзн[1];
                        }
                        else
                        {
                            Зн = "";
                        }
                        var д = "";
                        var н = СтрНайти(Зн, "|");
                        if (н != 0)
                        { // дочернее значение атрибута
                            д = Сред(Зн, н + 1);
                            Зн = Лев(Зн, н - 1);
                        }
                        if (ат == св)
                        {
                            ат = НовыйАтрибут(ат, ИмяЗначение(Имя, "" + Зн), Служ);
                        }
                        else
                        {
                            ат = НовыйСоседний(ат, ИмяЗначение(Имя, "" + Зн), Служ);
                        }
                        if (!(д == ""))
                        { // добавить дочерний узел в атрибут
                            имзн = СтрЗаменить(д, ": ", Символы.Таб);
                            имзн = СтрРазделить(имзн, Символы.Таб);
                            Имя = имзн[0];
                            if (имзн.Количество() > 1)
                            {
                                Зн = имзн[1];
                            }
                            НовыйДочерний(ат, ИмяЗначение(Имя, "" + Зн), Служ, Служ == Истина);
                        }
                        п = п + 1;
                    }
                }
            }

            ПостроитьСтруктуру(Узел);

            // добавить аргументы в свойства
            var Аргумент = Узел.Родитель.Атрибут;
            while (!(Аргумент == Неопределено))
            {
                Узел.д.Вставить(Аргумент.Имя, Аргумент);
                Аргумент = Аргумент.Соседний;
            }

            return Узел;
        } // СоздатьСвойства()


        object ДобавитьСвойство(dynamic УзелСвойства, Структура стрСвойства, bool Служебный = false)
        {
            var элСвойство = НовыйДочерний(УзелСвойства, стрСвойства, Служебный, Истина);
            УзелСвойства.д.Вставить(элСвойство.Имя, элСвойство);
            return элСвойство;
        } // ДобавитьСвойство()


        void ОбновитьСвязи(dynamic Узел)
        {
            //Сообщить("ОбновитьСвязи " + Узел.Код);
            var Связи = ВсеСвязи.Получить(Узел);
            if (!(Связи == Неопределено))
            {
                foreach (КлючИЗначение элУзел in Связи as Соответствие)
                {
                    //Сообщить("+Изменения " + элУзел.Ключ.Код);
                    dynamic оУзел = элУзел.Значение as Структура;
                    var Изменения = УзелСвойство(оУзел, "Изменения") as Соответствие;
                    Изменения.Вставить(элУзел.Ключ, Истина);
                    //Сообщить("+ОбъектыОбновить " + элУзел.Значение.Код);
                    ОбъектыОбновитьДобавить(оУзел);
                }
            }
        }


        object ПостроитьСтруктуру(dynamic Узел)
        {
            var УзелИмя = Узел.Имя;
            if (!(УзелИмя == ""))
            {
                if (Прав(УзелИмя, 1) == ".")
                {
                    Узел.Вставить("д", Новый_Структура());
                    УзелИмя = Лев(УзелИмя, СтрДлина(УзелИмя) - 1);
                    var дУзел = Узел.Дочерний;
                    while (!(дУзел == Неопределено))
                    {
                        Узел.д.Вставить(ПостроитьСтруктуру(дУзел), дУзел);
                        дУзел = дУзел.Соседний;
                    }
                }
            }
            return УзелИмя;
        }


        public object ОбработатьОбъект(dynamic Узел, bool Инициализация = false)
        {

            if (Узел.Значение == "")
            {
                return "";
            }

            string ИмяФункции;
            var Библиотека = УзелСвойство(Узел, "Библиотека");
            if (Библиотека == Неопределено)
            {
                var ИмяОбъекта = "";
                var ТипОбъекта = Узел.Значение as string;
                var ИмяБиблиотеки = "Объекты";

                var пТипИмя = Найти(ТипОбъекта, " ");
                if (пТипИмя > 0)
                {
                    ИмяОбъекта = Сред(ТипОбъекта, пТипИмя + 1);
                    ТипОбъекта = Лев(ТипОбъекта, пТипИмя - 1);
                }
                if (СтрНайти(ТипОбъекта, ".") != 0)
                {
                    dynamic _ТипОбъекта = СтрРазделить(ТипОбъекта, ".");
                    ИмяБиблиотеки = _ТипОбъекта[0] as string;
                    ТипОбъекта = _ТипОбъекта[1] as string;
                }

                Узел.Вставить("ИмяОбъекта", ИмяОбъекта);
                Узел.Вставить("ТипОбъекта", ТипОбъекта);

                var Версия = "" + Версии.Получить(ИмяБиблиотеки);
                Библиотека = Процесс.ПолучитьБиблиотеку(ИмяБиблиотеки, Версия);
                Узел.Вставить("Библиотека", Библиотека);
            }

            //Сообщить(ИмяДанных + " " + Узел.Код + " " + Узел.ТипОбъекта + " " + Узел.ИмяОбъекта);

            dynamic Свойства = УзелСвойство(Узел, "Свойства") as Структура;
            if (Свойства == Неопределено)
            {
                Свойства = Узел.Дочерний;
                if (!(Свойства == Неопределено))
                {
                    if (Свойства.Имя == "Свойства.")
                    {
                        ПостроитьСтруктуру(Свойства);
                    }
                    else
                    { // новый объект
                        Свойства = null;
                    }
                    Узел.Вставить("Свойства", Свойства);
                }
            }

            var Изменения = УзелСвойство(Узел, "Изменения") as Соответствие;
            if (Изменения == Неопределено)
            { // инициализация

                var Результат = Неопределено;
                Изменения = Новый_Соответствие();
                Узел.Вставить("Изменения", Изменения);
                Изменения.Вставить(Узел, Истина);

                ИмяФункции = Узел.ТипОбъекта + "_Свойства";

                if (_Рефлектор.МетодСуществует(Библиотека, ИмяФункции))
                {
                    var Параметры = Новый_Массив();
                    Параметры.Добавить(ЭтотОбъект);
                    Параметры.Добавить(Узел);
                    Результат = _Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
                    if (Результат == Неопределено)
                    { // обработать модель сразу
                        Узел.Свойство("Свойства", Свойства);
                    }
                    else if ((bool)Результат == Истина || (bool)Результат == Ложь)
                    { // модель обработать позже
                        if ((bool)Результат == Ложь)
                        { // запустить инициализацию повторно
                            Узел.Вставить("Изменения", Неопределено);
                        }
                        return Неопределено;
                    }
                    else
                    { // свойства по шаблону
                        if (!(Свойства == Неопределено))
                        {
                            СоздатьСвойства(Свойства, (string)Результат, "Только");
                        }
                    }

                }

                if (Свойства == Неопределено)
                { // новый объект
                    Свойства = НовыйДочерний(Узел, ИмяЗначение("Свойства.", ""), Служебный(Узел));
                    if (!(Результат == Неопределено))
                    {
                        СоздатьСвойства(Свойства, (string)Результат); // свойства по шаблону
                    }
                    Узел.Вставить("Свойства", Свойства);
                }

                if (Узел == Корень)
                {
                    dynamic уВерсии = УзелСвойство(Свойства.д, "Версии") as Структура;
                    if (!(уВерсии == Неопределено))
                    {
                        foreach (dynamic эл in уВерсии.д)
                        {
                            Версии.Вставить(эл.Ключ, эл.Значение.Значение);
                        }
                    }
                }

            }

            if (Инициализация)
            {
                return Свойства;
            }

            Узел.Вставить("Изменения", Новый_Соответствие());

            //Если Изменения.Количество() Тогда
            ИмяФункции = Узел.ТипОбъекта + "_Модель";
            if (_Рефлектор.МетодСуществует(Библиотека, ИмяФункции))
            {
                Сообщить("м. " + Узел.Код);
                var Параметры = Новый_Массив();
                Параметры.Добавить(ЭтотОбъект);
                Параметры.Добавить(Свойства);
                Параметры.Добавить(Изменения);
                var Обновить = _Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
                foreach (КлючИЗначение св in Изменения)
                {
                    ОбновитьСвязи(св.Ключ as Структура);
                }
                if (Обновить == Истина)
                { // запустить повторно
                    ОбъектыОбновить.Добавить(Узел);
                }
            }
            //КонецЕсли;

            var рУзел = Узел.Родитель;
            while (!(рУзел == Неопределено))
            {
                if (рУзел.Свойство("Свойства"))
                { // это объект
                    рУзел.Вставить("Состояние", Неопределено);
                }
                рУзел = рУзел.Родитель;
            }

            if (ПолучитьУзел(Узел.Код) == Неопределено)
            { // Узел был удален
                return Неопределено;
            }

            Узел.Вставить("Содержимое", Неопределено);

            // сформировать представление объекта
            var Вид = "";
            var Содержимое = Неопределено;
            if (Свойства.д.Свойство("Вид"))
            { // Стандартный вид
                Вид = ЗначениеСвойства(Свойства.д.Вид);
            }
            else
            {
                // обработать вложенные объекты
                if (!(Свойства.Соседний == Неопределено))
                {
                    Содержимое = Интерпретировать(Свойства, Неопределено, Ложь);
                }
                Узел.Вставить("Содержимое", Содержимое);
            }

            var Состояние = "<div id='_" + Узел.Код + "'>" + Вид + ЗначениеСвойства(Свойства.д, "Описание") + Содержимое + "</div>";

            if (Свойства.д.Свойство("Форма"))
            {
                Состояние = Состояние + ОбъектФорма(Узел, Свойства);
            }

            Узел.Вставить("Состояние", Состояние);

            return Состояние;

        } // ОбработатьОбъект()


        object ВызватьФункцию(dynamic Узел)
        {
            var Состояние = Неопределено;

            if (!(УзелСвойство(Узел, "Обновить") as bool? == Ложь))
            {

                var ИмяФункции = УзелСвойство(Узел, "Значение") as string;
                if (!("" + ИмяФункции == ""))
                {
                    var ИмяБиблиотеки = "Функции";

                    if (СтрНайти(ИмяФункции, ".") != 0)
                    {
                        dynamic мИмяФункции = СтрРазделить(ИмяФункции, ".");
                        ИмяБиблиотеки = мИмяФункции[0] as string;
                        ИмяФункции = мИмяФункции[1] as string;
                    }

                    var Библиотека = Процесс.ПолучитьБиблиотеку(ИмяБиблиотеки);
                    if (_Рефлектор.МетодСуществует(Библиотека, ИмяФункции))
                    {
                        var Параметры = Новый_Массив();
                        Параметры.Добавить(ЭтотОбъект);
                        var Аргументы = ПолучитьАргументы(Узел);
                        Параметры.Добавить(Аргументы);
                        Состояние = _Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
                    }
                    else
                    {
                        ВызватьИсключение("Функция " + ИмяФункции + " не найдена");
                    }
                }

                Узел.Вставить("Обновить", Ложь);
            }

            return Состояние;

        } // ВызватьФункцию()


        public object Интерпретировать(dynamic Узел, object _ЭтоАтрибут = null, bool НачальныйУзел = true)
        {
            //Перем Имя, Значение, 
            var Результат = Неопределено;

            bool ЭтоАтрибут = _ЭтоАтрибут is null ? false : (bool)_ЭтоАтрибут;

            if (!(ТипЗнч(Узел) == Тип("Структура")))
            {
                ВызватьИсключение("Неверный узел: " + Узел);
                //Сообщить("Это не узел");
                return "";
            }

            var СледУзел = Узел;
            while (!(СледУзел == Неопределено))
            {
                Узел = СледУзел;

                var Состояние = Неопределено;

                var Имя = Узел.Имя;
                var Значение = УзелСвойство(Узел, "Значение") as string;

                //Сообщить("у " + Узел.Код + " " + Имя + " " + Значение);

                if (Имя == "Истина")
                {
                    Состояние = Истина;
                }
                else if (Имя == "Ложь")
                {
                    Состояние = Ложь;
                }
                else if (Имя == "Неопределено")
                {
                    Состояние = Неопределено;
                }
                else if (Имя == "Пустой")
                {
                    Состояние = Пустой;
                }
                else if (Имя == "Число")
                {
                    if (!("" + Значение == ""))
                    {
                        Состояние = Число(Значение);
                    }
                    else
                    {
                        if (!(Узел.Дочерний == Неопределено))
                        {
                            Состояние = Число(Интерпретировать(Узел.Дочерний, Неопределено, Ложь));
                        }
                    }
                }
                else if (Имя == "Пробел")
                {
                    Состояние = " ";
                }
                else if (Имя == "Источник")
                {
                    Состояние = Процесс.Субъект;
                }
                else if (Имя == "Процесс")
                {
                    Состояние = Процесс.procid;
                }
                else if (Имя == "Строка" && !(ЭтоАтрибут))
                {
                    Состояние = "" + Значение;
                    if (!(Узел.Дочерний == Неопределено))
                    {
                        Состояние = Состояние as string + Интерпретировать(Узел.Дочерний, Неопределено, Ложь);
                    }
                }
                else if (Имя == "Структура")
                {
                    Состояние = Значение;
                }
                else if ((Имя == "Аргумент" || Имя == "А") && ЭтоАтрибут)
                {
                    // объявление аргумента
                    if (Значение == "Значение")
                    { // текстовое поле
                        if (!(Узел.Дочерний == Неопределено))
                        {
                            Состояние = @" value=""" + Интерпретировать(Узел.Дочерний) + @""" onchange=""addcmd(this,event)""";
                        }
                    }
                    else if (Значение == "Выбрано")
                    { // галочка
                        if (!(Узел.Дочерний == Неопределено))
                        {
                            Состояние = (Интерпретировать(Узел.Дочерний) == "true") ? @" checked=""checked""" : "";
                        }
                    }
                    else if (Значение == "ПриИзменении")
                    {
                        Состояние = @" onchange=""addcmd(this,event)""";
                    }
                    else if (Значение == "ПриНажатии")
                    {
                        Состояние = @" onclick=""addcmd(this,event); return false""";
                    }
                    else if (Значение == "ПриОтправке")
                    {
                        Состояние = @" onsubmit=""addcmd(this,event); return false""";
                    }

                }
                else if (Имя == "Функция" || Имя == "Ф")
                {
                    if (Узел.Дочерний == Неопределено)
                    {
                        Состояние = "" + ВызватьФункцию(Узел);
                    }
                    if (!(Узел.Дочерний == Неопределено))
                    {
                        Состояние = Состояние as string + Интерпретировать(Узел.Дочерний, Неопределено, Ложь);
                    }

                }
                else if (Имя == "Свойства.")
                { // свойства объекта
                    if (ТипЗнч(Узел.Соседний) == Тип("Строка"))
                    { // прочитать вложение объекта
                        Узел.Соседний = ПолучитьУзел(Узел.Соседний, Узел);
                    }

                }
                else if (Имя == "Объект" || Имя == "О")
                { // это объект
                  // оптимизация
                    Состояние = УзелСвойство(Узел, "Состояние");
                    if (Состояние == Неопределено)
                    {
                        ОбъектыОбновитьДобавить(Узел);
                        Состояние = "<div id='_" + Узел.Код + "'></div>";
                    }

                }
                else if (Имя == "")
                { // это оператор
                    var Параметры = Новый_Список();
                    Параметры.Добавить(ЭтотОбъект);
                    Параметры.Добавить(Узел.Дочерний);

                    var ИмяФункции = Значение as string;
                    if (!("" + Значение == ""))
                    {
                        var ИмяБиблиотеки = "Операторы";

                        if (СтрНайти(Значение as string, ".") != 0)
                        {
                            dynamic мИмяФункции = СтрРазделить(ИмяФункции, ".");
                            ИмяБиблиотеки = мИмяФункции[0];
                            ИмяФункции = мИмяФункции[1];
                        }

                        var Библиотека = УзелСвойство(Узел, "Библиотека");
                        if (Библиотека == Неопределено)
                        {
                            var Версия = "" + Версии.Получить(ИмяБиблиотеки);
                            Библиотека = Процесс.ПолучитьБиблиотеку(ИмяБиблиотеки, Версия);
                            Узел.Вставить("Библиотека", Библиотека);
                        }
                        Состояние = _Рефлектор.ВызватьМетод(Библиотека, "Оператор_" + ИмяФункции, Параметры);
                    }

                }
                else if (Имя == "Ссылка" || Имя == "С")
                {
                    dynamic Свойства = ПолучитьСвойстваПоСсылке(Узел, Неопределено, Истина);
                    if (Свойства.Количество() == 0)
                    {
                        ВызватьИсключение ("Свойство не найдено: " + Узел.Значение);
                    }
                    Состояние = Свойства[0];

                }
                else if (Имя == "Переменная" || Имя == "П")
                { // значение переменной объекта
                    var сУзел = Узел;
                    while (!(сУзел == Неопределено))
                    {
                        if (сУзел.Имя == "Свойства.")
                        {
                            Состояние = УзелСвойство(сУзел.Родитель, Значение as string);
                            if (Значение == "Содержимое" && Состояние == Неопределено)
                            {
                                Состояние = Интерпретировать(сУзел, Неопределено, Ложь);
                                сУзел.Родитель.Вставить("Содержимое", Состояние);
                            }
                            break;
                        }
                        сУзел = сУзел.Родитель;
                    }

                }
                else if (Имя == "Значение" || Имя == "З")
                { // значение свойств объектов
                    Состояние = "";
                    var сУзел = Узел;
                    var Свойства = ПолучитьСвойстваПоСсылке(Узел, Значение, Истина);
                    if (Свойства.Количество() == 0)
                    {
                        Сообщить("Свойство не найдено: " + Значение + " узел " + Узел.Код);
                    }
                    foreach (КлючИЗначение _Свойство in Свойства)
                    {
                        var Свойство = _Свойство.Значение as Структура;
                        if (Состояние == "")
                        {
                            Состояние = ЗначениеСвойства(Свойство);
                        }
                        else
                        {
                            Состояние = "" + Состояние + " " + ЗначениеСвойства(Свойство);
                        }
                    }

                }
                else if (Имя == "Свойство")
                {
                    var Элемент = Интерпретировать(Узел.Дочерний) as Структура;
                    Состояние = УзелСвойство(Элемент, Значение as string);
                }
                else if (Имя == "Атрибут")
                {
                    dynamic Элемент = Интерпретировать(Узел.Дочерний) as Структура;
                    Состояние = НайтиСоседний(Элемент.Атрибут, Значение as string).Значение;
                }
                else if (Имя == "Первый")
                {
                    dynamic Список = Интерпретировать(Узел.Дочерний) as Структура;
                    var Элемент = Список.Дочерний;
                    if (Элемент == Неопределено)
                    {
                        Элемент = Пустой;
                    }
                    Состояние = Элемент;
                }
                else if (Имя == "Соседний")
                {
                    dynamic Элемент = Интерпретировать(Узел.Дочерний) as Структура;
                    if (!(Элемент == Неопределено))
                    {
                        Элемент = Элемент.Соседний;
                    }
                    if (Элемент == Неопределено)
                    {
                        Элемент = Пустой;
                    }
                    Состояние = Элемент;
                }
                else
                {

                    if (!(ЭтоАтрибут))
                    {
                        var ЗначениеУзелДочерний = "";
                        if (!(Узел.Дочерний == Неопределено))
                        {
                            ЗначениеУзелДочерний = Интерпретировать(Узел.Дочерний, Неопределено, Ложь) as string;
                        }
                        var ЗначениеУзелАтрибут = "";
                        if (!(Узел.Атрибут == Неопределено))
                        {
                            ЗначениеУзелАтрибут = Интерпретировать(Узел.Атрибут, Истина, Ложь) as string;
                        }
                        Состояние = ПоказатьУзел(Узел, ЗначениеУзелАтрибут, ЗначениеУзелДочерний);
                    }
                    else
                    {
                        var ЗначениеУзелДочерний = "";
                        if (!(Узел.Дочерний == Неопределено))
                        {
                            ЗначениеУзелДочерний = Интерпретировать(Узел.Дочерний, Неопределено, Ложь) as string;
                        }
                        Состояние = ПоказатьУзел(Узел, "", ЗначениеУзелДочерний, Истина);
                    }

                }

                if (НачальныйУзел)
                {
                    return Состояние;
                }

                //К = К + 1;
                if (Результат == Неопределено)
                {
                    Результат = Состояние;
                }
                else
                {
                    Результат = Результат as string + Состояние;
                }

                СледУзел = Узел.Соседний;

            }

            return Результат;

        } // Интерпретировать()


        public Структура НайтиПоКоду(string Код, dynamic Старший)
        {
            var Найден = Неопределено;
            dynamic Дочерний = null;
            dynamic Соседний = null;

            var Атрибут = ПолучитьУзел(Старший.Атрибут, Старший);
            if (!(Атрибут == Неопределено))
            {
                if (Атрибут.Код == Код)
                {
                    Найден = Атрибут;
                }
            }
            if (Найден == Неопределено)
            {
                Дочерний = ПолучитьУзел(Старший.Дочерний, Старший);
                if (!(Дочерний == Неопределено))
                {
                    if (Дочерний.Код == Код)
                    {
                        Найден = Дочерний;
                    }
                }
            }
            if (Найден == Неопределено)
            {
                Соседний = ПолучитьУзел(Старший.Соседний, Старший);
                if (!(Соседний == Неопределено))
                {
                    if (Соседний.Код == Код)
                    {
                        Найден = Соседний;
                    }
                }
            }

            if (Найден == Неопределено)
            {
                if (!(Атрибут == Неопределено))
                {
                    Найден = НайтиПоКоду(Код, Атрибут);
                }
            }
            if (Найден == Неопределено)
            {
                if (!(Дочерний == Неопределено))
                {
                    Найден = НайтиПоКоду(Код, Дочерний);
                }
            }
            if (Найден == Неопределено)
            {
                if (!(Соседний == Неопределено))
                {
                    Найден = НайтиПоКоду(Код, Соседний);
                }
            }

            return Найден as Структура;

        }


        public Структура ПолучитьУзел(object Код, dynamic Старший = null)
        {
            dynamic Узел = Узлы.Получить(Код) as Структура;
            if (!(Узел == Неопределено))
            {
                return Узел;
            }
            if (ТипЗнч(Код) == Тип("Структура"))
            {
                return Код as Структура;
            }
            // Если Лев(Код, 1) = "s" Тогда
            // 	Возврат Неопределено
            // КонецЕсли;
            //Стр = Данные.ПолучитьСтроку(Число(Код));
            string Стр;

            try
            {
                Стр = Данные.ПолучитьСтроку((int)Число(Код));
            }
            catch
            {
                return null;
                //ВызватьИсключение "Неверный код узла: " + Код;
            }
            var мСтр = СтрРазделить(Стр, Символы.Таб);
            string Ключ = null;
            foreach (КлючИЗначение _знСтр in мСтр)
            {
                var знСтр = _знСтр.Значение as string;
                if (Ключ == null)
                {
                    Ключ = знСтр;
                }
                else
                {
                    if (Узел == Неопределено)
                    {
                        Узел = Новый_Структура("Код, Имя, Значение, Дочерний, Соседний, Атрибут", Код, "");
                    }
                    if (Ключ == "И")
                    {
                        Ключ = "Имя";
                    }
                    else if (Ключ == "З")
                    {
                        Ключ = "Значение";
                        знСтр = СтрЗаменить(знСтр, "#x9", Символы.Таб);
                        знСтр = СтрЗаменить(знСтр, "#xA", Символы.ПС);
                        знСтр = СтрЗаменить(знСтр, "#xD", Символы.ВК);
                    }
                    else if (Ключ == "Д")
                    {
                        Ключ = "Дочерний";
                    }
                    else if (Ключ == "С")
                    {
                        Ключ = "Соседний";
                    }
                    else if (Ключ == "А")
                    {
                        Ключ = "Атрибут";
                    }
                    Узел.Вставить(Ключ, знСтр);
                    Ключ = null;
                }
            }

            if (!(Узел == Неопределено))
            {

                if (!(Старший == null))
                {
                    Узел.Вставить("Старший", Старший);
                    var Родитель = Старший;
                    var СтаршийСоседний  = Старший.Получить("Соседний");
                    if (СтаршийСоседний == Узел.Код)
                    {
                        Родитель = Старший.Родитель;
                    }
                    Узел.Вставить("Родитель", Родитель);
                    if (УзелСвойство(Родитель, "Атрибут") == Узел.Код || (Старший.Свойство("ЭтоАтрибут") == Истина && СтаршийСоседний == Узел.Код))
                    {
                        Узел.Вставить("ЭтоАтрибут", Истина);
                    }
                }

                Узлы.Вставить(Код, Узел);

                var УзелДочерний = Узел.Получить("Дочерний");
                if (!(УзелДочерний == Неопределено))
                {
                    Узел.Дочерний = ПолучитьУзел(УзелДочерний, Узел);
                }
                var УзелСоседний = Узел.Получить("Соседний");
                if (!(УзелСоседний == Неопределено) && !(Узел.Имя == "Свойства."))
                {
                    Узел.Соседний = ПолучитьУзел(УзелСоседний, Узел);
                }
                var УзелАтрибут = Узел.Получить("Атрибут");
                if (!(УзелАтрибут == Неопределено))
                {
                    Узел.Атрибут = ПолучитьУзел(УзелАтрибут, Узел);
                }

            }

            return Узел;
        } // ПолучитьУзел()

        Структура НовыйУзел(dynamic Узел, bool Служебный = false)
        {
            string НовыйКод;

            if (Служебный)
            {
                НовыйКод = "s" + сКоличество;
                сКоличество = сКоличество + 1;
            }
            else
            {
                while (КодУзла <= Количество)
                {
                    КодУзла = КодУзла + 1;
                    if (КодУзла > Количество)
                    {
                        Данные.ДобавитьСтроку("");
                        Количество = Данные.КоличествоСтрок();
                        break;
                    }
                    if (Данные.ПолучитьСтроку(КодУзла) == "")
                    {
                        break;
                    }
                }
                НовыйКод = "" + КодУзла;
            }

            var УзелИмя = Узел.Имя;
            if (!(УзелИмя == ""))
            {
                if (Прав(УзелИмя, 1) == ".")
                {
                    Узел.Вставить("д", Новый_Структура());
                    УзелИмя = Лев(УзелИмя, СтрДлина(УзелИмя) - 1);
                }
                var Родитель = УзелСвойство(Узел, "Родитель");
                if (!(Родитель == Неопределено))
                {
                    if (Узел.Родитель.Свойство("д"))
                    {
                        Узел.Родитель.д.Вставить(УзелИмя, Узел);
                    }
                }
            }

            if (!(Узел.Свойство("Дочерний")))
            {
                Узел.Вставить("Дочерний");
            }
            if (!(Узел.Свойство("Соседний")))
            {
                Узел.Вставить("Соседний");
            }
            if (!(Узел.Свойство("Атрибут")))
            {
                Узел.Вставить("Атрибут");
            }

            Узел.Вставить("Код", НовыйКод);
            Узлы.Вставить(Узел.Код, Узел);

            return Узел;
        } // НовыйУзел(СтруктураУзла)

        public Структура НовыйРодитель(dynamic Дочерний, Структура СтруктураУзла, bool Служебный = false)
        {
            СтруктураУзла.Вставить("Старший", Дочерний.Старший);
            СтруктураУзла.Вставить("Родитель", Дочерний.Родитель);
            СтруктураУзла.Вставить("Дочерний", Дочерний);
            var нУзел = НовыйУзел(СтруктураУзла, Служебный);
            var СтаршийУзел = Дочерний.Старший;
            if (СтаршийУзел.Дочерний == Дочерний)
            {
                СтаршийУзел.Дочерний = нУзел;
            }
            if (СтаршийУзел.Соседний == Дочерний)
            {
                СтаршийУзел.Соседний = нУзел;
            }
            var СоседнийУзел = Дочерний.Соседний;
            if (!(СоседнийУзел == Неопределено))
            {
                СоседнийУзел.Старший = нУзел;
                нУзел.Вставить("Соседний", СоседнийУзел);
            }
            Дочерний.Вставить("Соседний", Неопределено);
            Дочерний.Вставить("Старший", нУзел);
            Дочерний.Вставить("Родитель", нУзел);
            return нУзел;
        } // НовыйРодитель()

        public void УдалитьРодителя(dynamic Дочерний)
        {
            var РодительУзел = Дочерний.Родитель;
            var СтаршийУзел = РодительУзел.Старший;
            if (СтаршийУзел.Дочерний == РодительУзел)
            {
                СтаршийУзел.Дочерний = Дочерний;
            }
            if (СтаршийУзел.Соседний == РодительУзел)
            {
                СтаршийУзел.Соседний = Дочерний;
            }
            Дочерний.Вставить("Старший", РодительУзел.Старший);
            Дочерний.Вставить("Родитель", РодительУзел.Родитель);
            var СоседнийУзел = Дочерний;
            while (!(СоседнийУзел.Соседний == Неопределено))
            {
                СоседнийУзел = СоседнийУзел.Соседний;
            }
            var СоседнийУзелРодитель = РодительУзел.Соседний;
            if (!(СоседнийУзелРодитель == Неопределено))
            {
                СоседнийУзел.Вставить("Соседний", СоседнийУзелРодитель);
                СоседнийУзелРодитель.Старший = СоседнийУзел;
            }
            // Удалить узел
            УдалитьУзел(РодительУзел, Истина, Истина);
        } // УдалитьРодителя()

        public Структура НовоеЗначениеУзла(dynamic Узел, dynamic Значение = null, bool Служебный = false, object _Добавить = null, bool Обновить = true)
        {
            bool Добавить = (_Добавить is null) ? false : (bool)_Добавить;

            var ДочернийУзел = Узел.Дочерний;
            if (!(ДочернийУзел == Неопределено))
            {
                if (!(Добавить))
                {
                    // прежний дочерний нужно удалять
                    УдалитьУзел(ДочернийУзел, Истина, Истина);
                    ДочернийУзел = null;
                }
            }
            if (Значение == Неопределено)
            {
                return null;
            }
            if (!(ТипЗнч(Значение) == Тип("Структура") || !(Значение.Свойство("Имя"))))
            {
                Значение = ИмяЗначение(Строка(ТипЗнч(Значение)), Значение as string);
            }
            var нУзел = НовыйДочерний(Узел, Значение, Служебный, !(ДочернийУзел == Неопределено));
            if (Обновить)
            {
                ОбновитьУзел(Узел);
            }
            return нУзел;
        } // НовоеЗначениеУзла()

        public Структура НовыйДочерний(dynamic Старший, Структура СтруктураУзла, bool Служебный = false, bool ВКонец = false)
        {
            Структура зНовыйУзел;

            if (ВКонец)
            {
                var сУзел = Старший.Дочерний;
                if (!(сУзел == Неопределено))
                {
                    while (!(сУзел == Неопределено))
                    {
                        Старший = сУзел;
                        сУзел = сУзел.Соседний;
                    }
                    return НовыйСоседний(Старший, СтруктураУзла, Служебный);
                }
            }
            СтруктураУзла.Вставить("Старший", Старший);
            СтруктураУзла.Вставить("Родитель", Старший);
            var УзелСоседний = Старший.Дочерний;
            if (!(УзелСоседний == Неопределено))
            {
                СтруктураУзла.Вставить("Соседний", УзелСоседний);
            }
            if (СтруктураУзла.Свойство("Код"))
            { // существующий узел
                зНовыйУзел = СтруктураУзла;
            }
            else
            {
                зНовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
            }
            Старший.Вставить("Дочерний", зНовыйУзел);
            if (!(УзелСоседний == Неопределено))
            {
                УзелСоседний.Вставить("Старший", зНовыйУзел);
            }
            // Если УзелСостояние(Старший, "ЭтоАтрибут") = Истина Тогда
            // 	УзелСостояниеЗначение(НовыйУзел, "ЭтоАтрибут", Истина);
            // КонецЕсли;
            return зНовыйУзел;
        } // НовыйДочерний()

        public Структура НовыйСоседний(dynamic Старший, Структура СтруктураУзла, bool Служебный = false)
        {
            СтруктураУзла.Вставить("Старший", Старший);
            СтруктураУзла.Вставить("Родитель", Старший.Родитель);
            var УзелСоседний = Старший.Соседний;
            if (!(УзелСоседний == Неопределено))
            {
                СтруктураУзла.Вставить("Соседний", УзелСоседний);
            }
            var нУзел = НовыйУзел(СтруктураУзла, Служебный);
            Старший.Вставить("Соседний", нУзел);
            if (!(УзелСоседний == Неопределено))
            {
                УзелСоседний.Вставить("Старший", нУзел);
            }
            if (Старший.Свойство("ЭтоАтрибут") == Истина)
            {
                нУзел.Вставить("ЭтоАтрибут", Истина);
            }
            return нУзел;
        } // НовыйСоседний()

        Структура НовыйПоследний(dynamic Старший, Структура СтруктураУзла, bool Служебный = false)
        {
            var УзелСоседний = Старший.Соседний;
            while (!(УзелСоседний == Неопределено))
            {
                Старший = УзелСоседний;
                УзелСоседний = Старший.Соседний;
            }
            СтруктураУзла.Вставить("Старший", Старший);
            СтруктураУзла.Вставить("Родитель", Старший.Родитель);
            var нУзел = НовыйУзел(СтруктураУзла, Служебный);
            Старший.Вставить("Соседний", нУзел);
            if (Старший.Свойство("ЭтоАтрибут") == Истина)
            {
                нУзел.Вставить("ЭтоАтрибут", Истина);
            }
            return нУзел;
        } // НовыйПоследний()

        public Структура НовыйАтрибут(dynamic Старший, Структура СтруктураУзла, bool Служебный = false)
        {
            СтруктураУзла.Вставить("Старший", Старший);
            СтруктураУзла.Вставить("Родитель", Старший);
            var УзелСоседний = Старший.Атрибут;
            if (!(УзелСоседний == Неопределено))
            {
                СтруктураУзла.Вставить("Соседний", УзелСоседний);
            }
            var нУзел = НовыйУзел(СтруктураУзла, Служебный);
            Старший.Вставить("Атрибут", нУзел);
            if (!(УзелСоседний == Неопределено))
            {
                УзелСоседний.Вставить("Старший", нУзел);
            }
            нУзел.Вставить("ЭтоАтрибут", Истина);
            return нУзел;
        } // НовыйАтрибут()

        bool Служебный(dynamic Узел)
        {
            if (!(Узел == Неопределено))
            {
                if (Лев(Узел.Код, 1) == "s")
                {
                    return Истина;
                }
            }
            return Ложь;
        } // Служебный()

        public void УдалитьУзел(dynamic Узел, bool Совсем = true, bool Цепочку = false, bool НачальныйУзел = true)
        {

            var УзелСоседний = Узел.Соседний;

            if (НачальныйУзел || Цепочку)
            {
                if (Узел.Родитель.Свойство("д"))
                { // удалить из индекса
                    var УзелИмя = Узел.Имя;
                    if (!(УзелИмя == ""))
                    {
                        if (Прав(УзелИмя, 1) == ".")
                        {
                            УзелИмя = Лев(УзелИмя, СтрДлина(УзелИмя) - 1);
                        }
                        Узел.Родитель.д.Удалить(УзелИмя);
                    }
                }
                var УзелСтарший = Узел.Старший;
                if (УзелСтарший.Атрибут == Узел)
                {
                    if (УзелСоседний == Неопределено || Цепочку)
                    {
                        //УзелСтарший.Удалить("Атрибут");
                        УзелСтарший.Атрибут = null;
                    }
                    else
                    {
                        УзелСтарший.Атрибут = УзелСоседний;
                        УзелСоседний.Старший = УзелСтарший;
                    }
                }
                if (УзелСтарший.Дочерний == Узел)
                {
                    if (УзелСоседний == Неопределено || Цепочку)
                    {
                        //УзелСтарший.Удалить("Дочерний");
                        УзелСтарший.Дочерний = null;
                    }
                    else
                    {
                        УзелСтарший.Дочерний = УзелСоседний;
                        УзелСоседний.Старший = УзелСтарший;
                    }
                }
                if (УзелСтарший.Соседний == Узел)
                {
                    if (УзелСоседний == Неопределено || Цепочку)
                    {
                        //УзелСтарший.Удалить("Соседний");
                        УзелСтарший.Соседний = null;
                    }
                    else
                    {
                        УзелСтарший.Соседний = УзелСоседний;
                        УзелСоседний.Старший = УзелСтарший;
                    }
                }
            }

            // удалить связи
            foreach (КлючИЗначение элСвязь in ВсеСвязи)
            {
                var Связи = элСвязь.Значение as Соответствие;
                var уСвязи = Новый_Соответствие();
                уСвязи.Вставить(Узел);
                foreach (КлючИЗначение элУзел in Связи)
                {
                    if (элУзел.Значение == Узел)
                    {
                        уСвязи.Вставить(элУзел.Ключ);
                    }
                }
                foreach (КлючИЗначение элУзел in уСвязи)
                {
                    Связи.Удалить(элУзел.Ключ);
                }
            }
            ВсеСвязи.Удалить(Узел);

            Узлы.Удалить(Узел.Код);
            //Сообщить("Узел удален " + Узел.Код);
            var ЭтоСлужебный = Служебный(Узел);
            if (!(ЭтоСлужебный))
            {
                Данные.ЗаменитьСтроку((int)Число(Узел.Код), "");
            }

            if (Совсем || ЭтоСлужебный)
            {
                if (!(Узел.Атрибут == Неопределено))
                {
                    УдалитьУзел(Узел.Атрибут, Истина, Истина, Ложь);
                }
                if (!(Узел.Дочерний == Неопределено))
                {
                    УдалитьУзел(Узел.Дочерний, Истина, Истина, Ложь);
                }
                if (Узел.Имя == "Свойства.")
                {
                    Узел.Родитель.Удалить("Свойства");
                    Узел.Родитель.Удалить("Изменения");
                    Узел.Родитель.Удалить("Состояние");
                    Узел.Родитель.Удалить("Библиотека");
                    Узел.Родитель.Удалить("Обновить");
                    ОбъектыОбновить.Добавить(Узел.Родитель);
                }
                ОсвободитьОбъект(Узел);
            }

            if (Цепочку)
            {
                if (!(УзелСоседний == Неопределено))
                {
                    УдалитьУзел(УзелСоседний, Совсем, Истина, Ложь);
                }
            }

        } // УдалитьУзел(Узел)

        public void КопироватьУзел(dynamic Узел, Соответствие Буфер, bool ПервыйВызов = true)
        {

            Буфер.Вставить(Узел.Код, Узел);

            if (!(Узел.Атрибут == Неопределено))
            {
                КопироватьУзел(Узел.Атрибут, Буфер, Ложь);
            }

            if (!(Узел.Дочерний == Неопределено))
            {
                КопироватьУзел(Узел.Дочерний, Буфер, Ложь);
            }

            if (!(ПервыйВызов))
            {
                if (!(Узел.Соседний == Неопределено))
                {
                    КопироватьУзел(Узел.Соседний, Буфер, Ложь);
                }
            }

        } // КопироватьУзел()

        Структура НайтиСоседний(dynamic Узел, string ИмяУзла)
        {
            while (!(Узел == Неопределено))
            {
                if (Узел.Имя == ИмяУзла)
                {
                    return Узел;
                }
                Узел = Узел.Соседний;
            }
            return null;
        } // НайтиСоседний()

        public Структура НайтиАтрибут(dynamic Узел, string ИмяАтрибута, object ЗначениеАтрибута = null)
        {
            Узел = Узел.Атрибут;
            while (!(Узел == Неопределено))
            {
                if (Узел.Имя == ИмяАтрибута)
                {
                    if (ЗначениеАтрибута == Неопределено)
                    {
                        return Узел;
                    }
                    else if (ЗначениеАтрибута == УзелСвойство(Узел, "Значение"))
                    {
                        return Узел;
                    }
                }
                Узел = Узел.Соседний;
            }
            return null;
        } // НайтиАтрибут()

        public string СохранитьДанные()
        {
            ПроверитьДанные();
            foreach (КлючИЗначение элУзел in Узлы)
            {
                if (!(элУзел.Значение == Неопределено) && !(Служебный(элУзел.Значение as Структура)))
                {
                    Данные.ЗаменитьСтроку((int)элУзел.Ключ, СтруктуруВСтроку(элУзел.Значение));
                }
            }
            return Данные.ПолучитьТекст();
        } // СохранитьДанные()

        void ПрочитатьВетку(dynamic Узел)
        {
            if (!(Узел == Неопределено))
            {
                ПрочитатьВетку(ПолучитьУзел(Узел.Атрибут, Узел));
                ПрочитатьВетку(ПолучитьУзел(Узел.Дочерний, Узел));
                ПрочитатьВетку(ПолучитьУзел(Узел.Соседний, Узел));
            }
        }

        void ПроверитьДанные()
        {
            ПрочитатьВетку(Корень);
            for (int нСтр = 1; нСтр <= Данные.КоличествоСтрок(); нСтр ++) {
                if (Узлы.Получить(Строка(нСтр)) == Неопределено)
                {
                    var Стр = Данные.ПолучитьСтроку(нСтр);
                    if (!(Стр == ""))
                    {
                        Сообщить("Забытая строка " + нСтр);
                        Данные.ЗаменитьСтроку(нСтр, "");
                    }
                }
            }
        }


        // поиск узла внутри узла
        public object НайтиУзел(dynamic Узел, object ЗначениеУзла, string ИмяУзла = "", bool ПервыйВызов = true)
        {
            var Объявление = Неопределено;
            if (Узел.Имя == ИмяУзла || (ИмяУзла == "" && (Узел.Имя == "Узел" || Узел.Имя == "У" || Узел.Имя == "Объект" || Узел.Имя == "О")))
            {
                if ("" + УзелСвойство(Узел, "Значение") == ЗначениеУзла)
                {
                    return Узел;
                }
                else if (ПервыйВызов)
                {
                    if (!(Узел.Дочерний == Неопределено))
                    {
                        Объявление = НайтиУзел(Узел.Дочерний, ЗначениеУзла, ИмяУзла, Ложь);
                    }
                }
            }
            else
            {
                if (!(Узел.Дочерний == Неопределено))
                {
                    Объявление = НайтиУзел(Узел.Дочерний, ЗначениеУзла, ИмяУзла, Ложь);
                }
            }
            if (Объявление == Неопределено)
            {
                if (!(Узел.Соседний == Неопределено))
                {
                    Объявление = НайтиУзел(Узел.Соседний, ЗначениеУзла, ИмяУзла, Ложь);
                }
            }
            return Объявление;
        } // НайтиУзел()


        public void ЗагрузитьHTML(dynamic Узел, Массив СтруктураHTML, int НомерЭлемента)
        {
            while (НомерЭлемента < СтруктураHTML.Количество() - 1)
            {
                var УзелСтрока = СтруктураHTML.Получить(НомерЭлемента) as string;
                if (УзелСтрока == "_rt")
                {
                    break;
                }
                else if (УзелСтрока == "_at")
                {
                    НомерЭлемента = НомерЭлемента + 1;
                    УзелСтрока = СтруктураHTML.Получить(НомерЭлемента) as string; 
                    while (!(УзелСтрока == "_rt"))
                    {
                        dynamic стрУзла = СтрокуВСтруктуру(УзелСтрока);
                        НовыйАтрибут(Узел, ИмяЗначение(стрУзла.attrName, стрУзла.attrVal));
                        НомерЭлемента = НомерЭлемента + 1;
                        УзелСтрока = СтруктураHTML.Получить(НомерЭлемента) as string;
                    }
                    НомерЭлемента = НомерЭлемента + 1;
                    continue;
                }
                else if (УзелСтрока == "_ch")
                {
                    НомерЭлемента = НомерЭлемента + 1;
                    var дУзел = НовыйДочерний(Узел, ИмяЗначение());
                    ЗагрузитьHTML(дУзел, СтруктураHTML, НомерЭлемента);
                }
                else
                {
                    if (!(Узел.Имя == ""))
                    {
                        Узел = НовыйСоседний(Узел, ИмяЗначение());
                    }
                    dynamic стрУзла = СтрокуВСтруктуру(УзелСтрока);
                    if (стрУзла.Свойство("tagName"))
                    {
                        Узел.Вставить("Имя", стрУзла.tagName);
                    }
                    else
                    {
                        Узел.Вставить("Имя", "text");
                        Узел.Вставить("Значение", стрУзла.text);
                    }
                }
                НомерЭлемента = НомерЭлемента + 1;
            }
        } // ЗагрузитьHTML()


        object ПолучитьТекст()
        {
            return Данные.ПолучитьТекст();
        }


        public pagedata(showdata обПроцесс, string Текст = "", string знБазаДанных = "", string знИмяДанных = "", string знПозицияДанных = "") : base("pagedata")
        {
            БазаДанных = знБазаДанных;
            ИмяДанных = знИмяДанных;
            ПозицияДанных = знПозицияДанных;
            Процесс = обПроцесс;

            Данные = Новый_ТекстовыйДокумент();
            Узлы = Новый_Соответствие();
            if (!(Текст == ""))
            {
                Данные.УстановитьТекст(Текст);
                var Стр1 = Данные.ПолучитьСтроку(1);
                if (КодСимвола(Лев(Стр1, 1)) == 65279)
                { // BOM
                    Данные.ЗаменитьСтроку(1, Сред(Стр1, 2));
                }
            }

            Количество = Данные.КоличествоСтрок();
            сКоличество = 0;
            КодУзла = 0;
            //К = 0;

            Представление = "";
            if (Количество == 0)
            {
                Корень = НовыйУзел(ИмяЗначение("О", "Корень"));
            }
            else
            {
                Корень = ПолучитьУзел("1");
            }
            Корень.Вставить("Родитель", Неопределено);
            Корень.Вставить("Старший", Неопределено);
            Корень.Вставить("ИмяДанных", ИмяДанных);

            _Рефлектор = Новый_Рефлектор();
            Пустой = НовыйУзел(Новый_Структура("Имя, Родитель", "Пустой", Неопределено), Истина);
            НетЗначения = Новый_Структура();
            //УзлыОбновить = Новый_Соответствие();
            ОбъектыОбновить = Новый_Массив();
            ВсеСвязи = Новый_Соответствие();
            Версии = Новый_Соответствие();
            Изменены = Ложь;

        }


    }
}
