// MIT License
// Copyright (c) 2020 vasvl123
// https://github.com/vasvl123/useyourmind
//
// Включает программный код https://github.com/tsukanov-as/kojura

using System;
using ScriptEngine.HostedScript.Library;

namespace showdata.lib
{
    class Операторы : functions
    {

        public Операторы() : base("Операторы") { }

        public object Оператор_ЕстьЗначение(pagedata Данные, Структура Аргумент)
        {
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Значение = Данные.Интерпретировать(Аргумент, Неопределено, Ложь);
            return (!("" + Значение == ""));
        } // ЕстьЗначение()

        public object Оператор_Пустой(pagedata Данные, Структура Аргумент)
        {
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var _Аргумент = Данные.Интерпретировать(Аргумент, Неопределено, Ложь);
            return (_Аргумент == Данные.Пустой);
        } // Пустой()

        public object Оператор_Сумма(pagedata Данные, dynamic Аргумент)
        {
            object Значение;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение = Данные.Интерпретировать(Аргумент);
            Аргумент = Аргумент.Соседний;
            while (Аргумент != Неопределено)
            {
                Значение = Значение + Данные.Интерпретировать(Аргумент);
                Аргумент = Аргумент.Соседний;
            }
            return Значение;
        } // Сумма()

        public object Оператор_Разность(pagedata Данные, dynamic Аргумент)
        {
            object Значение;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение = Данные.Интерпретировать(Аргумент);
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                return -(int)Число(Значение);
            }
            while (Аргумент != Неопределено)
            {
                Значение = Значение - Данные.Интерпретировать(Аргумент);
                Аргумент = Аргумент.Соседний;
            }
            return Значение;
        } // Разность()

        public object Оператор_Произведение(pagedata Данные, dynamic Аргумент)
        {
            object Значение;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение = Данные.Интерпретировать(Аргумент);
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            while (Аргумент != Неопределено)
            {
                Значение = Значение * Данные.Интерпретировать(Аргумент);
                Аргумент = Аргумент.Соседний;
            }
            return Значение;
        } // Произведение()

        public object Оператор_Частное(pagedata Данные, dynamic Аргумент)
        {
            object Значение;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение = Данные.Интерпретировать(Аргумент);
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            while (Аргумент != Неопределено)
            {
                Значение = Значение / Данные.Интерпретировать(Аргумент);
                Аргумент = Аргумент.Соседний;
            }
            return Значение;
        } // Частное()

        public object Оператор_Остаток(pagedata Данные, dynamic Аргумент)
        {
            object Значение;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение = Данные.Интерпретировать(Аргумент);
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            while (Аргумент != Неопределено)
            {
                Значение = Значение % Данные.Интерпретировать(Аргумент);
                Аргумент = Аргумент.Соседний;
            }
            return Значение;
        } // Остаток()

        public object Оператор_Если(pagedata Данные, dynamic Узел)
        {
            var СписокЕсли = Узел;
            var СписокТогда = СписокЕсли.Соседний;
            var СписокИначе = СписокТогда.Соседний;
            var зЕсли = Данные.Интерпретировать(СписокЕсли);
            if (ТипЗнч(зЕсли) == Тип("Строка"))
            {
                зЕсли = (зЕсли == "Истина" || зЕсли == "Да");
            }
            if (зЕсли == Истина)
            {
                return Данные.Интерпретировать(СписокТогда);
            }
            else if (!(СписокИначе == Неопределено))
            {
                return Данные.Интерпретировать(СписокИначе);
            }
            else
            {
                return Неопределено;
            }
        } // ЗначениеВыраженияЕсли()

        public object Оператор_Выбор(pagedata Данные, dynamic Список)
        {
            dynamic СписокТогда;
            var СписокКогда = Список;
            if (СписокКогда == Неопределено)
            {
                ВызватьИсключение("Ожидается условие");
            }
            while (СписокКогда != Неопределено)
            {
                СписокТогда = СписокКогда.Соседний;
                if (СписокТогда == Неопределено)
                {
                    ВызватьИсключение("Ожидается выражение");
                }
                if (Данные.Интерпретировать(СписокКогда) as bool? == Истина)
                {
                    return Данные.Интерпретировать(СписокТогда);
                }
                СписокКогда = СписокТогда.Соседний;
            }
            ВызватьИсключение("Ни одно из условий не сработало!");
            return null;
        } // ЗначениеВыраженияВыбор()

        public object Оператор_Равно(pagedata Данные, dynamic Аргумент)
        {
            object Значение;
            bool Результат = false;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение = Данные.Интерпретировать(Аргумент);
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Результат = Истина;
            while (Аргумент != Неопределено && Результат)
            {
                Результат = Результат && Значение == Данные.Интерпретировать(Аргумент);
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // Равно()

        public object Оператор_Больше(pagedata Данные, dynamic Аргумент)
        {
            int Значение1, Значение2;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение1 = Число(Данные.Интерпретировать(Аргумент));
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Результат = Истина;
            while (Аргумент != Неопределено && Результат)
            {
                Значение2 = Число(Данные.Интерпретировать(Аргумент));
                Результат = Результат && Значение1 > Значение2;
                Значение1 = Значение2;
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // Больше()

        public object Оператор_Меньше(pagedata Данные, dynamic Аргумент)
        {
            int Значение1, Значение2;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение1 = Число(Данные.Интерпретировать(Аргумент));
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Результат = Истина;
            while (Аргумент != Неопределено && Результат)
            {
                Значение2 = Число(Данные.Интерпретировать(Аргумент));
                Результат = Результат && Значение1 < Значение2;
                Значение1 = Значение2;
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // Меньше()

        public object Оператор_БольшеИлиРавно(pagedata Данные, dynamic Аргумент)
        {
            int Значение1, Значение2;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение1 = Число(Данные.Интерпретировать(Аргумент));
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Результат = Истина;
            while (Аргумент != Неопределено && Результат)
            {
                Значение2 = Число(Данные.Интерпретировать(Аргумент));
                Результат = Результат && Значение1 >= Значение2;
                Значение1 = Значение2;
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // БольшеИлиРавно()

        public object Оператор_МеньшеИлиРавно(pagedata Данные, dynamic Аргумент)
        {
            int Значение1, Значение2;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение1 = (int)Число(Данные.Интерпретировать(Аргумент));
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Результат = Истина;
            while (Аргумент != Неопределено && Результат)
            {
                Значение2 = (int)Число(Данные.Интерпретировать(Аргумент));
                Результат = Результат && Значение1 <= Значение2;
                Значение1 = Значение2;
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // МеньшеИлиРавно()

        public object Оператор_НеРавно(pagedata Данные, dynamic Аргумент)
        {
            Перем Значение1, Значение2;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            Значение1 = Новый(Данные.Интерпретировать(Аргумент));
            Аргумент = Аргумент.Соседний;
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Результат = Истина;
            while (Аргумент != Неопределено && Результат)
            {
                Значение2 = Новый(Данные.Интерпретировать(Аргумент));
                Результат = Результат && Значение1 != Значение2;
                Значение1 = Значение2;
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // НеРавно()

        public object Оператор_И(pagedata Данные, dynamic Аргумент)
        {
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Результат = Истина;
            while (Аргумент != Неопределено && Результат)
            {
                var Значение = Данные.Интерпретировать(Аргумент);
                if (ТипЗнч(Значение) == Тип("Строка"))
                {
                    Значение = (Значение == "Истина" || Значение == "Да");
                }
                Результат = Результат && Значение;
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // ЛогическоеИ()

        public object Оператор_Или(pagedata Данные, dynamic Аргумент)
        {
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Результат = Ложь;
            while (Аргумент != Неопределено && !(Результат))
            {
                var Значение = Данные.Интерпретировать(Аргумент);
                if (ТипЗнч(Значение) == Тип("Строка"))
                {
                    Значение = (Значение == "Истина" || Значение == "Да");
                }
                Результат = Результат || Значение;
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // ЛогическоеИли()

        public object Оператор_Не(pagedata Данные, dynamic Аргумент)
        {
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Результат = Истина;
            while (Аргумент != Неопределено && Результат)
            {
                var Значение = Данные.Интерпретировать(Аргумент);
                if (ТипЗнч(Значение) == Тип("Строка"))
                {
                    Значение = (Значение == "Истина" || Значение == "Да");
                }
                Результат = Результат && !(Значение);
                Аргумент = Аргумент.Соседний;
            }
            return Результат;
        } // ЛогическоеНе()

        public object Оператор_ВывестиСообщение(pagedata Данные, dynamic Аргумент)
        {
            if (Аргумент == Неопределено)
            {
                ВызватьИсключение("Ожидается аргумент");
            }
            var Значения = Новый_Массив();
            while (Аргумент != Неопределено)
            {
                Значения.Добавить(Данные.Интерпретировать(Аргумент));
                Аргумент = Аргумент.Соседний;
            }
            Данные.Процесс.ЗаписатьСобытие("Интерпретатор", СтрСоединить(Значения, " "), 1);
            return Неопределено;
        } // ВывестиСообщение

        public object Оператор_ВСтуктуру(pagedata Данные, dynamic Аргумент, Структура Результат = null)
        {
            Перем Ключ = null;
            object Значение;
            if (!(Аргумент == Неопределено))
            {
                if (Аргумент.Имя == "Ключ" || Аргумент.Имя == "К")
                {
                    if (Результат == Неопределено)
                    {
                        Результат = Новый_Структура();
                    }
                    Аргумент.Свойство("Значение", Ключ);
                    if (!(Ключ == Неопределено))
                    {
                        var Дочерний = Аргумент.Дочерний;
                        if (!(Дочерний == Неопределено))
                        {
                            Значение = Оператор_ВСтуктуру(Данные, Дочерний);
                        }
                        else
                        {
                            Значение = "";
                        }
                        Результат.Вставить(Ключ, Значение);
                    }
                    var Соседний = Аргумент.Соседний;
                    if (!(Соседний == Неопределено))
                    {
                        Результат = Оператор_ВСтуктуру(Данные, Соседний, Результат);
                    }
                }
                else
                {
                    return Данные.Интерпретировать(Аргумент);
                }
            }
            return Результат;
        }

        public object Оператор_Субъект(pagedata Данные, Структура Аргумент)
        {
            return Данные.Процесс.Субъект;
        }

        public object Оператор_ТипСобытия(pagedata Данные, Структура Аргумент)
        {
            return  (Аргумент == "0") ? "Общее" :  (Аргумент == "1") ? "Успех" : (Аргумент == "2") ? "Внимание" : "Ошибка";
        } // ТипСобытия()


    }
}
