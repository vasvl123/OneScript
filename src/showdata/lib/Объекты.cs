// MIT License
// Copyright (c) 2020 vasvl123
// https://github.com/vasvl123/useyourmind


object УзелСвойство(Узел, Свойство)
{
    УзелСвойство = Неопределено;
    if (!(Узел == Неопределено))
    {
        Узел.Свойство(Свойство, УзелСвойство);
    }
    return УзелСвойство;
} // УзелСвойство(Узел)


object ИмяЗначение(Имя, Значение = "")
{
    return Новый Структура("Имя, Значение", Имя, Значение);
}


object НоваяФорма(Имя)
{
    return "
" "Форма.
" " name: '" + Имя + "'
" " form: 'box'
" " role: 'thing'
" " movable: true
" " color: 0x555555
" " transparent: true
" " opacity: 0.3
" " position_x: 0
" " position_y: 0
" " position_z: 0
" " scale_x: 2
" " scale_y: 2
" " scale_z: 2
" "";
} // НоваяФорма()


object Субъект_Свойства(Данные, оУзел)
{
    return "
" "События
" "" + НоваяФорма("Субъект") + "
" " camera_x: 0
" " camera_y: 50
" " camera_z: 100
" " role: 'player'
" "";
}


object Предмет_Свойства(Данные, оУзел)
{
    return "
" "События
" "" + НоваяФорма("Предмет");
}


object Комната_Свойства(Данные, оУзел)
{
    return "
" "События
" "" + НоваяФорма("Комната") + "
" " role: 'room'
" " movable: false
" "";
}


object Кнопка_Свойства(Данные, оУзел)
{
    return "
" "События
" "Текст
" "Вид
" " button  class= btn btn - primary   onclick = addcmd(this); return false  type = button
" "     Значение: Текст
" "";
}


object Надпись_Свойства(Данные, оУзел)
{
    return "
" "События
" "Текст
" "Вид
" "";
}


object Задача_Свойства(Данные, оУзел)
{
    return "
" "События
" "Условие
" "Параметры.
" "Вид
" "";
}

object Задача_Модель(Данные, Свойства, Изменения)
{
    Условие = Данные.ЗначениеСвойства(Свойства.д.Условие);
    if (!(Изменения.Получить(Свойства.Родитель) == Истина))
    {
        if (Изменения.Получить(Свойства.д.Условие) == Истина)
        {
            if (Условие)
            {
                Параметры = Новый Структура;
                foreach (элПар in Свойства.д.Параметры.д)
                {
                    Параметры.Вставить(элПар.Ключ, Данные.ЗначениеСвойства(элПар.Значение));
                }
                Данные.Процесс.НоваяЗадача(Параметры, "Служебный");
            }
        }
    }
}


// Выполнить
object Выполнить_Свойства(Данные, оУзел)
{
    return "
" "События
" "Условие
" "Тогда
" "Иначе
" "Результат
" "";
}

object Выполнить_Модель(Данные, Свойства, Изменения)
{
    Инициализация = (Изменения.Получить(Свойства.Родитель) == Истина);
    if (Инициализация || Изменения.Получить(Свойства.д.Условие) == Истина)
    {
        Условие = Данные.ЗначениеСвойства(Свойства.д.Условие);
        if (Условие)
        {
            Результат = Данные.ЗначениеСвойства(Свойства.д.Тогда);
        }
        else
        {
            Результат = Данные.ЗначениеСвойства(Свойства.д.Иначе);
        }
        Данные.НовоеЗначениеУзла(Свойства.д.Результат, ИмяЗначение("" + ТипЗнч(Результат), Результат), Истина);
        Изменения.Вставить(Свойства.д.Результат, Истина);
    }

}


// Источник данных
object ИсточникДанных_Свойства(Данные, оУзел)
{
    return "
" "События
" "ЗапросДанных.
" " БазаДанных
" " УсловияОтбора
" " Обновление: Авто
" " ЧислоЗаписей: 10
" " СписокПолей.
" " Команда: НайтиЗаголовок
" " Задача
" "Результат
" "Записи.
" "";
}

object ИсточникДанных_Модель(Данные, Свойства, Изменения)
{
    Инициализация = (Изменения.Получить(Свойства.Родитель) == Истина);
    НовыйЗапрос = Инициализация || (Изменения.Получить(Свойства.д.ЗапросДанных.д.БазаДанных) == Истина);
    НовыйЗапрос = НовыйЗапрос || (Изменения.Получить(Свойства.д.ЗапросДанных) == Истина);

    if (Инициализация)
    {
        Данные.НовыйДочерний(Свойства.д.ЗапросДанных, ИмяЗначение("Направление"), Истина, Истина);
        Данные.НовыйДочерний(Свойства.д.ЗапросДанных, ИмяЗначение("НачальнаяПозиция"), Истина, Истина);
        Данные.НовыйДочерний(Свойства.д.ЗапросДанных, ИмяЗначение("КонечнаяПозиция"), Истина, Истина);
    }

    if (НовыйЗапрос)
    {
        БазаДанных = Данные.ЗначениеСвойства(Свойства.д.ЗапросДанных.д.БазаДанных);
        сЗадача = Данные.ЗначениеСвойства(Свойства.д.ЗапросДанных.д.Задача);
        if (!(сЗадача == ""))
        {
            // завершить задачу
            Параметры = Новый Структура("сЗадача, cmd", сЗадача, "ЗавершитьЗадачу");
            Данные.Процесс.НоваяЗадача(Параметры, "Служебный");
        }
        //Если БазаДанныхИзменена Тогда // очистить записи
        кУзел = Свойства.д.Записи.Дочерний;
        while (!(кУзел == Неопределено))
        {
            кУзел.Значение = Данные.Пустой;
            Изменения.Вставить(кУзел, Истина);
            кУзел = кУзел.Соседний;
        }
        //КонецЕсли;
        Запрос = Новый Структура("Данные, Свойства, ЗапросДанных, cmd", Данные, Свойства, Данные.СвойстваВСтуктуру(Свойства.д.ЗапросДанных), "ЗапросДанных");
        ИдЗадачи = Данные.Процесс.НоваяЗадача(Запрос, "Служебный").ИдЗадачи;
        Данные.НовоеЗначениеУзла(Свойства.д.ЗапросДанных.д.Задача, ИмяЗначение("Строка", ИдЗадачи), Истина);
        //Изменения.Вставить(Свойства.д.ЗапросДанных.д.Задача, Истина);
    }

    if (Изменения.Получить(Свойства.д.Результат) == Истина)
    {
        дУзел = Свойства.д.Результат.Дочерний;
        while (!(дУзел == Неопределено))
        {
            ЗапросДанные = дУзел.Значение;
            ИмяЗаписи = "з" + ЗапросДанные.Позиция;
            Запись = УзелСвойство(Свойства.д.Записи.д, ИмяЗаписи);
            if (!(Запись == Неопределено))
            {
                Запись.Значение = ЗапросДанные.Заголовок;
                Изменения.Вставить(Запись, Истина);
            }
            else
            {
                Запись = Новый Структура("Имя, Значение", "з" + ЗапросДанные.Позиция, ЗапросДанные.Заголовок);
                кУзел = Данные.НовыйДочерний(Свойства.д.Записи, Запись, Истина, Истина);
            }
            дУзел = дУзел.Соседний;
        }
        // удалить результаты
        дУзел = Свойства.д.Результат.Дочерний;
        if (!(дУзел == Неопределено))
        {
            Данные.УдалитьУзел(дУзел, Неопределено, Истина);
        }
        Изменения.Вставить(Свойства.д.Записи, Истина);
    }

}

object ПанельДанных_Кнопка(Начало, Позиция)
{
    return "
" " * button  class= btn btn - light btn - sm  А = ПриНажатии    type = button role = pos    pos = " + Позиция + "
" " Строка: " + Начало;
} ///

 // Панель данных
object ПанельДанных_Свойства(Данные, оУзел)
{
    return "
" "События
" "ИсточникДанных
" "Количество: 10
" "Направление: Назад
" " * Начало
" " * кПозиция
" " * Страницы.
" " * Вид
" " div
" "     div class= btn - group
" "         button class= btn btn - light btn - sm  А = ПриНажатии    type = button role = bck
" "             Строка: +
" "         З: Страницы
" "         button class= btn btn - light btn - sm  А = ПриНажатии    type = button role = pos    pos =
          " "             Строка: 0
" "";
}

object ПанельДанных_Модель(Данные, Свойства, Изменения)
{

    ИсточникДанных = Данные.ЗначениеСвойства(Свойства.д.ИсточникДанных);
    Инициализация = (Изменения.Получить(Свойства.Родитель) == Истина);

    // Конструктор
    if (Инициализация)
    {
        ИсточникДанных.Свойства.д.ЗапросДанных.д.ЧислоЗаписей.Значение = Свойства.д.Количество.Значение;
        //ИсточникДанных.Свойства.д.ЗапросДанных.д.Направление.Значение = Свойства.д.Направление.Значение;
    }

    if (Изменения.Получить(Свойства.д.События) == Истина)
    {
        дУзел = Свойства.д.События.Дочерний;
        if (!(дУзел == Неопределено))
        {
            мСобытие = СтрРазделить(дУзел.Значение, Символы.Таб);
            Узел = Данные.ПолучитьУзел(мСобытие[1]);
            if (!(Узел == Неопределено))
            {
                кПозиция = Свойства.д.кПозиция.Значение;
                икПозиция = ИсточникДанных.Свойства.д.ЗапросДанных.д.КонечнаяПозиция.Значение;
                if (кПозиция == "" || Число(икПозиция) < Число(кПозиция))
                {
                    кПозиция = икПозиция;
                }
                Роль = "" + Данные.НайтиАтрибут(Узел, "role").Значение;
                if (Роль == "pos")
                {
                    Позиция = "" + Данные.НайтиАтрибут(Узел, "pos").Значение;
                    ИсточникДанных.Свойства.д.ЗапросДанных.д.НачальнаяПозиция.Значение = Позиция;
                }
                else
                {
                    Количество = Число(Свойства.д.Количество.Значение);
                    Начало = Свойства.д.Начало.Значение;
                    if (Начало == "")
                    {
                        Начало = Количество;
                    }
                    else
                    {
                        Начало = Число(Начало);
                    }
                    Данные.СоздатьСвойства(Свойства.д.Страницы, ПанельДанных_Кнопка(Начало, кПозиция), Истина, Ложь);
                    if (Роль == "bck")
                    {
                        ИсточникДанных.Свойства.д.ЗапросДанных.д.НачальнаяПозиция.Значение = кПозиция;
                        Начало = Начало + Количество;
                        Свойства.д.Начало.Значение = "" + Начало;
                    }
                }
                Свойства.д.кПозиция.Значение = кПозиция;
            }
            ИсточникДанных.Изменения.Вставить(ИсточникДанных.Свойства.д.ЗапросДанных, Истина);
            Данные.ОбъектыОбновить.Добавить(ИсточникДанных);
        }
        Данные.УдалитьУзел(дУзел, Неопределено, Истина);
        Изменения.Вставить(Свойства.д.События, Истина);
    }
}

// Таблица
object Таблица_Свойства(Данные, оУзел)
{
    return "
" "События
" "СвойстваСтроки.
" "СписокПолей.
" "ИсточникСтрок
" "Вид
" "";
}

object Таблица_Модель(Данные, Свойства, Изменения)
{

    Инициализация = (Изменения.Получить(Свойства.Родитель) == Истина);
    ИсточникСтрокИзменен = (Изменения.Получить(Свойства.д.ИсточникСтрок) == Истина);

    УзелЗаголовок = Свойства.Соседний;

    // Конструктор
    if (Инициализация)
    {
        if (УзелЗаголовок == Неопределено)
        { // создать заголовок
            УзелЗаголовок = Данные.НовыйСоседний(Свойства, ИмяЗначение("thread", ""), Истина);
            Узел = Данные.НовыйДочерний(УзелЗаголовок, ИмяЗначение("tr", ""), Истина);
            foreach (элПоле in Свойства.д.СписокПолей.д)
            {
                Поле = элПоле.Значение;
                стрУзел = ИмяЗначение("th", Данные.ЗначениеСвойства(Поле.д.Заголовок));
                Данные.НовыйДочерний(Узел, стрУзел, Истина, Истина);
            }
        }
    }

    ИсточникСтрок = Данные.ЗначениеСвойства(Свойства.д.ИсточникСтрок);

    if (ИсточникСтрокИзменен)
    {
        Строки = Новый Соответствие;
        УзелСтроки = Свойства;
        УзелЗаголовок = УзелСтроки.Соседний;
        while (!(УзелЗаголовок == Неопределено))
        {
            УзелСтроки = УзелЗаголовок;
            Строки.Вставить(УзелСтроки.Значение, "");
            УзелЗаголовок = УзелЗаголовок.Соседний;
        }
        // добавить строки
        if (!(ИсточникСтрок == Неопределено))
        {
            ИсточникСтрок = ИсточникСтрок.Дочерний;
            while (!(ИсточникСтрок == Неопределено))
            {
                ИмяСтроки = "СтрокаТаблицы " + ИсточникСтрок.Имя;
                оСтрока = Строки.Получить(ИмяСтроки);
                if (оСтрока == Неопределено)
                {
                    УзелСтроки = Данные.НовыйСоседний(УзелСтроки, ИмяЗначение("О", ИмяСтроки), Истина);
                    СвойстваСтроки = Данные.ОбработатьОбъект(УзелСтроки, Истина);
                    // дополнительные свойства
                    if (Свойства.д.Свойство("СвойстваСтроки"))
                    {
                        Узел = СвойстваСтроки.Дочерний;
                        while (!(Узел == Неопределено))
                        {
                            стСвойстваСтроки = Узел;
                            Узел = Узел.Соседний;
                        }
                        foreach (элСвойство in Свойства.д.СвойстваСтроки.д)
                        {
                            свУзел = Данные.КопироватьВетку(элСвойство.Значение, Неопределено, стСвойстваСтроки, СвойстваСтроки);
                            стСвойстваСтроки = Данные.НовыйСоседний(стСвойстваСтроки, свУзел, Истина);
                        }
                    }
                    Данные.НовоеЗначениеУзла(СвойстваСтроки.д.Источник, ИмяЗначение("С", "у " + ИсточникСтрок.Код), Истина);
                    сУзел = Данные.НовыйДочерний(Свойства.д.Вид.Дочерний, ИмяЗначение("tr", ""), Истина, Истина);
                    Данные.НовыйДочерний(сУзел, ИмяЗначение("З", "у " + СвойстваСтроки.д.Поля.Код), Истина, Истина);
                }
                ИсточникСтрок = ИсточникСтрок.Соседний;
            }
        }
    }

}


// СтрокаТаблицы
object СтрокаТаблицы_Свойства(Данные, оУзел)
{
    return "
" "События
" "Источник
" "Поля
" "";
}

object СтрокаТаблицы_Модель(Данные, Свойства, Изменения)
{

    Инициализация = (Изменения.Получить(Свойства.Родитель) == Истина);
    ИсточникИзменен = (Изменения.Получить(Свойства.д.Источник) == Истина);

    if (ИсточникИзменен)
    {
        // удалить прежние поля
        сУзел = Свойства.д.Поля.Дочерний;
        if (!(сУзел == Неопределено))
        {
            Данные.УдалитьУзел(сУзел, Неопределено, Истина);
        }
    }

    // Конструктор
    if (Инициализация || ИсточникИзменен)
    {
        оУзел = Свойства.Родитель;
        Источник = Данные.ЗначениеСвойства(Свойства.д.Источник); // получить узел по ссылке
        if (!(Источник.Значение == Данные.Пустой))
        {
            Узел = Свойства.д.Поля;
            foreach (элПоле in оУзел.Родитель.Свойства.д.СписокПолей.д)
            {
                свПоле = элПоле.Значение;
                Шаблон = УзелСвойство(свПоле.д, "Шаблон");
                if (!(Шаблон == Неопределено))
                {
                    стрУзел = Данные.КопироватьВетку(Шаблон.Дочерний, Неопределено, Узел, Свойства.д.Поля);
                }
                else
                {
                    Поле = элПоле.Ключ;
                    ПолеЗначение = УзелСвойство(Источник.Значение, Поле);
                    стрУзел = ИмяЗначение("td", ПолеЗначение);
                }
                Узел = Данные.НовыйДочерний(Свойства.д.Поля, стрУзел, Истина, Истина);
            }
        }
        Данные.ОбъектыОбновитьДобавить(оУзел.Родитель); // обновить таблицу
    }

}


object Загрузить_Свойства(Данные, оУзел)
{
    return "
" "События
" "Файл
" "Сохранен
" "";
}

object Загрузить_Модель(Данные, Свойства, Изменения)
{

    if (Изменения.Получить(Свойства.д.События) == Истина)
    {

        дУзел = Свойства.д.События.Дочерний;
        if (!(дУзел == Неопределено))
        {
            мСобытие = СтрРазделить(дУзел.Значение, Символы.Таб);
            if (мСобытие[0] == "ПриОтправке")
            {
                if (дУзел.Параметры.Свойство("filename"))
                {
                    расш = СтрРазделить(дУзел.Параметры.filename, ".");
                    Свойства.д.Файл.Значение = "" + ТекущаяУниверсальнаяДатаВМиллисекундах() + "." + расш[расш.Количество() - 1];
                    Данные.Процесс.ПередатьДанныеД(Новый Структура("ИстДанных, БазаДанных, Заголовок, Команда, дДанные, неОбратныйЗапрос", Данные.Процесс.Субъект, "inbox", Новый Структура("ИмяДанных, ТипДанных", Свойства.д.Файл.Значение, 2), "ЗаписатьДанные", дУзел.Параметры.fl, Неопределено));
                }
                Изменения.Вставить(Свойства.д.Файл, Истина);
            }
            Данные.УдалитьУзел(дУзел);
        }

    }
}
