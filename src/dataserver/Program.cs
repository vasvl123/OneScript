// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/

using System;
using ScriptEngine;
using ScriptEngine.HostedScript;
using ScriptEngine.HostedScript.Library;

namespace dataserver
{

    public class ApplicationHost : IHostApplication
    {
        public string[] CommandLineArguments { get; set; } = new string[0];

        public void Echo(string text, MessageStatusEnum status = MessageStatusEnum.Ordinary)
        {
            ConsoleHostImpl.Echo(text, status);
        }

        public void ShowExceptionInfo(Exception exc)
        {
            ConsoleHostImpl.ShowExceptionInfo(exc);
        }

        public bool InputString(out string result, int maxLen)
        {
            return ConsoleHostImpl.InputString(out result, maxLen);
        }

        public string[] GetCommandLineArguments()
        {
            return CommandLineArguments;
        }
    }

    class dataserver : functions
    {
        string Хост;
        int Порт;
        bool ОстановитьСервер;
        bool ПерезапуститьСервер;
        //Перем Ресурсы;
        string Загрузка;
        Соответствие ВсеДанные;
        dbaccess Профили;
        string Соль;
        Соответствие Контроллеры;
        DateTime ОбновитьСписокФайлов;
        DateTime ОбновитьСписокБаз;
        Соответствие Задачи;
        Массив мЗадачи;
        int АктивныеЗадачи;
        Массив Соединения;

        public dataserver(string _ИмяМодуля) : base(_ИмяМодуля)
        {
        }

  
        Перем УзелСвойство(Структура Узел, string Свойство)
        {
            Перем УзелСвойство = null;
            if (!(Узел == Неопределено))
            {
                Узел.Свойство(Свойство, ref УзелСвойство);
            }
            return УзелСвойство;
        }


        string УдаленныйУзелАдрес(string УдаленныйУзел)
        {
            return Лев(УдаленныйУзел, Найти(УдаленныйУзел, ":") - 1);
        }


        Структура НовоеУсловиеОтбора(dynamic ЗапросДанных, string КлючИмя, string Сравнение, string КлючЗначение)
        {
            if (ЗапросДанных == Неопределено)
            {
                ЗапросДанных = Новый_Структура("УсловияОтбора", Новый_Структура());
            }
            ЗапросДанных.УсловияОтбора.Вставить(КлючИмя, Новый_Структура("Сравнение, Значение", Сравнение, КлючЗначение));
            return ЗапросДанных;
        }


        // расшифровывает данные по ключу
        object Расшифровать(string Шифр, string КлючШифрования)
        {
            var бШифр = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзBase64Строки(Шифр));
            var бКлючШифрования = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзBase64Строки(КлючШифрования));
            var ЗакодированныеДанные = Новый_БуферДвоичныхДанных(32);
            for (int Счетчик = 0; Счетчик < 32; Счетчик++) {
                var ЗначениеКлюча = бКлючШифрования.Получить(Счетчик);
                var ЗакодированноеЗначение = бШифр.Получить(Счетчик);
                var ЗначениеИсходныхДанных = ЗакодированноеЗначение - ЗначениеКлюча;
                if (ЗначениеИсходныхДанных < 0)
                {
                    ЗначениеИсходныхДанных = ЗначениеИсходныхДанных + 256;
                }
                ЗакодированныеДанные.Установить(Счетчик, ЗначениеИсходныхДанных);
            }
            return ПолучитьBase64СтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ЗакодированныеДанные));
        }


        bool ПроверкаАвторизации(dynamic Параметры)
        {
            dynamic Профиль = Новый_Структура();
            var ПрошелАвторизацию = Ложь;
            var СтатусСубъекта = "Гость";
            Перем Имя = null;
            var Результат = Новый_Структура();
            if (Параметры.Свойство("unm", ref Имя))
            {
                СтатусСубъекта = "Не авторизован";
                if (!(Имя == ""))
                {
                    //Профиль = Профили.НайтиКлюч("Имя" + Символы.Таб + Имя + Символы.Таб);
                    dynamic ЗапросДанных = НовоеУсловиеОтбора(Неопределено, "Имя", "Равно", Строка(Имя));
                    ЗапросДанных = НовоеУсловиеОтбора(ЗапросДанных, "ТолькоОдин", "Равно", "Истина");
                    СтатусСубъекта = "Неизвестный субъект";
                    if (!(Профили.НайтиЗаголовок(ЗапросДанных) == "ОшибкаПотокаДанных"))
                    {
                        if (ЗапросДанных.ЗаголовокНайден)
                        {
                            Профиль = ЗапросДанных.Заголовок;
                            СтатусСубъекта = "Неверный пароль";
                            if (!("" + Профиль.Пароль == ""))
                            {
                                var Хэш = Новый_ХешированиеДанных(ХешФункция.SHA256);
                                Хэш.Добавить(Параметры.procid + Параметры.uid + Профиль.Пароль);
                                if (ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма) == Параметры.pwd)
                                {
                                    СтатусСубъекта = "Прошел авторизацию";
                                    ПрошелАвторизацию = Истина;
                                }
                            }
                        }
                    }
                }
            }
            Параметры.Вставить("ПрошелАвторизацию", ПрошелАвторизацию);
            Параметры.Вставить("СтатусСубъекта", СтатусСубъекта);
            Параметры.Вставить("Профиль", Профиль);
            Сообщить(СтатусСубъекта);
            return ПрошелАвторизацию;
        } // ПроверкаАвторизации()


        bool ВыполнитьРегистрацию(dynamic Параметры)
        {
            string Имя = null;
            string Почта = null;
            dynamic Профиль = Новый_Структура();
            string Пароль = null;
            var  ПрошелАвторизацию = Ложь;
            var ТекстСообщение = "Введите свое имя";
            var ТекстСтатус = "Внимание";
            Параметры.Вставить("Этап", "");
            Параметры.Вставить("key", "");
            if (Параметры.Свойство("unm", ref Имя))
            {
                if (!(Имя == "" && !(Имя == "sys")))
                {
                    //Профиль = Профили.НайтиКлюч("Имя" + Символы.Таб + Имя + Символы.Таб);
                    dynamic ЗапросДанных = НовоеУсловиеОтбора(Неопределено, "Имя", "Равно", Имя);
                    ЗапросДанных = НовоеУсловиеОтбора(ЗапросДанных, "ТолькоОдин", "Равно", "Истина");
                    if (!(Профили.НайтиЗаголовок(ЗапросДанных) == "ОшибкаПотокаДанных"))
                    {
                        if (!(ЗапросДанных.ЗаголовокНайден))
                        {
                            Сообщить("Профиль не найден");
                            Профиль = Новый_Структура("Имя, Пароль, Почта, Ключ, Дата, УдаленныйУзел", Имя, "", "", "", ТекущаяДата(), Параметры.УдаленныйУзел);
                        }
                        else
                        {
                            Профиль = ЗапросДанных.Заголовок;
                        }
                        if (!(Профиль.Пароль == ""))
                        {
                            ТекстСообщение = "Такое имя уже существует";
                        }
                        else
                        {
                            ТекстСообщение = "Укажите свой почтовый ящик";
                            if (Параметры.Свойство("mail", ref Почта))
                            {
                                if (!(Почта == ""))
                                {
                                    ТекстСообщение = "Введите пароль два раза";
                                    Параметры.Вставить("Этап", "Подтверждение");
                                    Профиль.Почта = Почта;
                                    if (Профиль.Ключ == "")
                                    {
                                        var Хэш = Новый_ХешированиеДанных(ХешФункция.SHA256);
                                        Хэш.Добавить(Соль + ПолучитьИД());
                                        var Ключ = ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма);
                                        Профиль.Ключ = Ключ;
                                        Сообщить(Ключ);
                                        Профили.ДобавитьДанные(Профиль);
                                    }
                                    else
                                    {
                                        Параметры.Вставить("key", Профиль.Ключ);
                                        if (Параметры.Свойство("pwd2", ref Пароль))
                                        {
                                            var Хэш = Новый_ХешированиеДанных(ХешФункция.SHA256);
                                            Хэш.Добавить(Имя);
                                            var ПустойПароль = ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма);
                                            Пароль = Расшифровать(Пароль, Профиль.Ключ);
                                            if (!(Пароль == ПустойПароль))
                                            { // не пустой
                                                ТекстСообщение = "Пароли не совпадают";
                                                Хэш = Новый_ХешированиеДанных(ХешФункция.SHA256);
                                                Хэш.Добавить(Параметры.procid + Параметры.uid + Пароль);
                                                if (ПолучитьBase64СтрокуИзДвоичныхДанных(Хэш.ХешСумма) == Параметры.pwd)
                                                {
                                                    ТекстСообщение = "Регистрация выполнена";
                                                    ТекстСтатус = "Информация";
                                                    Профиль.Пароль = Пароль;
                                                    ПрошелАвторизацию = Истина;
                                                    Профили.ДобавитьДанные(Профиль);
                                                }
                                            }
                                        }
                                    }
                                    Параметры.Вставить("key", Профиль.Ключ);
                                }
                            }
                        }
                    }
                }
            }
            Параметры.Вставить("ПрошелАвторизацию", ПрошелАвторизацию);
            Параметры.Вставить("ТекстСообщение", ТекстСообщение);
            Параметры.Вставить("ТекстСтатус", ТекстСтатус);
            Параметры.Вставить("Профиль", Профиль);
            Сообщить(ТекстСообщение);
            return ПрошелАвторизацию;
        } // ВыполнитьРегистрацию()


        dbaccess ПолучитьДанные(string ИстДанных, string БазаДанных)
        {
            dbaccess Данные;
            var Сис = ОбъединитьПути("data", ИстДанных);
            if (!(БазаДанных == ""))
            { // имя контейнера указано
                Данные = (dbaccess)ВсеДанные.Получить(Сис + "/" + БазаДанных);
                if (Данные == Неопределено)
                { // открыть контейнер
                    Данные = new dbaccess(ОбъединитьПути(ТекущийКаталог(), Сис), БазаДанных);
                    ВсеДанные.Вставить(Сис + "/" + БазаДанных, Данные);
                    ОбновитьСписокБаз = ТекущаяДата();
                }
                return Данные;
            }

            return null;
        }


        object ВыполнитьЗадачу(dynamic структЗадача)
        {
            string ИстДанных;
            string ИмяДанных;
            string БазаДанных; 

            Перем Команда = null;
            Перем procid = null;

            Перем ПозицияДанных;
            dynamic ЗапросДанных;

            dbaccess Данные = null;

            dynamic Профиль = Новый_Структура();

            var Запрос = структЗадача.Запрос;

            БазаДанных = "" + УзелСвойство(Запрос, "БазаДанных");
            ИстДанных = "" + УзелСвойство(Запрос, "ИстДанных");
            ИмяДанных = "" + УзелСвойство(Запрос, "ИмяДанных");

            var Субъект = ""; // имя пользователя

            // Если ИстДанных = "" Тогда
            // 	ИстДанных = "public";
            // КонецЕсли;

            Запрос.Свойство("procid", ref procid);
            Запрос.Свойство("cmd", ref Команда);

            if (Команда == Неопределено)
            {
                Запрос.Свойство("Команда", ref Команда);
            }

            Сообщить("dataserver: " + структЗадача.ИдЗадачи + " " + Команда);

            if (Команда == "init")
            { // регистрация контроллера
                if (!(procid == Неопределено))
                {
                    Контроллеры.Вставить(Строка(procid), Запрос);
                }
                return Ложь;
            }

            Перем ИдПроцесса = УзелСвойство(Запрос, "ИдПроцесса");
            if (!(ИдПроцесса == Неопределено))
            {
                var Контроллер = Контроллеры.Получить(Строка(ИдПроцесса)) as Структура;
                if (!(Контроллер == Неопределено))
                {
                    Профиль = УзелСвойство(Контроллер, "Профиль");
                    if (!(Профиль == Неопределено))
                    {
                        Субъект = Профиль.Имя;
                        var Каталог = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект));
                        var Файл = Новый_Файл(Каталог);
                        if (!(Файл.Существует()))
                        {
                            СоздатьКаталог(Каталог);
                        }
                    }
                }
                else
                {
                    структЗадача.Ответ = "ЗапросВыполняется";
                    Сообщить("dataserver: " + "контроллер не зарегистрирован");
                    return Ложь;
                }
            }

            if (Команда == "ПолучитьДанные")
            {

                if (БазаДанных == "")
                { // чтение данных из файла
                    try
                    {
                        ИмяДанных = Запрос.ИмяДанных;
                        if ((ИстДанных == Субъект || ИстДанных == "" || ИстДанных == "public"))
                        {
                            string ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", (ИстДанных == "") ? Субъект : ИстДанных), ИмяДанных + ".sd");
                            var Файл = Новый_Файл(ИмяФайлаДанных);
                            if (Файл.Существует())
                            { // у себя
                                структЗадача.Вставить("Результат", Новый_Структура("Данные", Новый_ДвоичныеДанные(ИмяФайлаДанных)));
                                структЗадача.Вставить("Ответ", "Успешно");
                                return Истина;
                            }
                            if (!(Файл.Существует()))
                            {
                                if (ИстДанных == "")
                                {
                                    ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", "public"), ИмяДанных + ".sd");
                                    Файл = Новый_Файл(ИмяФайлаДанных);
                                    if (Файл.Существует())
                                    { // public
                                        структЗадача.Вставить("Результат", Новый_Структура("Данные", Новый_ДвоичныеДанные(ИмяФайлаДанных)));
                                        структЗадача.Вставить("Ответ", "Успешно");
                                        return Истина;
                                    }
                                    else
                                    {
                                        БазаДанных = "public"; // поискать еще в public.sdb
                                    }
                                }
                                else
                                {
                                    структЗадача.Вставить("Ответ", "НеНайден");
                                    return Истина;
                                }
                            }
                        }
                        else
                        {
                            структЗадача.Вставить("Ответ", "Запрещено");
                        }
                    }
                    catch (Exception e)
                    {
                        структЗадача.Вставить("Ответ", "Ошибка");
                        Сообщить(ОписаниеОшибки(e));
                        return Ложь;
                    }

                }

            }

            if (Команда == "stopserver")
            {
                ОстановитьСервер = Истина;
                return Ложь;

            }
            else if (Команда == "termproc")
            {
                УдалитьКонтроллерИЗадачи(Строка(procid)); // удалить контроллер и его задачи
                return Ложь;

            }
            else if (Команда == "auth" || Команда == "reg")
            {
                bool Результат = false;

                if (Команда == "auth")
                {
                    Результат = ПроверкаАвторизации(Запрос.ЗапросДанные);
                }
                else
                {
                    Результат = ВыполнитьРегистрацию(Запрос.ЗапросДанные);
                }

                if (Результат == Истина)
                {
                    Структура Контроллер = Контроллеры.Получить(Запрос.ИдПроцесса);
                    if (!(Контроллер == Неопределено))
                    {
                        Контроллер.Вставить("Субъект", Запрос.ЗапросДанные.Профиль.Имя);
                        Контроллер.Вставить("Профиль", Запрос.ЗапросДанные.Профиль);
                    }
                }
                структЗадача.Вставить("Ответ", ПроверкаАвторизации(Запрос.ЗапросДанные));
                структЗадача.Вставить("Результат", Запрос.ЗапросДанные);
                return Истина;

            }
            else if (Команда == "ЗавершитьЗадачу")
            { // завершить существующую задачу
                foreach (dynamic элЗадача in Задачи as Список)
                {
                    var стрЗадача = элЗадача.Значение;
                    if (стрЗадача.Запрос.Свойство("ОбратныйЗапрос"))
                    {
                        if (стрЗадача.Запрос.ОбратныйЗапрос.ИдЗадачи == Запрос.сЗадача)
                        {
                            стрЗадача.Ответ = "ЗавершитьЗадачу";
                            стрЗадача.Результат = Ложь;
                            break;
                        }
                    }
                }
                return Истина;

            }
            else if (Команда == "ЗаписатьЗаголовок")
            { // запись заголовка
                if (БазаДанных == "web" || БазаДанных == "log")
                { // системные базы
                    Данные = ПолучитьДанные("sys", БазаДанных);
                }
                else if (ИстДанных == Субъект)
                {
                    Данные = ПолучитьДанные(Субъект, БазаДанных);
                }
                else
                {
                    Данные = ПолучитьДанные(ИстДанных, "inbox");
                }
                if (Данные.ОткрытьПотокДанных(Истина))
                {
                    if (Запрос.Свойство("Заголовок"))
                    {
                        структЗадача.Вставить("Результат", Данные.ДобавитьДанные(Запрос.Заголовок));
                    }
                }
                return Истина;

            }
            else if (Команда == "ЗаписатьДанные")
            { // запись данных
                try
                {
                    // Если НЕ Суб = "" Тогда // контроль прав
                    if (!(БазаДанных == ""))
                    { // имя контейнера указано
                        if (ИстДанных == Субъект)
                        {
                            Данные = ПолучитьДанные(Субъект, БазаДанных);
                        }
                        else if (ИстДанных == "")
                        {
                            Данные = ПолучитьДанные(Субъект, "inbox");
                        }
                        else
                        {
                            Данные = ПолучитьДанные(ИстДанных, "inbox");
                        }
                        if (Данные.ОткрытьПотокДанных(Истина))
                        {
                            if (Запрос.Свойство("Заголовок"))
                            {
                                структЗадача.Вставить("Результат", Данные.ДобавитьДанные(Запрос.Заголовок, Запрос.дДанные));
                                структЗадача.Вставить("Ответ", "Успешно");
                            }
                        }
                    }
                    else
                    { // записать в файл
                        var ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект), Запрос.Заголовок.ИмяДанных + ".sd");
                        Запрос.дДанные.Записать(ИмяФайлаДанных);
                        структЗадача.Вставить("Результат", "");
                        структЗадача.Вставить("Ответ", "Успешно");
                        ОбновитьСписокФайлов = ТекущаяДата();
                    }
                    // Иначе
                    // 	структЗадача.Вставить("Результат", "");
                    // 	структЗадача.Вставить("Ответ", "Нет прав");
                    // КонецЕсли;
                }
                catch (Exception e)
                {
                    структЗадача.Вставить("Ответ", "Ошибка");
                    Сообщить(ОписаниеОшибки(e));
                }
                return Истина;

            }
            else if (Команда == "ЗапросДанных")
            { // выбрать данные по запросу

                if (Запрос.ЗапросДанных.Команда == "НайтиЗаголовок")
                { // выбрать данные по запросу

                    if (!(структЗадача.Свойство("Данные", ref Данные)))
                    {
                        if (БазаДанных == "web" || БазаДанных == "log")
                        { // системные базы
                            Данные = ПолучитьДанные("sys", БазаДанных);
                        }
                        else if (ИстДанных == Субъект)
                        {
                            Данные = ПолучитьДанные(Субъект, БазаДанных);
                        }
                        else if (ИстДанных == "")
                        {
                            Данные = ПолучитьДанные("public", "public");
                        }
                        else
                        {
                            Данные = ПолучитьДанные(ИстДанных, "public");
                        }
                        // Иначе
                        // 	структЗадача.Вставить("Результат", "");
                        // 	структЗадача.Вставить("Ответ", "Нет прав");
                        // 	Возврат Истина;
                        // КонецЕсли;
                        структЗадача.Вставить("Данные", Данные);
                    }

                    структЗадача.Вставить("Ответ", Данные.НайтиЗаголовок(Запрос.ЗапросДанных));
                    Сообщить("ЗаписейПрочитано: " + Запрос.ЗапросДанных.ЗаписейПрочитано + " за " + Запрос.ЗапросДанных.ВремяПоиска + " мс.");
                    if (Запрос.ЗапросДанных.ЗаголовокНайден == Истина || структЗадача.Ответ == "ЗапросЗавершен" || структЗадача.Ответ == "ЗапросПриостановлен")
                    {
                        структЗадача.Вставить("Результат", Запрос.ЗапросДанных);
                        return Истина;
                    }

                }
                else if (Запрос.ЗапросДанных.Команда == "СписокБаз" || Запрос.ЗапросДанных.Команда == "СписокФайлов")
                {
                    if (!(Запрос.Свойство("СписокФайлов")))
                    {
                        Запрос.Вставить("СписокФайлов", Новый_Массив());
                        var ТипФ = "";
                        if (Запрос.ЗапросДанных.Команда == "СписокБаз")
                        {
                            ТипФ = "*.sdb"; // базы пользователя
                        }
                        else
                        {
                            ТипФ = "*.sd"; // СписокФайлов
                        }
                        var СписокФайлов = НайтиФайлы(ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект)), ТипФ, Ложь);
                        if (СписокФайлов.Количество() != 0)
                        {
                            Запрос.Вставить("ВсегоЭлементов", СписокФайлов.Количество());
                            foreach (КлючИЗначение _элФайл in СписокФайлов as Список)
                            {
                                dynamic элФайл = _элФайл.Значение;
                                var Заголовок = Новый_Структура();
                                Заголовок.Вставить("ИмяФайла", элФайл.ИмяБезРасширения);
                                Заголовок.Вставить("ВремяИзменения", элФайл.ПолучитьВремяИзменения());
                                Заголовок.Вставить("Размер", элФайл.Размер());
                                Запрос.СписокФайлов.Добавить(Заголовок);
                            }
                        }
                        if (!(Запрос.ЗапросДанных.Свойство("Позиция")))
                        {
                            Запрос.ЗапросДанных.Вставить("Позиция", 0);
                        }
                    }
                    long Позиция = Число(Запрос.ЗапросДанных.Позиция);
                    Запрос.ЗапросДанных.Вставить("ЗаголовокНайден", Ложь);
                    ЗапросДанных = Неопределено;
                    while (Позиция < Запрос.СписокФайлов.Количество())
                    {
                        if (ЗапросДанных == Неопределено)
                        {
                            Запрос.ЗапросДанных.Вставить("ЗаголовокНайден", Истина);
                            ЗапросДанных = Запрос.ЗапросДанных;
                        }
                        else
                        {
                            ЗапросДанных.Вставить("Соседний", Новый_Структура());
                            ЗапросДанных = ЗапросДанных.Соседний;
                        }
                        ЗапросДанных.Вставить("Заголовок", Запрос.СписокФайлов.Получить(Позиция));
                        Позиция = Позиция + 1;
                        ЗапросДанных.Вставить("Позиция", Позиция);
                    }
                    структЗадача.Вставить("Ответ", "ЗапросЗавершен");
                    if (Запрос.ЗапросДанных.Свойство("Обновление"))
                    {
                        if (Запрос.ЗапросДанных.Обновление == "Авто")
                        {
                            структЗадача.Вставить("Ответ", "ЗапросПриостановлен");
                        }
                    }
                    структЗадача.Вставить("Результат", Запрос.ЗапросДанных);
                    return Истина;
                }

                return Ложь;

            }
            else if (Команда == "ПолучитьДанные")
            {

                if (БазаДанных == "web" || БазаДанных == "log")
                { // системные базы
                    Данные = ПолучитьДанные("sys", БазаДанных);
                }
                else if (ИстДанных == Субъект)
                {
                    Данные = ПолучитьДанные(Субъект, БазаДанных);
                }
                else if (ИстДанных == "")
                {
                    Данные = ПолучитьДанные("public", "public");
                }
                else
                {
                    Данные = ПолучитьДанные(ИстДанных, "public");
                }
                // Иначе
                // 	структЗадача.Вставить("Результат", "");
                // 	структЗадача.Вставить("Ответ", "Нет прав");
                // 	Возврат Истина;
                // КонецЕсли;

                ПозицияДанных = "" + УзелСвойство(Запрос, "ПозицияДанных");

                if (!(ПозицияДанных == ""))
                { // прочитать файл по позиции в контейнере
                    var ТипДанных = "";
                    структЗадача.Вставить("Результат", Новый_Структура("Данные", Данные.ПолучитьДанные((long)Число(ПозицияДанных), ТипДанных)));
                    структЗадача.Результат.Вставить("ТипДанных", ТипДанных);
                    структЗадача.Вставить("Ответ", "Успешно");

                }
                else if (!(ИмяДанных == ""))
                { // найти по имени данных
                    ЗапросДанных = НовоеУсловиеОтбора(Неопределено, "ИмяДанных", "Равно", ИмяДанных);
                    Данные.НайтиЗаголовок(ЗапросДанных);
                    Сообщить("ЗаписейПрочитано: " + ЗапросДанных.ЗаписейПрочитано + " за " + ЗапросДанных.ВремяПоиска + " мс.");
                    if (ЗапросДанных.ЗаголовокНайден == Истина)
                    {
                        ЗапросДанных.Заголовок.Вставить("Данные", Данные.ПолучитьДанные(Число(ЗапросДанных.Заголовок.ПозицияДанных)));
                        структЗадача.Вставить("Результат", ЗапросДанных.Заголовок);
                        структЗадача.Вставить("Ответ", "Успешно");
                    }
                    else
                    {
                        структЗадача.Вставить("Ответ", "НеНайден");
                    }

                }
                else
                { // получить список контейнеров
                    структЗадача.Вставить("Результат", Данные.ПолучитьЗаголовки());
                    структЗадача.Вставить("Ответ", "Успешно");
                }

            }
            else if (Команда == "УдалитьДанные")
            {

                if (ИстДанных == Субъект)
                {
                    Данные = ПолучитьДанные(Субъект, БазаДанных) as dbaccess;
                    ПозицияДанных = "" + УзелСвойство(Запрос, "ПозицияДанных");
                    if (!(ПозицияДанных == ""))
                    { // удалить по позиции в контейнере
                        структЗадача.Вставить("Ответ", Данные.УдалитьДанные((long)Число(ПозицияДанных)));
                    }
                }
                else
                {
                    структЗадача.Вставить("Ответ", "Нет доступа");
                }

            }
            else if (Команда == "ВнешнийЗапрос")
            {

                Контроллеры.Вставить(Запрос.База, структЗадача);

                if (Запрос.Свойство("ИдЗадачи"))
                { // есть результат
                    var рЗадача = Задачи.Получить(Запрос.ИдЗадачи);
                    рЗадача.Вставить("Результат", Запрос.Результат);
                }

                структЗадача.Этап = "Приостановить";

                return Ложь;

            }
            else if (Команда == "ВнешниеДанные")
            {

                dynamic кЗадача = Контроллеры.Получить(Запрос.Параметры.База) as Структура;
                if (!(кЗадача == Неопределено))
                { // есть соединение с базой
                    if (кЗадача.Результат == Неопределено)
                    { // послать запрос
                        Запрос.Параметры.Вставить("ИдЗадачи", структЗадача.ИдЗадачи);
                        кЗадача.Результат = СтруктуруВДвоичныеДанные(Запрос.Параметры);
                        структЗадача.Этап = "Приостановить";
                    }
                }

                return Ложь;

            }
            else
            {

                структЗадача.Результат = "Неизвестная команда";

            }

            return Истина;

        }


        void УдалитьКонтроллерИЗадачи(string ИдКонтроллера)
        {
            Контроллеры.Удалить(ИдКонтроллера);
            foreach (КлючИЗначение элЗадача in Задачи as Список)
            {
                dynamic Задача = элЗадача.Значение as Структура;
                if (Задача.Запрос.Свойство("ИдПроцесса"))
                {
                    if (Задача.Запрос.ИдПроцесса == ИдКонтроллера)
                    {
                        Задача.Этап = "Удалить";
                    }
                }
            }
        }


        void ОбработатьСоединения()
        {

            Соль = "123";

            //Версия = "0.0.1";
            Хост = "127.0.0.1";

            Порт = 8887;

            if (АргументыКоманднойСтроки.Length != 0)
            {
                Порт = (int)Число(АргументыКоманднойСтроки[0]);
            }

            var Таймаут = 5;

            var TCPСервер = Новый_TCPСервер(Порт);
            TCPСервер.ЗапуститьАсинхронно();
            Сообщить(СокрЛП(ТекущаяДата()) + " Дата-сервер запущен на порту: " + Порт);

            Задачи = Новый_Соответствие();
            мЗадачи = Новый_Массив();

            ОстановитьСервер = Ложь;
            ПерезапуститьСервер = Ложь;
            TCPСоединение Соединение = null;

            //ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "dbaccess.os"), "dbaccess");
            ВсеДанные = Новый_Соответствие();

            Контроллеры = Новый_Соответствие();

            Соединения = Новый_Массив();

            Профили = new dbaccess(ОбъединитьПути(ТекущийКаталог(), "data", "sys"), "users");

            var СуммаЦиклов = 0;
            var РабочийЦикл = 0;
            var ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
            ОбновитьСписокФайлов = ТекущаяДата();
            ОбновитьСписокБаз = ТекущаяДата();

            var ПредЗамер = ЗамерВремени;

            while (!(ОстановитьСервер))
            {

                var НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();
                СуммаЦиклов = СуммаЦиклов + 1;

                if (СуммаЦиклов > 999)
                {
                    ПредЗамер = ЗамерВремени;
                    ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
                    Загрузка = " " + РабочийЦикл / 10 + "% " + Цел(1000 * РабочийЦикл / (ЗамерВремени - ПредЗамер)) + " q/s " + Задачи.Количество() + " tasks";
                    СуммаЦиклов = 0;
                    РабочийЦикл = 0;
                }

                АктивныеЗадачи = 0;
                var к = мЗадачи.Количество();
                while (к > 0 && !(ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла > 50))
                {
                    к = к - 1;
                    dynamic структЗадача = мЗадачи.Получить(0) as Структура;
                    мЗадачи.Удалить(0);

                    bool ЕстьРезультат = (!(структЗадача.Результат == Неопределено));
                    if (!(ЕстьРезультат))
                    {

                        bool Выполнить = (структЗадача.Этап == "Выполнить" || структЗадача.Этап == "Продолжить");

                        if (структЗадача.Ответ == "ЗапросПриостановлен")
                        {
                            Выполнить = Ложь;

                            if (структЗадача.Запрос.Свойство("Команда"))
                            {
                                if (структЗадача.Запрос.Команда == "ЗапросДанных")
                                {
                                    if (структЗадача.Запрос.ЗапросДанных.Команда == "СписокФайлов")
                                    {
                                        if (ОбновитьСписокФайлов > структЗадача.ВремяСоздания)
                                        {
                                            структЗадача.Запрос.ЗапросДанных.Позиция = 0;
                                            структЗадача.Запрос.Удалить("СписокФайлов");
                                            структЗадача.ВремяСоздания = ТекущаяДата();
                                            Выполнить = Истина;
                                        }
                                    }
                                    if (структЗадача.Запрос.ЗапросДанных.Команда == "СписокБаз")
                                    {
                                        if (ОбновитьСписокБаз > структЗадача.ВремяСоздания)
                                        {
                                            структЗадача.Запрос.ЗапросДанных.Позиция = 0;
                                            структЗадача.Запрос.Удалить("СписокФайлов");
                                            структЗадача.ВремяСоздания = ТекущаяДата();
                                            Выполнить = Истина;
                                        }
                                    }
                                    if (структЗадача.Запрос.ЗапросДанных.Команда == "НайтиЗаголовок")
                                    {
                                        if (структЗадача.Данные.ВремяИзменения > структЗадача.ВремяСоздания)
                                        {
                                            структЗадача.Запрос.ЗапросДанных.ПоследняяПозиция = 0;
                                            структЗадача.Запрос.ЗапросДанных.Удалить("ПозицияДанных");
                                            структЗадача.ВремяСоздания = ТекущаяДата();
                                            Выполнить = Истина;
                                        }
                                    }
                                }
                            }
                        }

                        if (Выполнить)
                        {
                            РабочийЦикл = РабочийЦикл + 1;
                            try
                            {
                                структЗадача.Вставить("Ответ", Неопределено);
                                ЕстьРезультат = ВыполнитьЗадачу(структЗадача);
                            }
                            catch (Exception e)
                            {
                                Сообщить(ОписаниеОшибки(e));
                            }

                        }

                    }

                    if (ЕстьРезультат == Истина)
                    {
                        try
                        {
                            Перем ОбратныйЗапрос = null;
                            Структура Запрос = структЗадача.Запрос;
                            if (Запрос.Свойство("ОбратныйЗапрос", ref ОбратныйЗапрос))
                            { // возвращаем результат
                                dynamic Контроллер = Контроллеры.Получить(структЗадача.Запрос.ИдПроцесса);
                                if (!(Контроллер == Неопределено))
                                {
                                    (ОбратныйЗапрос as Структура).Вставить("РезультатДанные", Новый_Структура("Ответ, Результат", структЗадача.Ответ, структЗадача.Результат));
                                    if (ПередатьДанные(Контроллер.Хост, Контроллер.Порт, ОбратныйЗапрос) == Неопределено)
                                    {
                                        Сообщить("dataserver: Ошибка передачи результатов");
                                    }
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            Сообщить(ОписаниеОшибки(e));
                        }
                        структЗадача.Результат = Неопределено;
                    }

                    if (структЗадача.Этап == "Данные")
                    {
                        if (структЗадача.Соединение.Статус == "Данные")
                        {
                            //РазобратьДанныеЗапроса(структЗадача);
                            структЗадача.Этап = "Новая";
                        }
                        else if (структЗадача.Соединение.Статус == "Ошибка")
                        {
                            структЗадача.Этап = "Удалить";
                        }
                    }

                    if (структЗадача.Этап == "Выполнить")
                    {
                        if (!(Строка(структЗадача.Ответ) == "ЗапросПриостановлен"))
                        {
                            if (!(Строка(структЗадача.Ответ) == "ЗапросВыполняется"))
                            {
                                //АктивныеЗадачи = АктивныеЗадачи + 1;
                                структЗадача.Этап = "Удалить";
                            }
                        }
                    }

                    if (структЗадача.Этап == "Вернуть")
                    {
                        if (!(структЗадача.Соединение.Статус == "Занят"))
                        {
                            структЗадача.Соединение.Закрыть();
                            структЗадача.Соединение = Неопределено;
                            структЗадача.Этап = "Удалить";
                        }
                    }

                    if (структЗадача.Этап == "Удалить")
                    {
                        Сообщить("dataserver <- taskid=" + СокрЛП(структЗадача.ИдЗадачи) + " time=" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - структЗадача.ВремяНачало) + Загрузка);
                        Задачи.Удалить(структЗадача.ИдЗадачи);
                        continue;
                    }

                    //Сообщить("dataserver: всего задач " + Задачи.Количество());

                    мЗадачи.Добавить(структЗадача);

                }

                Соединение = TCPСервер.ПолучитьСоединение(Таймаут);
                if (!(Соединение == Неопределено))
                {
                    Соединения.Добавить(Соединение);
                    Таймаут = 5;
                }

                к = Соединения.Количество();
                while (к > 0)
                {
                    к = к - 1;
                    Соединение = Соединения.Получить(0) as TCPСоединение;
                    Соединения.Удалить(0);

                    if (Соединение.Статус == "Данные")
                    {
                        Структура Запрос = null;

                        try
                        {
                            Запрос = null;
                            Запрос = ДвоичныеДанныеВСтруктуру(Соединение.ПолучитьДвоичныеДанные()) as Структура;
                        }
                        catch (Exception e)
                        {
                            Сообщить("dataserver: " + ОписаниеОшибки(e));
                        }

                        if (Запрос == Неопределено)
                        {
                            continue;
                        }

                        if (!(Запрос == Неопределено))
                        {
                            dynamic структЗадача = Новый_Структура("ИдЗадачи, Этап, Запрос, Ответ, Результат, ВремяНачало, ВремяСоздания", ПолучитьИД(), "Выполнить", Запрос, Неопределено, Неопределено, ТекущаяУниверсальнаяДатаВМиллисекундах(), ТекущаяДата());
                            Задачи.Вставить(структЗадача.ИдЗадачи, структЗадача);
                            мЗадачи.Добавить(структЗадача);
                            //Сообщить("dataserver: всего задач " + Задачи.Количество());
                        }

                        Соединение.Закрыть();
                        continue;

                    }
                    else if (Соединение.Статус == "Ошибка")
                    {

                        Соединение.Закрыть();
                        continue;

                    }

                    Соединения.Добавить(Соединение);

                }

                var ВремяЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла;
                if (ВремяЦикла > 100)
                {
                    Сообщить("!dataserver ВремяЦикла=" + ВремяЦикла);
                }
                if (Таймаут < 50)
                {
                    Таймаут = Таймаут + 1;
                }

            }

            TCPСервер.Остановить();

        }


        public void Main()
        {
            ОбработатьСоединения();
        }

    }

    class MainClass
    {

        public static void Main(string[] args)
        {
            var hostedScript = new HostedScriptEngine();
            var app = new dataserver("dataserver");
            app._syscon = new SystemGlobalContext();
            app._syscon.ApplicationHost = new ApplicationHost();
            app.Main();

        }
    }
}
