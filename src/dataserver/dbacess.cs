// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace dataserver
{
    class dbaccess
    {

        Перем ИмяФайлаДанных;
        Перем КаталогФайловДанных;
        Перем ПотокДанных;
        Перем ВремяИзменения;


        object СтруктуруВДвоичныеДанные(знСтруктура)
        {
            Результат = Новый Массив;
            if (!(знСтруктура == Неопределено))
            {
                foreach (Элемент in знСтруктура)
                {
                    Ключ = Элемент.Ключ;
                    Значение = Элемент.Значение;
                    if (ТипЗнч(Значение) == Тип("Структура"))
                    {
                        Ключ = "*" + Ключ;
                        дЗначение = СтруктуруВДвоичныеДанные(Значение);
                    }
                    else if (ТипЗнч(Значение) == Тип("ДвоичныеДанные"))
                    {
                        Ключ = "#" + Ключ;
                        дЗначение = Значение;
                    }
                    else
                    {
                        дЗначение = ПолучитьДвоичныеДанныеИзСтроки(Значение);
                    }
                    дКлюч = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
                    рдКлюч = дКлюч.Размер();
                    рдЗначение = дЗначение.Размер();
                    бРезультат = Новый БуферДвоичныхДанных(6);
                    бРезультат.ЗаписатьЦелое16(0, рдКлюч);
                    бРезультат.ЗаписатьЦелое32(2, рдЗначение);
                    Результат.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бРезультат));
                    Результат.Добавить(дКлюч);
                    Результат.Добавить(дЗначение);
                }
            }
            return СоединитьДвоичныеДанные(Результат);
        }


        object ДвоичныеДанныеВСтруктуру(Данные, Рекурсия = Истина)
        {
            if (ТипЗнч(Данные) == Тип("ДвоичныеДанные"))
            {
                рдДанные = Данные.Размер();
                if (рдДанные == 0)
                {
                    return Неопределено;
                }
                бдДанные = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Данные);
            }
            else if (ТипЗнч(Данные) == Тип("БуферДвоичныхДанных"))
            {
                рдДанные = Данные.Размер;
                бдДанные = Данные;
            }
            else
            {
                return Неопределено;
            }
            Позиция = 0;
            знСтруктура = Новый Структура;
            while (Позиция < рдДанные - 1)
            {
                рдКлюч = бдДанные.ПрочитатьЦелое16(Позиция);
                рдЗначение = бдДанные.ПрочитатьЦелое32(Позиция + 2);
                if (рдКлюч + рдЗначение > рдДанные)
                { // Это не структура
                    return Неопределено;
                }
                Ключ = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бдДанные.Прочитать(Позиция + 6, рдКлюч)));
                бЗначение = бдДанные.Прочитать(Позиция + 6 + рдКлюч, рдЗначение);
                Позиция = Позиция + 6 + рдКлюч + рдЗначение;
                Л = Лев(Ключ, 1);
                if (Л == "*")
                {
                    if (!(Рекурсия))
                    {
                        continue;
                    }
                    Ключ = Сред(Ключ, 2);
                    Значение = ДвоичныеДанныеВСтруктуру(бЗначение);
                }
                else if (Л == "#")
                {
                    Ключ = Сред(Ключ, 2);
                    Значение = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение);
                }
                else
                {
                    Значение = ПолучитьСтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(бЗначение));
                }
                знСтруктура.Вставить(Ключ, Значение);
            }
            return знСтруктура;
        }


        // открыть контейнер для чтения или записи
        object ОткрытьПотокДанных(ДляЗаписи = Ложь, Позиция = Неопределено)
        {

            try
            {

                if (ДляЗаписи)
                {

                    if (!(ПотокДанных == Неопределено))
                    {
                        if (!(ПотокДанных.ДоступнаЗапись))
                        {
                            ПотокДанных.Закрыть();
                            ПотокДанных = Неопределено;
                        }
                    }

                    if (ПотокДанных == Неопределено)
                    {
                        ПотокДанных = ФайловыеПотоки.ОткрытьДляЗаписи(ИмяФайлаДанных);
                    }

                    if (Позиция == Неопределено)
                    {
                        ПотокДанных.Перейти(0, ПозицияВПотоке.Конец);
                    }
                    else
                    {
                        ПотокДанных.Перейти(Позиция, ПозицияВПотоке.Начало);
                    }

                    ВремяИзменения = ТекущаяДата();

                }
                else
                {

                    if (!(ПотокДанных == Неопределено))
                    {
                        if (!(ПотокДанных.ДоступноЧтение))
                        {
                            ПотокДанных.Закрыть();
                            ПотокДанных = Неопределено;
                        }
                    }

                    if (ПотокДанных == Неопределено)
                    {
                        ПотокДанных = ФайловыеПотоки.ОткрытьДляЧтения(ИмяФайлаДанных);
                    }

                    if (!(Позиция == Неопределено))
                    {
                        ПотокДанных.Перейти(Позиция, ПозицияВПотоке.Начало);
                    }

                }

                return Истина;

            }
            catch
            {

                return Ложь;

            }

        }


        // Получить заголовки из контейнера
        object ПолучитьЗаголовки()
        {

            ОткрытьПотокДанных();

            if (ПотокДанных == Неопределено)
            {
                return Неопределено;
            }

            Индекс = 0;
            Результат = Новый Структура();

            ПозицияДанных = ПотокДанных.Размер();

            while (ПозицияДанных > 12)
            {

                ПотокДанных.Перейти(ПозицияДанных - 12, ПозицияВПотоке.Начало);

                Буфер = Новый БуферДвоичныхДанных(8);
                ПотокДанных.Прочитать(Буфер, 0, 8);
                ПозицияДанных = Буфер.ПрочитатьЦелое64(0);

                Буфер = Новый БуферДвоичныхДанных(4);
                ПотокДанных.Прочитать(Буфер, 0, 4);
                ТипДанных = Буфер.ПрочитатьЦелое32(0);

                if (ТипДанных == 1)
                { // Заголовок
                    дЗаголовок = ПолучитьДанные(ПозицияДанных);
                    Результат.Вставить("З" + Индекс, ДвоичныеДанныеВСтруктуру(дЗаголовок));
                    Индекс = Индекс + 1;
                }

            }

            return Результат;

        } // ПолучитьЗаголовки()


        // найти заголовок по условиям
        object НайтиЗаголовок(ЗапросДанных)
        {

            Перем СвойствоЗначение, ПозицияДанных, УсловияОтбора, Позиция, ЧислоЗаписей, Направление, ТолькоОдин;

            ОткрытьПотокДанных();

            if (ПотокДанных == Неопределено)
            {
                return "ОшибкаПотокаДанных";
            }

            ЗапросДанных.Свойство("УсловияОтбора", УсловияОтбора);
            if (ТипЗнч(УсловияОтбора) == Тип("Структура"))
            {
                if (!(УсловияОтбора.Количество()))
                {
                    УсловияОтбора = Неопределено;
                }
            }
            else
            {
                УсловияОтбора = Неопределено;
            }

            ЗапросДанных.Свойство("ПозицияДанных", ПозицияДанных);
            ЗапросДанных.Свойство("Направление", Направление);

            if ("" + Направление == "")
            {
                Направление = "Назад";
            }

            if (ПозицияДанных == Неопределено)
            {
                ЗапросДанных.Свойство("НачальнаяПозиция", ПозицияДанных);
            }

            Размер = ПотокДанных.Размер();

            if (!("" + ПозицияДанных == ""))
            {
                ПозицияДанных = Число(ПозицияДанных);
            }
            else
            {
                ПозицияДанных = Размер;
            }

            if (!(ЗапросДанных.Свойство("ПоследняяПозиция", Позиция)))
            {
                Позиция = 0;
            }
            if (!(ЗапросДанных.Свойство("ЧислоЗаписей", ЧислоЗаписей)))
            {
                ЧислоЗаписей = 1;
            }

            Позиция = Число(Позиция);
            ЧислоЗаписей = Число(ЧислоЗаписей);

            ЗапросДанных.Вставить("ПоследняяПозиция", Позиция);
            ЗапросДанных.Вставить("ЗаголовокНайден", Ложь);
            ЗаголовокНайден = Ложь;

            ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
            ЗаписейПрочитано = 0;

            Результат = "ЗапросВыполняется";

            Запись = Неопределено;

            while (Истина)
            {

                Завершен = !(((ПозицияДанных > 12 && Направление == "Назад") || (ПозицияДанных + 4 < Размер && Направление == "Вперед")) || (Позиция == ЧислоЗаписей));

                // превышение времени ожидания ответа
                if (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало > 50)
                {
                    break;
                }

                if (Завершен)
                {
                    break;
                }

                ПотокДанных.Перейти(ПозицияДанных - 12, ПозицияВПотоке.Начало);

                Буфер = Новый БуферДвоичныхДанных(8);
                ПотокДанных.Прочитать(Буфер, 0, 8);
                зПозицияДанных = Буфер.ПрочитатьЦелое64(0);

                Буфер = Новый БуферДвоичныхДанных(4);
                ПотокДанных.Прочитать(Буфер, 0, 4);
                ТипДанных = Буфер.ПрочитатьЦелое32(0);

                ЗаписейПрочитано = ЗаписейПрочитано + 1;

                if (Направление == "Назад")
                {
                    ПозицияДанных = зПозицияДанных;
                }
                else
                {
                    ПотокДанных.Перейти(ПозицияДанных, ПозицияВПотоке.Начало);
                    Буфер = Новый БуферДвоичныхДанных(4);
                    ПотокДанных.Прочитать(Буфер, 0, 4);
                    Объем = Буфер.ПрочитатьЦелое32(0);
                    ПозицияДанных = ПозицияДанных + 4 + Объем + 12;
                }

                if (ТипДанных == 1)
                { // Заголовок

                    дЗаголовок = ПолучитьДанные(зПозицияДанных);
                    Заголовок = ДвоичныеДанныеВСтруктуру(дЗаголовок);

                    // возвращает первое совпадение
                    if (!(УсловияОтбора == Неопределено))
                    {
                        ЗаголовокНайден = Ложь;
                        foreach (элУсловия in УсловияОтбора)
                        {
                            if (элУсловия.Ключ == "ТолькоОдин")
                            {
                                ТолькоОдин = элУсловия.Значение.Значение;
                            }
                            else if (Заголовок.Свойство(элУсловия.Ключ, СвойствоЗначение))
                            {
                                if (элУсловия.Значение.Сравнение == "Равно")
                                {
                                    ЗаголовокНайден = (СвойствоЗначение == элУсловия.Значение.Значение);
                                }
                                if (!(ЗаголовокНайден))
                                {
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        ЗаголовокНайден = Истина;
                    }

                    if (ЗаголовокНайден)
                    {
                        if (Запись == Неопределено)
                        {
                            ЗапросДанных.Вставить("ЗаголовокНайден", Истина);
                            Запись = ЗапросДанных;
                        }
                        else
                        {
                            Запись.Вставить("Соседний", Новый Структура());
                            Запись = Запись.Соседний;
                        }
                        Позиция = Позиция + 1;
                        Запись.Вставить("Заголовок", Заголовок);
                        Запись.Вставить("Позиция", Позиция);
                        if (ТолькоОдин == "Истина")
                        {
                            break;
                        }
                    }

                }

            }

            ЗапросДанных.Вставить("ВремяПоиска", ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало);
            ЗапросДанных.Вставить("ЗаписейПрочитано", ЗаписейПрочитано);

            ЗапросДанных.Вставить("ПоследняяПозиция", Позиция);
            ЗапросДанных.Вставить("ПозицияДанных", ПозицияДанных);

            if (Завершен)
            {
                Результат = "ЗапросЗавершен";
                if (ЗапросДанных.Свойство("Обновление"))
                {
                    if (ЗапросДанных.Обновление == "Авто")
                    {
                        Результат = "ЗапросПриостановлен";
                    }
                }
            }

            return Результат;

        }


        // найти заголовок по ключу
        object НайтиКлюч(Ключ)
        {

            ОткрытьПотокДанных();

            if (ПотокДанных == Неопределено)
            {
                return Неопределено;
            }

            ДанныеНайти = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
            ОбъемДанных = ДанныеНайти.Размер();
            БуферНайти = Новый БуферДвоичныхДанных(ОбъемДанных);

            ПозицияДанных = ПотокДанных.Размер();

            Результат = Новый Структура("Результат", "ЗаголовокНеНайден");
            //Сообщить(ДанныеНайти);

            while (ПозицияДанных > 12)
            {

                ПотокДанных.Перейти(ПозицияДанных - 12, ПозицияВПотоке.Начало);

                Буфер = Новый БуферДвоичныхДанных(8);
                ПотокДанных.Прочитать(Буфер, 0, 8);
                ПозицияДанных = Буфер.ПрочитатьЦелое64(0);

                Буфер = Новый БуферДвоичныхДанных(4);
                ПотокДанных.Прочитать(Буфер, 0, 4);
                ТипДанных = Буфер.ПрочитатьЦелое32(0);

                if (ТипДанных == 1)
                { // Заголовок

                    ПотокДанных.Перейти(ПозицияДанных + 4, ПозицияВПотоке.Начало);
                    ПотокДанных.Прочитать(БуферНайти, 0, ОбъемДанных);

                    if (ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(БуферНайти) == ДанныеНайти)
                    {
                        дЗаголовок = ПолучитьДанные(ПозицияДанных);
                        Результат.Вставить("Результат", "ЗаголовокНайден");
                        Результат.Вставить("Заголовок", дЗаголовок);
                        return Результат;
                    }

                }

            }

            return Результат;

        }


        // получить данные из контейнера и записать в файл
        object ПолучитьФайл(Позиция)
        {

            ИмяФайла = ОбъединитьПути(КаталогФайловДанных, Позиция);

            ФайлДанных = Новый Файл(ИмяФайла);

            if (!(ФайлДанных.Существует()))
            {

                try
                {

                    ОткрытьПотокДанных(Ложь, Позиция);

                    Буфер = Новый БуферДвоичныхДанных(4);
                    ПотокДанных.Прочитать(Буфер, 0, 4);
                    ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

                    Буфер = Новый БуферДвоичныхДанных(ОбъемДанных);
                    ПотокДанных.Прочитать(Буфер, 0, ОбъемДанных);

                    ДанныеФайла = ФайловыеПотоки.ОткрытьДляЗаписи(ИмяФайла);
                    ДанныеФайла.Записать(Буфер, 0, ОбъемДанных);

                    ДанныеФайла.Закрыть();

                }
                catch
                {

                    Сообщить(ОписаниеОшибки());
                    return Ложь;

                }

            }

            return Истина;

        }


        // Удалить данные из контейнера (заголовок тип + 10000)
        object УдалитьДанные(Позиция)
        {

            ОткрытьПотокДанных(Ложь, Позиция);

            Буфер = Новый БуферДвоичныхДанных(4);
            ПотокДанных.Прочитать(Буфер, 0, 4);
            ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

            Позиция = Позиция + ОбъемДанных + 4 + 12;

            ОткрытьПотокДанных(Ложь, Позиция); // это заголовок данных

            ПотокДанных.Прочитать(Буфер, 0, 4);
            ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

            ОткрытьПотокДанных(Ложь, Позиция + ОбъемДанных + 4 + 8);

            ПотокДанных.Прочитать(Буфер, 0, 4);
            ТипДанных = Буфер.ПрочитатьЦелое32(0);

            ОткрытьПотокДанных(Истина, Позиция + ОбъемДанных + 4 + 8);
            Буфер.ЗаписатьЦелое32(0, 10000 + ТипДанных);
            ПотокДанных.Записать(Буфер, 0, 4);

            return "Успешно";

        }


        // Получить двоичные данные из контейнера
        object ПолучитьДанные(Позиция, ТипДанных = Неопределено)
        {

            ОткрытьПотокДанных(Ложь, Позиция);

            Буфер = Новый БуферДвоичныхДанных(4);
            ПотокДанных.Прочитать(Буфер, 0, 4);
            ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

            Буфер = Новый БуферДвоичныхДанных(ОбъемДанных);
            ПотокДанных.Прочитать(Буфер, 0, ОбъемДанных);

            if (!(ТипДанных == Неопределено))
            { // прочитать тип данных
                Буфер1 = Новый БуферДвоичныхДанных(4);
                ПотокДанных.Прочитать(Буфер1, 0, 4);
                ПотокДанных.Прочитать(Буфер1, 0, 4);
                ПотокДанных.Прочитать(Буфер1, 0, 4);
                ТипДанных = Буфер1.ПрочитатьЦелое32(0);
            }

            return ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);

        }


        // добавить в контейнер заголовок с файлом или без
        object ДобавитьДанные(Заголовок, дДанные = Неопределено)
        {

            Перем ИмяФайла, ТипДанных;

            ОткрытьПотокДанных(Истина);

            ПозицияДанных = ПотокДанных.ТекущаяПозиция();

            if (Заголовок.Свойство("ТипДанных", ТипДанных) && !(дДанные == Неопределено))
            {
                Заголовок.Вставить("ОбъемДанных", ЗаписатьДанные(дДанные, Число(ТипДанных)));
                Заголовок.Вставить("ПозицияДанных", ПозицияДанных);
            }

            Заголовок.Вставить("Дата", "" + ТекущаяДата());

            дЗаголовок = СтруктуруВДвоичныеДанные(Заголовок);

            ЗаписатьДанные(дЗаголовок);

            return ПозицияДанных;

        }


        // добавить содержимое файла в контейнер
        object ЗаписатьДанныеФайла(ИмяФайла)
        {

            ПозицияДанных = ПотокДанных.ТекущаяПозиция();

            ДанныеФайла = ФайловыеПотоки.ОткрытьДляЧтения(ИмяФайла);
            ОбъемДанных = ДанныеФайла.Размер();

            Буфер = Новый БуферДвоичныхДанных(4);
            Буфер.ЗаписатьЦелое32(0, ОбъемДанных);
            ПотокДанных.Записать(Буфер, 0, 4);

            ДанныеФайла.КопироватьВ(ПотокДанных);
            ДанныеФайла.Закрыть();

            Буфер = Новый БуферДвоичныхДанных(8);
            Буфер.ЗаписатьЦелое64(0, ПозицияДанных);
            ПотокДанных.Записать(Буфер, 0, 8);

            ТипДанных = 2; // 2 = файл

            Буфер = Новый БуферДвоичныхДанных(4);
            Буфер.ЗаписатьЦелое32(0, ТипДанных);
            ПотокДанных.Записать(Буфер, 0, 4);

            ПотокДанных.СброситьБуферы();

            return ОбъемДанных;

        }


        // добавить двоичные данные в контейнер
        object ЗаписатьДанные(дДанные, ТипДанных = 1)
        {

            ПозицияДанных = ПотокДанных.ТекущаяПозиция();

            ОбъемДанных = дДанные.Размер();

            Буфер = Новый БуферДвоичныхДанных(4);
            Буфер.ЗаписатьЦелое32(0, ОбъемДанных);
            ПотокДанных.Записать(Буфер, 0, 4);

            Буфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(дДанные);
            ПотокДанных.Записать(Буфер, 0, ОбъемДанных);

            Буфер = Новый БуферДвоичныхДанных(8);
            Буфер.ЗаписатьЦелое64(0, ПозицияДанных);
            ПотокДанных.Записать(Буфер, 0, 8);

            Буфер = Новый БуферДвоичныхДанных(4);
            Буфер.ЗаписатьЦелое32(0, ТипДанных); // 1 = заголовок
            ПотокДанных.Записать(Буфер, 0, 4);

            ПотокДанных.СброситьБуферы();

            return ОбъемДанных;

        }


        object ПриСозданииОбъекта(КаталогФайловДанных, значИмяФайлаДанных)
        {
            ИмяФайлаДанных = ОбъединитьПути(КаталогФайловДанных, значИмяФайлаДанных + ".sdb");
            Файл = Новый Файл(ИмяФайлаДанных);
            if (!(Файл.Существует()))
            {
                Файл = Новый ТекстовыйДокумент;
                Файл.Записать(ИмяФайлаДанных);
                Файл = Новый Файл(ИмяФайлаДанных);
            }
            ВремяИзменения = Файл.ПолучитьВремяИзменения();
        }


    }
}
